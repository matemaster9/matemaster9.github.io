<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL存储过程和函数</title>
      <link href="2021/03/25/db-4/"/>
      <url>2021/03/25/db-4/</url>
      
        <content type="html"><![CDATA[<h1 id="存储过程基本知识"><a href="#存储过程基本知识" class="headerlink" title="存储过程基本知识"></a>存储过程基本知识</h1><p>操作采用的数据库关系表图</p><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210322215407.png"></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><b style="color: chocolate;">建一个不带参数的存储过程</b></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建一个productpricing存储过程</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token function">Avg</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> priceaverage<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token comment"># 删除此存储过程</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span>  <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> productpricing<span class="token punctuation">;</span><span class="token comment"># 使用此存储过程（此时会输出结果@priceaverage）</span><span class="token keyword">CALL</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------+</span><span class="token operator">|</span><span class="token variable">@priceaverage</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+</span><span class="token operator">|</span>    <span class="token number">16.133571</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: hotpink;">建一个带参数（输出）的存储过程</b></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建一个带参productpricing存储过程</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> productpricing<span class="token punctuation">(</span>    <span class="token keyword">OUT</span> pMin <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> pMax <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> pAvg <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token function">Min</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">INTO</span> pMin<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">Max</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">INTO</span> pMax<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">Avg</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">INTO</span> pAvg<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token comment"># 使用此存储过程（此时不在直接输出结果，而是将结果保存在输出参数中）</span><span class="token keyword">CALL</span> productpricing<span class="token punctuation">(</span><span class="token variable">@pMin</span><span class="token punctuation">,</span><span class="token variable">@pMax</span><span class="token punctuation">,</span><span class="token variable">@pAvg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@pMin</span><span class="token punctuation">,</span><span class="token variable">@pMax</span><span class="token punctuation">,</span><span class="token variable">@pAvg</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------+-------+</span><span class="token operator">|</span> <span class="token variable">@pMin</span> <span class="token operator">|</span> <span class="token variable">@pMax</span> <span class="token operator">|</span> <span class="token variable">@pAvg</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+-------+</span><span class="token operator">|</span>  <span class="token number">2.50</span> <span class="token operator">|</span> <span class="token number">55.00</span> <span class="token operator">|</span> <span class="token number">16.13</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+-------+</span><span class="token comment"># 删除此存储过程</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span>  <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> productpricing<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里解释一下：为什么不讲上面三个select子句合并？也就是下面的编写方式。</p><p>因为：在存储过程中，记录集不属于任何数据类型，为了和上面的输出参数类型保持一致，所以就必须将每一项的类型保持一一对应！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token function">Min</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Max</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Avg</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">INTO</span> pMin<span class="token punctuation">,</span>pMax<span class="token punctuation">,</span>pAcg<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: yellowgreen;">建一个智能的存储过程</b></p><p>场景描述：现在需要对订单进行统计，但是需要对某些地方的增加税收。</p><p>那么需要完成以下几步：</p><p>（1）正常统计订单</p><p>（2）对需要增加营业税的订单，进行税收处理</p><p>（3）返回统计的结果</p><p>存储过程：ordertotal</p><p>参数：</p><ul><li>onumber：订单号</li><li>taxable ：是否税收</li><li>ototal：统计结果        </li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> ordertotal<span class="token punctuation">(</span>    <span class="token operator">IN</span> onumber <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token operator">IN</span> taxable <span class="token keyword">BOOLEAN</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> ototal <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment"># 定义局部变量：total、taxrate</span><span class="token keyword">DECLARE</span> total <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">DECLARE</span> taxrate <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment"># 订单合计</span><span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>item_price<span class="token operator">*</span>quantity<span class="token punctuation">)</span><span class="token keyword">FROM</span> orderitems<span class="token keyword">INTO</span> total<span class="token punctuation">;</span><span class="token comment"># 是否交税</span><span class="token keyword">IF</span> taxable <span class="token keyword">THEN</span><span class="token keyword">SELECT</span> total<span class="token operator">+</span><span class="token punctuation">(</span>total<span class="token operator">/</span><span class="token number">100</span><span class="token operator">*</span>taxrate<span class="token punctuation">)</span> <span class="token keyword">INTO</span> total<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>        <span class="token comment"># 返回结果</span>    <span class="token keyword">SELECT</span> total <span class="token keyword">INTO</span> ototal<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上述的存储过程</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 不加税</span><span class="token keyword">CALL</span> ordertotal<span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@total</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------+</span><span class="token operator">|</span> <span class="token variable">@total</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+</span><span class="token operator">|</span> <span class="token number">1368.34</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+</span><span class="token comment"># 加税</span><span class="token keyword">CALL</span> ordertotal<span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@total</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------+</span><span class="token operator">|</span> <span class="token variable">@total</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+</span><span class="token operator">|</span> <span class="token number">1450.44</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为太空人表盘</title>
      <link href="2021/03/24/mst-spaceman/"/>
      <url>2021/03/24/mst-spaceman/</url>
      
        <content type="html"><![CDATA[<h1 id="动画效果图"><a href="#动画效果图" class="headerlink" title="动画效果图"></a>动画效果图</h1><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210324175449.gif"></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>这个项目是源自于抖音上特别火的华为太空人表盘，利用前端三大件: HTML5+CSS3+JavaScript实现<span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>呜呼！起飞！🛫✈️✈️✈️👉<a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-24/HW_watch">我要当太空人</a></p>]]></content>
      
      
      <categories>
          
          <category> MasterStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 动画 </tag>
            
            <tag> MasterStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络</title>
      <link href="2021/03/22/net-1/"/>
      <url>2021/03/22/net-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="2021/03/22/pco-1/"/>
      <url>2021/03/22/pco-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="2021/03/22/algs-1/"/>
      <url>2021/03/22/algs-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表——逻辑结构|存储结构|基本操作</title>
      <link href="2021/03/22/ds-1/"/>
      <url>2021/03/22/ds-1/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h1><p>在说线性表的逻辑结构之前，我们必须知晓线性表的基本概念！</p><p>线性表（linear-table）：是一组具有共性的有限序列。（共性：有着相同的数据类型）</p><p>举个栗子：<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>简单类型——单一数据</p><p>十二生肖（子鼠、丑牛、寅虎、卯兔、辰龙、巳蛇、午马、未羊、申猴、酉鸡、戌狗、亥猪）</p><p>复杂类型——复合数据</p><p>学生登记表（（start）,,…,（i-1）,（i）,（i+1）,…（end））</p><p>i = （name,stu_id,dept_id）</p><p><b style="color: darkgreen;">注：起始结点（start）只存在直接后继结点，终端结点（end）只存在直接前驱结点！其中任意中间结点，都存在直接前驱结点（prev）和直接后继结点（succ）！</b></p><p><b style="color: darkred;">线性表存在两种逻辑结构：线性表、链表</b></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="一元多项式"><a href="#一元多项式" class="headerlink" title="一元多项式"></a>一元多项式</h3><p>一元多项式（polynomial in one var）求和！<br>$$<br>P_n(x) = P_0+P_1x^1 +…P_{i-1}x^{i-1}+P_ix^i+P_{i+1}x^{i+1}+… + P_nx^n<br>$$</p><p>$$<br>Q_m(x) = Q_0+Q_1x^1 +…Q_{i-1}x^{i-1}+Q_ix^i+Q_{i+1}x^{i+1}+… + Q_mx^m<br>$$</p><p>$$<br>ADD = P_n(x) + Q_m(x)<br>$$</p><p>下面就是针对这一ADD操作的实现算法，以及数据的逻辑存储方式！</p><p>线性表逻辑结构：P<del>n</del>(x) Q<del>m</del>(x) ADD  <code>（这里假设M &gt;= n）</code><br>$$<br>P_n(X) = (P_1,P_2,…,P_{i-1},P_i,P_{i+1},…,P_n)<br>$$</p><p>$$<br>Q_m(x) = (Q_1,Q_2,…,Q_{i-1},Q_i,Q_{i+1},…,Q_m)<br>$$</p><p>$$<br>ADD = (P_1+Q_1,…,P_i+Q_i,…,P_n+Q_n,…,Q_m)<br>$$</p><ul><li>逻辑结构的思路（线性表）</li></ul><p>我们直接采取数组存储多项式的系数，利用数组的下标表示x的幂（下标和指数一一对应）。</p><table><thead><tr><th>P<del>n</del>(x)</th><th>0</th><th>1</th><th>2</th><th>…</th><th>i</th><th>…</th><th>n</th></tr></thead><tbody><tr><td></td><td>P<del>0</del></td><td>P<del>1</del></td><td>P<del>2</del></td><td></td><td>P<del>i</del></td><td></td><td>P<del>n</del></td></tr></tbody></table><table><thead><tr><th>Q<del>m</del>(x)</th><th>0</th><th>1</th><th>2</th><th>…</th><th>i</th><th>…</th><th>m</th></tr></thead><tbody><tr><td></td><td>Q<del>0</del></td><td>Q<del>1</del></td><td>Q<del>2</del></td><td></td><td>Q<del>i</del></td><td></td><td>Q<del>m</del></td></tr></tbody></table><p>我们这里的数组下标将富含指数的含义，那么举个栗子<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><table><thead><tr><th>P<del>2</del>(x) = 2+3x+x^2^</th><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td></td><td>2</td><td>3</td><td>1</td></tr></tbody></table><table><thead><tr><th>Q<del>3</del>(x) = 1+2x+3x^2^+4x^3^</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td></td><td>1</td><td>2</td><td>3</td><td>4</td></tr></tbody></table><table><thead><tr><th>ADD = 3+5x+4x^2^+4x^3^</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td></td><td>3</td><td>5</td><td>4</td><td>4</td></tr></tbody></table><ul><li>逻辑结构思路</li></ul><p>如果采取链表的方式，我们就不需要考虑下标的含义而是直接存储（系数，指数），只要将结果全部归并到相对长的链表中即可。<br>$$<br>Q_3(x) = 1 + 2x + 3x^2+4x^3<br>$$</p><table>    <tbody><tr>        <td>            <table>                <tbody><tr>                    <td>1</td>                    <td>0</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>2</td>                    <td>1</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>3</td>                    <td>2</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>4</td>                    <td>3</td>                    <td>null</td>                </tr>            </tbody></table>        </td>       </tr></tbody></table>    <h3 id="稀疏多项式案例"><a href="#稀疏多项式案例" class="headerlink" title="稀疏多项式案例"></a>稀疏多项式案例</h3><p>稀疏多项式主要针对那些指数不是连续的多项式，此时我们虽然逻辑结构依然采取数组和链表的方式，但是数组的存储内容发生了变化<br>$$<br>Q_{300}(x) = 1 + 2x + 3x^{200}+4x^{300}<br>$$</p><p>数组存储</p><table><thead><tr><th>数组下标</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>系数</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>指数</td><td>0</td><td>1</td><td>200</td><td>300</td></tr></tbody></table><p>链表的存储依旧不变</p><table>    <tbody><tr>        <td>            <table>                <tbody><tr>                    <td>1</td>                    <td>0</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>2</td>                    <td>1</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>3</td>                    <td>200</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>4</td>                    <td>300</td>                    <td>null</td>                </tr>            </tbody></table>        </td>       </tr></tbody></table><p>❗稀疏多项式运算算法：</p><p><b style="color: chocolate;">数组存储</b></p><p>因为数组存储的数据类型改变，下标与指数不在存在一一对应关系，所以需要引入新的结果数组result存储新的结果多项式！</p><p>（1）分布对多项式P(x)与Q(x)每一项进行遍历，进行比较</p><ul><li>指数相同，做ADD，当系数不为0时加入result</li><li>指数不相同，将指数小的copy到result</li></ul><p>（2）当一个多项式遍历结束，将另一个多项式未遍历的数据copy到result</p><p style="color: blue;">注：这里关于result长度的思考？<br>最好的情况下P(x)与Q(x)每一项一一对应，此时result_length = max(m,n)。<br>最坏的情况下P(x)与Q(x)每一项都不对应result_length = m+n</p><p><b style="color: chocolate;">链表存储</b></p><p>算法一致，好处就是链表不需要再单独创建一个链表，只要遵循上面的算法进行结果集的链接！看下图</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210324232448.jpg" style="zoom:50%;"><h3 id="图书管理系统案例"><a href="#图书管理系统案例" class="headerlink" title="图书管理系统案例"></a>图书管理系统案例</h3><p>一般涉及到一个图书管理关系表 <strong>Book (IBSN,name,price)</strong></p><p>此时数组和链表存储的数据对象将是抽象数据类型（ADT） Book</p><p><b style="color: navy;">数组存储</b></p><table>    <tbody><tr>        <td>            <table>                <tbody><tr>                    <td>1343442114</td>                    <td>算法4</td>                    <td>100.00</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>23542536</td>                    <td>Java编程思想</td>                    <td>200.00</td>                </tr>            </tbody></table>        </td>     </tr></tbody></table><p><b style="color: navy;">链表存储</b></p><table>    <tbody><tr>        <td>            <table>                <tbody><tr>                    <td>1343442114</td>                    <td>算法4</td>                    <td>100.00</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>23542536</td>                    <td>Java编程思想</td>                    <td>200.00</td>                    <td></td>                </tr>            </tbody></table>        </td>     </tr></tbody></table><h2 id="逻辑结构上的类型定义"><a href="#逻辑结构上的类型定义" class="headerlink" title="逻辑结构上的类型定义"></a>逻辑结构上的类型定义</h2><p>这里主要介绍线性表是如何定义的，具体的共性操作！（不涉及实现问题）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">initList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">destroyList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clearList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listEmpty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">locateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">priorElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>cur_e<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev_e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">nextElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>cur_e<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev_e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listDelete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listTraverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token function">visited</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线性表的数组实现模板</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Type data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//数组静态分配</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span> SqList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Type <span class="token operator">*</span>data<span class="token punctuation">;</span>  <span class="token comment">//数组动态分配</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span> SqList<span class="token punctuation">;</span><span class="token comment">// C语言数组空间分配函数</span>SqList l<span class="token punctuation">;</span>l<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>Type<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Type<span class="token punctuation">)</span><span class="token operator">*</span>MaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// malloc(m)：分配m字节内存空间</span><span class="token comment">// sizeof(t)：获取t类型的字节长度</span><span class="token comment">// free(p)：释放p指针的空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h1><p>线性表基于数组的实现，为了避免重复造轮子这里就直接基于Java内置的动态列表结构<code>ArrayList</code>实现！<span class="github-emoji"><span>😉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SqList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> sqList<span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sqList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getElem</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">priorElem</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> position <span class="token operator">=</span> sqList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">nextElem</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> position <span class="token operator">=</span> sqList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> sqList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insElem</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">delElem</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线性表已经销毁！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span> sqList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Query for MySQL</title>
      <link href="2021/03/21/db-3/"/>
      <url>2021/03/21/db-3/</url>
      
        <content type="html"><![CDATA[<p><b style="color: red;">本片博文的sql文件</b>👉<a href="https://gitee.com/matemaster/master-depository/blob/master/2021-03-22/Query-for-MySQL.sql">Query-for-MySQL</a></p><p><b style="color: red;">练习数据库SQL文件</b>👉<a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-22/Query-MySQL-Lianxi">Query-MySQL-Lianxi</a></p><p><b style="color: red;">SQL在线练习网站</b>👉<a href="https://sqlzoo.net/">sqlzoo</a></p><h1 id="select结构"><a href="#select结构" class="headerlink" title="select结构"></a>select结构</h1><p>基本结构</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">[</span>field<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">FROM</span>   <span class="token punctuation">[</span><span class="token keyword">table</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span><span class="token keyword">view</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">WHERE</span>  <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用的select结构</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">|</span>select_list<span class="token operator">&gt;</span><span class="token keyword">FROM</span> <span class="token operator">&lt;</span>left_table<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>join_type<span class="token operator">&gt;</span> <span class="token keyword">JOIN</span> <span class="token operator">&lt;</span>right_table<span class="token operator">&gt;</span><span class="token keyword">ON</span> <span class="token operator">&lt;</span>join_condition<span class="token operator">&gt;</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>where_condition<span class="token operator">&gt;</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>group_by_list<span class="token operator">&gt;</span> <span class="token keyword">WITH</span><span class="token operator">&lt;</span>CUBE<span class="token operator">|</span>ROLLUP<span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>having_condition<span class="token operator">&gt;</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>order_by_list<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token keyword">LIMIT</span> <span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>limit_number<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方完整版结构</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">[</span><span class="token keyword">ALL</span> <span class="token operator">|</span> <span class="token keyword">DISTINCT</span> <span class="token operator">|</span> <span class="token keyword">DISTINCTROW</span> <span class="token punctuation">]</span>      <span class="token punctuation">[</span>HIGH_PRIORITY<span class="token punctuation">]</span>      <span class="token punctuation">[</span>STRAIGHT_JOIN<span class="token punctuation">]</span>      <span class="token punctuation">[</span>SQL_SMALL_RESULT<span class="token punctuation">]</span> <span class="token punctuation">[</span>SQL_BIG_RESULT<span class="token punctuation">]</span> <span class="token punctuation">[</span>SQL_BUFFER_RESULT<span class="token punctuation">]</span>      <span class="token punctuation">[</span>SQL_CACHE <span class="token operator">|</span> SQL_NO_CACHE<span class="token punctuation">]</span> <span class="token punctuation">[</span>SQL_CALC_FOUND_ROWS<span class="token punctuation">]</span>    select_expr<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">INTO</span> <span class="token keyword">OUTFILE</span> <span class="token string">'file_name'</span> export_options<span class="token operator">|</span> <span class="token keyword">INTO</span> <span class="token keyword">DUMPFILE</span> <span class="token string">'file_name'</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">FROM</span> table_references    <span class="token punctuation">[</span><span class="token keyword">WHERE</span> where_definition<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> {col_name <span class="token operator">|</span> expr <span class="token operator">|</span> position} <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token keyword">WITH ROLLUP</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">HAVING</span> where_definition<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> {col_name <span class="token operator">|</span> expr <span class="token operator">|</span> position} <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> {<span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">,</span><span class="token punctuation">]</span> row_count <span class="token operator">|</span> row_count <span class="token keyword">OFFSET</span> <span class="token keyword">offset</span>}<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">PROCEDURE</span> procedure_name<span class="token punctuation">(</span>argument_list<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span> <span class="token operator">|</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于完整结构中各个子句的含义，可以在后面的例子程序中理解使用！</p><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>这里就不按照官方完整版结构去描述语句执行顺序，太多！太烦！太难！  我们就只要熟练掌握常用的语句即可！在整个查询操作的过程中，每一次操作都会产生一个虚拟表（virtual table），只有最好的结果表会被返回。</p><p style ="color: hotpink">    （1）FROM：对关系表进行笛卡尔积，产生虚表vt1<br>    （2）ON：对vt1做筛选，将满足条件的元组加入新的虚表vt2<br>    （3）JOIN：对于指定了OUTER JOIN操作，那么完成对应的外连接操作，产生虚表vt3<br>    （4）WHERE：对vt3元组进行条件筛选，将满足条件的元组加入新的虚表vt4<br>    （5）GROUP BY：对vt4结果分组，如果存在 CUBE/ROLLUP操作，那么将操作处理后的结果加入vt5<br>    （6）HAVING：根据过滤条件去除元组，产生虚表vt6<br>    （7）SELECT：投影指定的列，如果存在DISTINCT操作，那么去除重复列后产生虚表vt7<br>    （8）ORDER BY：根据排序的列进行升降序，产生虚表vt8<br>    （9）LIMIT：根据偏移量/行数要求，产生vt9，并将结果表（result table）返回</p><h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><h2 id="栗子关系表"><a href="#栗子关系表" class="headerlink" title="栗子关系表"></a>栗子关系表</h2><p>例子关系表<code>fruits</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># create tb_fruits</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> fruits<span class="token punctuation">(</span>    f_id    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    s_id    <span class="token keyword">INT</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    f_name  <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    f_price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>f_id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># insert data into tb_fruits</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> fruits <span class="token punctuation">(</span>f_id<span class="token punctuation">,</span> s_id<span class="token punctuation">,</span> f_name<span class="token punctuation">,</span> f_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'a1'</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'blackberry'</span><span class="token punctuation">,</span> <span class="token number">10.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'bs1'</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'bs2'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'melon'</span><span class="token punctuation">,</span><span class="token number">8.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'t1'</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token number">10.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'t2'</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token number">5.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'o2'</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">'coconut'</span><span class="token punctuation">,</span> <span class="token number">9.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'c0'</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'a2'</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">'apricot'</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'l2'</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">'lemon'</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'b2'</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">'berry'</span><span class="token punctuation">,</span> <span class="token number">7.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'m1'</span><span class="token punctuation">,</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token number">15.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'m2'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'xbabay'</span><span class="token punctuation">,</span> <span class="token number">2.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'t4'</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token string">'xbababa'</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'m3'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'xxtt'</span><span class="token punctuation">,</span> <span class="token number">11.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'b5'</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子关系表<code>customers</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># create tb_customers</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> customers<span class="token punctuation">(</span>  c_id      <span class="token keyword">int</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  c_name    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_address <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_city    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_zip     <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_contact <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_email   <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># insert data into tb_customers</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customers<span class="token punctuation">(</span>c_id<span class="token punctuation">,</span> c_name<span class="token punctuation">,</span> c_address<span class="token punctuation">,</span> c_city<span class="token punctuation">,</span> c_zip<span class="token punctuation">,</span>  c_contact<span class="token punctuation">,</span> c_email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token string">'RedHook'</span><span class="token punctuation">,</span><span class="token string">'200 Street'</span><span class="token punctuation">,</span><span class="token string">'Tianjin'</span><span class="token punctuation">,</span><span class="token string">'300000'</span><span class="token punctuation">,</span><span class="token string">'LiMing'</span><span class="token punctuation">,</span><span class="token string">'LMing@163.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span> <span class="token string">'Stars'</span><span class="token punctuation">,</span><span class="token string">'333 Fromage Lane'</span><span class="token punctuation">,</span><span class="token string">'Dalian'</span><span class="token punctuation">,</span><span class="token string">'116000'</span><span class="token punctuation">,</span><span class="token string">'Zhangbo'</span><span class="token punctuation">,</span><span class="token string">'Jerry@hotmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10003</span><span class="token punctuation">,</span> <span class="token string">'Netbhood'</span><span class="token punctuation">,</span><span class="token string">'1 Sunny Place'</span><span class="token punctuation">,</span><span class="token string">'Qingdao'</span><span class="token punctuation">,</span><span class="token string">'266000'</span><span class="token punctuation">,</span><span class="token string">'LuoCong'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10004</span><span class="token punctuation">,</span> <span class="token string">'JOTO'</span><span class="token punctuation">,</span><span class="token string">'829 Riverside Drive'</span><span class="token punctuation">,</span><span class="token string">'Haikou'</span><span class="token punctuation">,</span><span class="token string">'570000'</span><span class="token punctuation">,</span><span class="token string">'YangShan'</span><span class="token punctuation">,</span><span class="token string">'sam@hotmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子关系表<code>orderitems</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># create tb_orderitems</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orderitems<span class="token punctuation">(</span>  o_num      <span class="token keyword">int</span>          <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  o_item     <span class="token keyword">int</span>          <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  f_id       <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  quantity   <span class="token keyword">int</span>          <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  item_price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>o_num<span class="token punctuation">,</span>o_item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment"># insert data into tb_orderitems</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderitems<span class="token punctuation">(</span>o_num<span class="token punctuation">,</span> o_item<span class="token punctuation">,</span> f_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">30001</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a1'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30001</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30001</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'bs1'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30001</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'bs2'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">9.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30002</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30003</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c0'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30004</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'o2'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2.50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30005</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c0'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30005</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8.99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30005</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a2'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30005</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'m1'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">14.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>相当于关系代数中投影关系R的全部列，等价于select所有列！<br>$$<br>Π_{f_id,s_id,f_name,f_price}(fruits)<br>$$</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> a1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> a2   <span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> b1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> b2   <span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span> b5   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> bs1  <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span> bs2  <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span> c0   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span> l2   <span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span> m1   <span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span> m2   <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span> m3   <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span> o2   <span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span> t1   <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span> t2   <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span> t4   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以指定某个（某些）字段，并且可以控制字段是否去除重复的属性值！<br>$$<br>Π_{f_name,f_price}(fruits)<br>$$</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> f_name<span class="token punctuation">,</span> f_price <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>通过<code>WHERE</code>子句对列进行条件判断，筛选出满足条件的记录！相等于关系代数中的选择操作<br>$$<br>Π_{f_name,f_price}(σ_{f_price &lt; 10}(fruits))<br>$$</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> f_name<span class="token punctuation">,</span> f_price<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> f_price <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------+---------+</span><span class="token operator">|</span> f_name  <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+</span><span class="token operator">|</span> apple   <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> apricot <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> berry   <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span> xxxx    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> melon   <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span> cherry  <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span> lemon   <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span> xbabay  <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span> coconut <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span> grape   <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span> xbababa <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>WHERE</code>支持条件运算符，以及逻辑连接词：<code>AND 、OR 、IN 、BEWTEEN AND、 IS NULL、 NOT 、 LIKE</code></p><p><code>IN</code>查询：查询所有s_id不等于101也不等于102的记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> s_id<span class="token punctuation">,</span>f_name<span class="token punctuation">,</span> f_price<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> s_id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> f_name<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+---------+---------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> f_name  <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------+---------+</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> apricot <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> berry   <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> coconut <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> lemon   <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> mango   <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> melon   <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xbababa <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xbabay  <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xxtt    <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>BEWTEEN AND</code>查询：查询价格在2.00元到10.20元之间的水果名称和价格</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> f_name<span class="token punctuation">,</span> f_price<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> f_price <span class="token operator">BETWEEN</span> <span class="token number">2.00</span> <span class="token operator">AND</span> <span class="token number">10.20</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>LIKE</code>查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查找所有以’b’字母开头的水果</span><span class="token keyword">SELECT</span> f_id<span class="token punctuation">,</span> f_name<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> f_name <span class="token operator">LIKE</span> <span class="token string">'b%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> f_name     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------------+</span><span class="token operator">|</span> b1   <span class="token operator">|</span> blackberry <span class="token operator">|</span><span class="token operator">|</span> b2   <span class="token operator">|</span> berry      <span class="token operator">|</span><span class="token operator">|</span> t1   <span class="token operator">|</span> banana     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------------+</span><span class="token comment"># 查询f_name中包含字母’g’的记录</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> f_id<span class="token punctuation">,</span> f_name    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> fruits    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> f_name <span class="token operator">LIKE</span> <span class="token string">'%g%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> f_name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> bs1  <span class="token operator">|</span> orange <span class="token operator">|</span><span class="token operator">|</span> m1   <span class="token operator">|</span> mango  <span class="token operator">|</span><span class="token operator">|</span> t2   <span class="token operator">|</span> grape  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token comment"># 查询以’b’开头，并以’y’结尾的水果的名称</span><span class="token keyword">SELECT</span> f_name<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> f_name <span class="token operator">LIKE</span> <span class="token string">'b%y'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+</span><span class="token operator">|</span> f_name     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+</span><span class="token operator">|</span> blackberry <span class="token operator">|</span><span class="token operator">|</span> berry      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+</span><span class="token comment"># 查询以字母’y’结尾，且’y’前面只有4个字母的记录</span><span class="token keyword">SELECT</span> f_id<span class="token punctuation">,</span> f_name<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> f_name <span class="token operator">LIKE</span> <span class="token string">'____y'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> f_name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> b2   <span class="token operator">|</span> berry  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NULL</code>查询：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询customers表中c_email为空的记录的c_id、c_name和c_email字段值</span><span class="token keyword">SELECT</span> c_id<span class="token punctuation">,</span> c_name<span class="token punctuation">,</span>c_email<span class="token keyword">FROM</span> customers<span class="token keyword">WHERE</span> c_email <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+----------+---------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> c_name   <span class="token operator">|</span> c_email <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+---------+</span><span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> Netbhood <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+---------+</span><span class="token comment"># 查询customers表中c_email不为空的记录的c_id、c_name和c_email字段值</span><span class="token keyword">SELECT</span> c_id<span class="token punctuation">,</span> c_name<span class="token punctuation">,</span>c_email<span class="token keyword">FROM</span> customers<span class="token keyword">WHERE</span> c_email <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------+-------------------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> c_name  <span class="token operator">|</span> c_email           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+-------------------+</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> RedHook <span class="token operator">|</span> LMing<span class="token variable">@163.com</span>     <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span> Stars   <span class="token operator">|</span> Jerry<span class="token variable">@hotmail.com</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> JOTO    <span class="token operator">|</span> sam<span class="token variable">@hotmail.com</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+-------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>AND</code>查询：在fruits表中查询s_id = 101，并且f_price大于等于5的水果价格和名称</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> f_id<span class="token punctuation">,</span> f_price<span class="token punctuation">,</span> f_name<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> s_id <span class="token operator">=</span> <span class="token string">'101'</span> <span class="token operator">AND</span> f_price <span class="token operator">&gt;=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+---------+------------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> f_price <span class="token operator">|</span> f_name     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------+------------+</span><span class="token operator">|</span> a1   <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span> apple      <span class="token operator">|</span><span class="token operator">|</span> b1   <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>OR</code>查询：查询s_id=101或者s_id=102的水果供应商的f_price和f_name</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> s_id<span class="token punctuation">,</span>f_name<span class="token punctuation">,</span> f_price<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> s_id <span class="token operator">=</span> <span class="token number">101</span> <span class="token operator">OR</span> s_id <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------------+---------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------------+---------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>利用<code>ORDER BY</code>子句，对指定的列进行排序操作，默认为<code>ASC</code>若要降序就必须利用<code>DESC</code>指定降序操作！</p><p><code>ORDER BY</code>查询：查询fruits表，先按f_price降序排序，再按f_name字段升序排序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> f_price<span class="token punctuation">,</span> f_name<span class="token keyword">FROM</span> fruits<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> f_price <span class="token keyword">DESC</span><span class="token punctuation">,</span> f_name<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------+------------+</span><span class="token operator">|</span> f_price <span class="token operator">|</span> f_name     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+------------+</span><span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span> mango      <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span> xxtt       <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span> orange     <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span> banana     <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span> coconut    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span> melon      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span> berry      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span> lemon      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span> grape      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span> apple      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span> xbababa    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span> xxxx       <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span> xbabay     <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span> apricot    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p><code>GROUP BY</code>查询：根据s_id对fruits表中的数据进行分组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> s_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Total<span class="token keyword">FROM</span> fruits<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> Total <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>“注”</strong> ：这里通过一个聚集函数<code>COUNT</code>计算出每个分组含有的数目</p><p>当然我们还可以利用一个特殊的函数<code>GROUP_CONCAT</code>将每个分组的水果名称显示出来，并且通过<code>HAVING</code>子句对分组进行过滤，排除分组数目为一个的组的水果名称！</p><p>根据s_id对fruits表中的数据进行分组，并显示水果种类大于1的分组信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> s_id<span class="token punctuation">,</span> GROUP_CONCAT<span class="token punctuation">(</span>f_name<span class="token punctuation">)</span> <span class="token keyword">AS</span> Names    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> fruits    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>f_name<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+-------------------------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> Names                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------------------------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple<span class="token punctuation">,</span>blackberry<span class="token punctuation">,</span>cherry <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> orange<span class="token punctuation">,</span>banana<span class="token punctuation">,</span>grape     <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> apricot<span class="token punctuation">,</span>coconut         <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> berry<span class="token punctuation">,</span>lemon             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> melon<span class="token punctuation">,</span>xbabay<span class="token punctuation">,</span>xxtt       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx<span class="token punctuation">,</span>xbababa            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>MySQL</code>中还提供了一个关键操作<code>WITH ROLLUP</code>统计记录的数量。<b style="color: chocolate;">（ORDER BY与WITH ROLLUP具有不兼容性）</b></p><p>根据s_id对fruits表中的数据进行分组，并显示记录数量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> s_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Total    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> fruits    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> Total <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">16</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当前所有的分组都是针对一个列，那么<code>GROUP BY</code>依旧支持是多列分组！</p><p>根据s_id和f_name字段对fruits表中的数据进行分组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span>  <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">group</span> <span class="token keyword">by</span> s_id<span class="token punctuation">,</span>f_name<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> a1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> a2   <span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> b1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> b2   <span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span> b5   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> bs1  <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span> bs2  <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span> c0   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span> l2   <span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span> m1   <span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span> m2   <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span> m3   <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span> o2   <span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span> t1   <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span> t2   <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span> t4   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>GROUP BY</code>和<code>ORDER BY</code>配合使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> o_num<span class="token punctuation">,</span>  <span class="token function">SUM</span><span class="token punctuation">(</span>quantity <span class="token operator">*</span> item_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> orderTotal    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> orderitems    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> o_num    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token operator">*</span>item_price<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">100</span>    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> orderTotal<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+------------+</span><span class="token operator">|</span> o_num <span class="token operator">|</span> orderTotal <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+------------+</span><span class="token operator">|</span> <span class="token number">30004</span> <span class="token operator">|</span>     <span class="token number">125.00</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span>     <span class="token number">236.85</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30001</span> <span class="token operator">|</span>     <span class="token number">268.80</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span>    <span class="token number">1000.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="limit限制结果数量"><a href="#limit限制结果数量" class="headerlink" title="limit限制结果数量"></a>limit限制结果数量</h3><p>显示fruits表查询结果的前4行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">From</span> fruits <span class="token keyword">LIMIT</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> a1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> a2   <span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> b1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> b2   <span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在fruits表中，使用LIMIT子句，返回从第5个记录开始的，行数长度为3的记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">From</span> fruits <span class="token keyword">LIMIT</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+--------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+--------+---------+</span><span class="token operator">|</span> b5   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx   <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> bs1  <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> orange <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span> bs2  <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> melon  <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+--------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><table><thead><tr><th>聚集函数</th></tr></thead><tbody><tr><td>MAX()</td></tr><tr><td>MIN()</td></tr><tr><td>AVG()</td></tr><tr><td>COUNT()</td></tr><tr><td>SUM()</td></tr></tbody></table><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><p>多表查询主要是加入了多个表的连接查询操作，主要分为 <strong>theta-join</strong> 和 <strong>outer-join</strong></p><h2 id="栗子关系表-1"><a href="#栗子关系表-1" class="headerlink" title="栗子关系表"></a>栗子关系表</h2><p>栗子关系<code>suppliers</code>：供应商</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># create tb_suppliers</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> suppliers<span class="token punctuation">(</span>  s_id      <span class="token keyword">int</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  s_name    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  s_city    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  s_zip     <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  s_call    <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>s_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment"># insert data into tb_suppliers</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> suppliers<span class="token punctuation">(</span>s_id<span class="token punctuation">,</span> s_name<span class="token punctuation">,</span>s_city<span class="token punctuation">,</span>  s_zip<span class="token punctuation">,</span> s_call<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'FastFruit Inc.'</span><span class="token punctuation">,</span><span class="token string">'Tianjin'</span><span class="token punctuation">,</span><span class="token string">'300000'</span><span class="token punctuation">,</span><span class="token string">'48075'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'LT Supplies'</span><span class="token punctuation">,</span><span class="token string">'Chongqing'</span><span class="token punctuation">,</span><span class="token string">'400000'</span><span class="token punctuation">,</span><span class="token string">'44333'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">'ACME'</span><span class="token punctuation">,</span><span class="token string">'Shanghai'</span><span class="token punctuation">,</span><span class="token string">'200000'</span><span class="token punctuation">,</span><span class="token string">'90046'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">'FNK Inc.'</span><span class="token punctuation">,</span><span class="token string">'Zhongshan'</span><span class="token punctuation">,</span><span class="token string">'528437'</span><span class="token punctuation">,</span><span class="token string">'11111'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'Good Set'</span><span class="token punctuation">,</span><span class="token string">'Taiyuang'</span><span class="token punctuation">,</span><span class="token string">'030000'</span><span class="token punctuation">,</span> <span class="token string">'22222'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token string">'Just Eat Ours'</span><span class="token punctuation">,</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span><span class="token string">'010'</span><span class="token punctuation">,</span> <span class="token string">'45678'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token string">'DK Inc.'</span><span class="token punctuation">,</span><span class="token string">'Zhengzhou'</span><span class="token punctuation">,</span><span class="token string">'450000'</span><span class="token punctuation">,</span> <span class="token string">'33332'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栗子关系表<code>orders</code>：订单</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># create tb_orders</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders<span class="token punctuation">(</span>  o_num  <span class="token keyword">int</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  o_date <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_id   <span class="token keyword">int</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>o_num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment"># insert data into tb_orders</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orders<span class="token punctuation">(</span>o_num<span class="token punctuation">,</span> o_date<span class="token punctuation">,</span> c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">30001</span><span class="token punctuation">,</span> <span class="token string">'2008-09-01'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30002</span><span class="token punctuation">,</span> <span class="token string">'2008-09-12'</span><span class="token punctuation">,</span> <span class="token number">10003</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30003</span><span class="token punctuation">,</span> <span class="token string">'2008-09-30'</span><span class="token punctuation">,</span> <span class="token number">10004</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30004</span><span class="token punctuation">,</span> <span class="token string">'2008-10-03'</span><span class="token punctuation">,</span> <span class="token number">10005</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30005</span><span class="token punctuation">,</span> <span class="token string">'2008-10-08'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> suppliers<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span> s_name<span class="token punctuation">,</span>f_name<span class="token punctuation">,</span> f_price    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> suppliers <span class="token keyword">natural</span> <span class="token keyword">join</span> fruits<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> s_name         <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> Just Eat Ours  <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>通过广义的笛卡尔积实现查询，供应商供应的名称、id，以及供应水果的名称、销售价格！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span>  <span class="token keyword">SELECT</span> suppliers<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span> s_name<span class="token punctuation">,</span>f_name<span class="token punctuation">,</span> f_price    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">FROM</span> fruits <span class="token punctuation">,</span>suppliers    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">WHERE</span> fruits<span class="token punctuation">.</span>s_id <span class="token operator">=</span> suppliers<span class="token punctuation">.</span>s_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> s_name         <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> Just Eat Ours  <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的操作很显然这个是等价于自然连接操作<strong>（Natural-Join）</strong>，上面代码有另外的等价写法！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span>  <span class="token keyword">SELECT</span> suppliers<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span> s_name<span class="token punctuation">,</span>f_name<span class="token punctuation">,</span> f_price    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">FROM</span> fruits <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> suppliers    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">ON</span> fruits<span class="token punctuation">.</span>s_id <span class="token operator">=</span> suppliers<span class="token punctuation">.</span>s_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> s_name         <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> Just Eat Ours  <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时才是真正的连接查询，（INNER JOIN…ON）的语法属于一般情况的（θ-jion）。连接条件θ：ON 子句表示，对于实现自然连接时，也可以加入using子句（INNER JOIN…USING(col_name)）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span>    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> fruits <span class="token keyword">join</span> suppliers <span class="token keyword">using</span><span class="token punctuation">(</span>s_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+----------------+-----------+--------+--------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> f_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span> s_name         <span class="token operator">|</span> s_city    <span class="token operator">|</span> s_zip  <span class="token operator">|</span> s_call <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+----------------+-----------+--------+--------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> a1   <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> Tianjin   <span class="token operator">|</span> <span class="token number">300000</span> <span class="token operator">|</span> <span class="token number">48075</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> a2   <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> Shanghai  <span class="token operator">|</span> <span class="token number">200000</span> <span class="token operator">|</span> <span class="token number">90046</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> b1   <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> Tianjin   <span class="token operator">|</span> <span class="token number">300000</span> <span class="token operator">|</span> <span class="token number">48075</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> b2   <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> Zhongshan <span class="token operator">|</span> <span class="token number">528437</span> <span class="token operator">|</span> <span class="token number">11111</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> b5   <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> Zhengzhou <span class="token operator">|</span> <span class="token number">450000</span> <span class="token operator">|</span> <span class="token number">33332</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> bs1  <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> Chongqing <span class="token operator">|</span> <span class="token number">400000</span> <span class="token operator">|</span> <span class="token number">44333</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> bs2  <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> Taiyuang  <span class="token operator">|</span> <span class="token number">030000</span> <span class="token operator">|</span> <span class="token number">22222</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> c0   <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> Tianjin   <span class="token operator">|</span> <span class="token number">300000</span> <span class="token operator">|</span> <span class="token number">48075</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> l2   <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> Zhongshan <span class="token operator">|</span> <span class="token number">528437</span> <span class="token operator">|</span> <span class="token number">11111</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> m1   <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span> Just Eat Ours  <span class="token operator">|</span> Beijing   <span class="token operator">|</span> <span class="token number">010</span>    <span class="token operator">|</span> <span class="token number">45678</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> m2   <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> Taiyuang  <span class="token operator">|</span> <span class="token number">030000</span> <span class="token operator">|</span> <span class="token number">22222</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> m3   <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> Taiyuang  <span class="token operator">|</span> <span class="token number">030000</span> <span class="token operator">|</span> <span class="token number">22222</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> o2   <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> Shanghai  <span class="token operator">|</span> <span class="token number">200000</span> <span class="token operator">|</span> <span class="token number">90046</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> t1   <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> Chongqing <span class="token operator">|</span> <span class="token number">400000</span> <span class="token operator">|</span> <span class="token number">44333</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> t2   <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> Chongqing <span class="token operator">|</span> <span class="token number">400000</span> <span class="token operator">|</span> <span class="token number">44333</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> t4   <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> Zhengzhou <span class="token operator">|</span> <span class="token number">450000</span> <span class="token operator">|</span> <span class="token number">33332</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+----------------+-----------+--------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>Π_{s_id,s_name,f_name,f_price}(fruits▻◅suppliers)<br>$$</p><p>$$<br>Π_{s_id,s_name,f_name,f_price}(σ_{fruits.s_id = suppliers.s_id}(fruits×suppliers))<br>$$</p><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>一般的（θ-jion）只能保留满足匹配条件的元组，对于哪些不满足的元组删除。所以引入了外连接，对于不满足连接条件的元组，采取对应属性列置空的情况，保留相应的不匹配元组。</p><ul><li><strong>LEFT OUTER JOIN</strong></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">-------+----------+---------------------+---------+--------+-----------+-------------------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> c_name   <span class="token operator">|</span> c_address           <span class="token operator">|</span> c_city  <span class="token operator">|</span> c_zip  <span class="token operator">|</span> c_contact <span class="token operator">|</span> c_email           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+---------------------+---------+--------+-----------+-------------------+</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> RedHook  <span class="token operator">|</span> <span class="token number">200</span> Street          <span class="token operator">|</span> Tianjin <span class="token operator">|</span> <span class="token number">300000</span> <span class="token operator">|</span> LiMing    <span class="token operator">|</span> LMing<span class="token variable">@163.com</span>     <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span> Stars    <span class="token operator">|</span> <span class="token number">333</span> Fromage Lane    <span class="token operator">|</span> Dalian  <span class="token operator">|</span> <span class="token number">116000</span> <span class="token operator">|</span> Zhangbo   <span class="token operator">|</span> Jerry<span class="token variable">@hotmail.com</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> Netbhood <span class="token operator">|</span> <span class="token number">1</span> Sunny Place       <span class="token operator">|</span> Qingdao <span class="token operator">|</span> <span class="token number">266000</span> <span class="token operator">|</span> LuoCong   <span class="token operator">|</span> <span class="token boolean">NULL</span>              <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> JOTO     <span class="token operator">|</span> <span class="token number">829</span> Riverside Drive <span class="token operator">|</span> Haikou  <span class="token operator">|</span> <span class="token number">570000</span> <span class="token operator">|</span> YangShan  <span class="token operator">|</span> sam<span class="token variable">@hotmail.com</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+---------------------+---------+--------+-----------+-------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">-------+---------------------+-------+</span><span class="token operator">|</span> o_num <span class="token operator">|</span> o_date              <span class="token operator">|</span> c_id  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------------------+-------+</span><span class="token operator">|</span> <span class="token number">30001</span> <span class="token operator">|</span> <span class="token number">2008</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30002</span> <span class="token operator">|</span> <span class="token number">2008</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span> <span class="token number">2008</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30004</span> <span class="token operator">|</span> <span class="token number">2008</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token number">10005</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span> <span class="token number">2008</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------------------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span>  <span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>o_num    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">FROM</span> customers <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>c_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>c_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> o_num <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> <span class="token number">30002</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里看出，对于没有订单的客户 10002采取保留的方式！</p><ul><li><strong>RIGHT OUTER JOIN</strong></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span>  <span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>o_num    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">FROM</span> customers <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>c_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>c_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> o_num <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> <span class="token number">30002</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">30004</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里对于订单号 30004对应的客户id并没有在客户信息表当中，所以依旧采取保留。</p><p>因为MySQL不支持全外连接，所以为了实现全外连接就必须依赖于<strong>（union[ALL]）</strong>合并左右外连接结果来实现！</p><p>一般情况：最好使用 <strong>UNION ALL</strong>这样会保留重复的列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>o_num    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> customers <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>c_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>c_id    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">union</span>    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>o_num    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> customers <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>c_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>c_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> o_num <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> <span class="token number">30002</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">30004</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里做一个简单的总结：自然连接<strong>（NATURAL JOIN）</strong>等价于<strong>（[INNER] JOIN…USING…）</strong></p><p>而更为一般情况的<strong>（θ-join）</strong>则可以使用<strong>（[INNER] JOIN…ON…）</strong></p><p>左外连接<strong>（LEFT [OUTER] JOIN…ON…）</strong>右外连接<strong>（RIGHT [OUTER] JOIN…ON…）</strong></p><p>全外连接：<strong>（LEFT [OUTER] JOIN…ON…）</strong> <strong>UNION</strong> <strong>（RIGHT [OUTER] JOIN…ON…）</strong></p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>子查询：利用嵌套的关系，使用内层<strong>select</strong>的结果去作为外层查询的条件实现查询功能！</p><p>一般情况，子查询会利用<code>IN、ALL、ANY、SOME、EXISTS、θ</code>一些关键字和比较运算符θ</p><p>先创建一个栗子</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">table</span> tbl1 <span class="token punctuation">(</span> num1 <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">table</span> tbl2 <span class="token punctuation">(</span> num2 <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ANY/SOME</li></ul><p>从tbl1中找出大于tbl2任意一个值的num1列元组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> num1 <span class="token keyword">FROM</span> tbl1 <span class="token keyword">WHERE</span> num1 <span class="token operator">&gt;</span> <span class="token keyword">ANY</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> num2 <span class="token keyword">FROM</span> tbl2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span> num1 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span>   <span class="token number">13</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ALL</li></ul><p>从tbl1中找出大于tbl2所有值的num1列元组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> num1 <span class="token keyword">FROM</span> tbl1 <span class="token keyword">WHERE</span> num1 <span class="token operator">&gt;</span> <span class="token keyword">ALL</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> num2 <span class="token keyword">FROM</span> tbl2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span> num1 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>EXISTS</li></ul><p>从供应商表中查找是否存在 107号供应商，若存在的话，找出由它供应的水果所有信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> fruits<span class="token keyword">where</span> s_id <span class="token operator">=</span> <span class="token number">107</span> <span class="token operator">and</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s_id <span class="token keyword">from</span> suppliers <span class="token keyword">where</span> s_id <span class="token operator">=</span> <span class="token number">107</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+---------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name  <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+---------+---------+</span><span class="token operator">|</span> b5   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> t4   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xbababa <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+---------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过子查询的结果判断：若查询的结果不为空，也就是EXISTS存在，那么就返回true，继续下一步外层查询</p><ul><li>IN</li></ul><p>在orderitems表中查询f_id为c0的订单号，并根据订单号查询具有订单号的客户c_id</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> c_id <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> o_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> o_num  <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> f_id <span class="token operator">=</span> <span class="token string">'c0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上的步骤可以分为两步进行：</p><p>（1） 在订单信息中查询f_id为c0的订单号码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> o_num  <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> f_id <span class="token operator">=</span> <span class="token string">'c0'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token operator">|</span> o_num <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）外层查询根据查询结果（30003,30005）进行下一步操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> c_id <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> o_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">30003</span><span class="token punctuation">,</span> <span class="token number">30005</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># final result</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>比较运算符</li></ul><p>查询由天津供应商供应的水果的所有信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> s_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> s1<span class="token punctuation">.</span>s_id <span class="token keyword">FROM</span> suppliers <span class="token keyword">AS</span> s1 <span class="token keyword">WHERE</span> s1<span class="token punctuation">.</span>s_city <span class="token operator">=</span> <span class="token string">'Tianjin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># final result</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> a1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> b1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> c0   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）根据city为天津的条件，查询出供应商的s_id</p><p>（2）根据子查询的s_id查询由该供应商供应的水果</p><p>这里在子查询中涉及到了一次<strong>改名</strong>操作，<strong>改名操作的作用主要两点：1.方便取名 2.防止嵌套或自连接带来的歧义</strong></p><h1 id="Query-MySQL-练习"><a href="#Query-MySQL-练习" class="headerlink" title="Query-MySQL-练习"></a>Query-MySQL-练习</h1><h2 id="练习数据库结构"><a href="#练习数据库结构" class="headerlink" title="练习数据库结构"></a>练习数据库结构</h2><p><b style="color: red;">练习数据库SQL文件</b>👉<a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-22/Query-MySQL-Lianxi">Query-MySQL-Lianxi</a></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">-----------------------+</span><span class="token operator">|</span> Tables_in_query<span class="token operator">-</span>mysql <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------------+</span><span class="token operator">|</span> customers             <span class="token operator">|</span><span class="token operator">|</span> orderitems            <span class="token operator">|</span><span class="token operator">|</span> orders                <span class="token operator">|</span><span class="token operator">|</span> productnotes          <span class="token operator">|</span><span class="token operator">|</span> products              <span class="token operator">|</span><span class="token operator">|</span> vendors               <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来查看一下各个表格的结构：</p><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210322215407.png"></p><ul><li><code>vendors</code>：销售产品供应商</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> vendors<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------+----------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field        <span class="token operator">|</span> <span class="token keyword">Type</span>     <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+----------+------+-----+---------+----------------+</span><span class="token operator">|</span> vend_id      <span class="token operator">|</span> <span class="token keyword">int</span>      <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> vend_name    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> vend_address <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> vend_city    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> vend_state   <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> vend_zip     <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> vend_country <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+----------+------+-----+---------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>customers</code>：顾客</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> customers<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------+-----------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field        <span class="token operator">|</span> <span class="token keyword">Type</span>      <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+-----------+------+-----+---------+----------------+</span><span class="token operator">|</span> cust_id      <span class="token operator">|</span> <span class="token keyword">int</span>       <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> cust_name    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_address <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_city    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_state   <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_zip     <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_country <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_contact <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_email   <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+-----------+------+-----+---------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>products</code>：产品</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> products<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field      <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span class="token operator">|</span> prod_id    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> vend_id    <span class="token operator">|</span> <span class="token keyword">int</span>          <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> prod_name  <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>    <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> prod_price <span class="token operator">|</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> prod_desc  <span class="token operator">|</span> <span class="token keyword">text</span>         <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>orders</code>：顾客订单</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> orders<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+----------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field      <span class="token operator">|</span> <span class="token keyword">Type</span>     <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+----------+------+-----+---------+----------------+</span><span class="token operator">|</span> order_num  <span class="token operator">|</span> <span class="token keyword">int</span>      <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> order_date <span class="token operator">|</span> <span class="token keyword">datetime</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_id    <span class="token operator">|</span> <span class="token keyword">int</span>      <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+----------+------+-----+---------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>orderitems</code>：订单详细信息</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> orderitems<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field      <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span class="token operator">|</span> order_num  <span class="token operator">|</span> <span class="token keyword">int</span>          <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> order_item <span class="token operator">|</span> <span class="token keyword">int</span>          <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> prod_id    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> quantity   <span class="token operator">|</span> <span class="token keyword">int</span>          <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> item_price <span class="token operator">|</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库表数据"><a href="#数据库表数据" class="headerlink" title="数据库表数据"></a>数据库表数据</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># data in vendors</span><span class="token operator">+</span><span class="token comment">---------+----------------+-----------------+-------------+------------+----------+--------------+</span><span class="token operator">|</span> vend_id <span class="token operator">|</span> vend_name      <span class="token operator">|</span> vend_address    <span class="token operator">|</span> vend_city   <span class="token operator">|</span> vend_state <span class="token operator">|</span> vend_zip <span class="token operator">|</span> vend_country <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+----------------+-----------------+-------------+------------+----------+--------------+</span><span class="token operator">|</span>    <span class="token number">1001</span> <span class="token operator">|</span> Anvils R Us    <span class="token operator">|</span> <span class="token number">123</span> Main Street <span class="token operator">|</span> Southfield  <span class="token operator">|</span> MI         <span class="token operator">|</span> <span class="token number">48075</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1002</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> <span class="token number">500</span> Park Street <span class="token operator">|</span> Anytown     <span class="token operator">|</span> OH         <span class="token operator">|</span> <span class="token number">44333</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> <span class="token number">555</span> High Street <span class="token operator">|</span> Los Angeles <span class="token operator">|</span> CA         <span class="token operator">|</span> <span class="token number">90046</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1004</span> <span class="token operator">|</span> Furball Inc<span class="token punctuation">.</span>   <span class="token operator">|</span> <span class="token number">1000</span> <span class="token number">5</span>th Avenue <span class="token operator">|</span> New York    <span class="token operator">|</span> NY         <span class="token operator">|</span> <span class="token number">11111</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1005</span> <span class="token operator">|</span> Jet <span class="token keyword">Set</span>        <span class="token operator">|</span> <span class="token number">42</span> Galaxy Road  <span class="token operator">|</span> London      <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> N16 <span class="token number">6</span>PS  <span class="token operator">|</span> England      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1006</span> <span class="token operator">|</span> Jouets Et Ours <span class="token operator">|</span> <span class="token number">1</span> Rue Amusement <span class="token operator">|</span> Paris       <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token number">45678</span>    <span class="token operator">|</span> France       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+----------------+-----------------+-------------+------------+----------+--------------+</span><span class="token comment"># data in customers</span><span class="token operator">+</span><span class="token comment">---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span><span class="token operator">|</span> cust_id <span class="token operator">|</span> cust_name      <span class="token operator">|</span> cust_address        <span class="token operator">|</span> cust_city <span class="token operator">|</span> cust_state <span class="token operator">|</span> cust_zip <span class="token operator">|</span> cust_country <span class="token operator">|</span> cust_contact <span class="token operator">|</span> cust_email          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span><span class="token operator">|</span>   <span class="token number">10001</span> <span class="token operator">|</span> Coyote Inc<span class="token punctuation">.</span>    <span class="token operator">|</span> <span class="token number">200</span> Maple Lane      <span class="token operator">|</span> Detroit   <span class="token operator">|</span> MI         <span class="token operator">|</span> <span class="token number">44444</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span> Y Lee        <span class="token operator">|</span> ylee<span class="token variable">@coyote.com</span>     <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10002</span> <span class="token operator">|</span> Mouse House    <span class="token operator">|</span> <span class="token number">333</span> Fromage Lane    <span class="token operator">|</span> Columbus  <span class="token operator">|</span> OH         <span class="token operator">|</span> <span class="token number">43333</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span> Jerry Mouse  <span class="token operator">|</span> <span class="token boolean">NULL</span>                <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10003</span> <span class="token operator">|</span> Wascals        <span class="token operator">|</span> <span class="token number">1</span> Sunny Place       <span class="token operator">|</span> Muncie    <span class="token operator">|</span> <span class="token operator">IN</span>         <span class="token operator">|</span> <span class="token number">42222</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span> Jim Jones    <span class="token operator">|</span> rabbit<span class="token variable">@wascally.com</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10004</span> <span class="token operator">|</span> Yosemite Place <span class="token operator">|</span> <span class="token number">829</span> Riverside Drive <span class="token operator">|</span> Phoenix   <span class="token operator">|</span> AZ         <span class="token operator">|</span> <span class="token number">88888</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span> Y Sam        <span class="token operator">|</span> sam<span class="token variable">@yosemite.com</span>    <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10005</span> <span class="token operator">|</span> E Fudd         <span class="token operator">|</span> <span class="token number">4545</span> <span class="token number">53</span>rd Street    <span class="token operator">|</span> Chicago   <span class="token operator">|</span> IL         <span class="token operator">|</span> <span class="token number">54545</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span> E Fudd       <span class="token operator">|</span> <span class="token boolean">NULL</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># data in products</span><span class="token operator">+</span><span class="token comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span><span class="token operator">|</span> prod_id <span class="token operator">|</span> vend_id <span class="token operator">|</span> prod_name      <span class="token operator">|</span> prod_price <span class="token operator">|</span> prod_desc                                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span><span class="token operator">|</span> ANV01   <span class="token operator">|</span>    <span class="token number">1001</span> <span class="token operator">|</span> <span class="token number">.5</span> ton anvil   <span class="token operator">|</span>       <span class="token number">5.99</span> <span class="token operator">|</span> <span class="token number">.5</span> ton anvil<span class="token punctuation">,</span> black<span class="token punctuation">,</span> complete <span class="token keyword">with</span> handy hook                  <span class="token operator">|</span><span class="token operator">|</span> ANV02   <span class="token operator">|</span>    <span class="token number">1001</span> <span class="token operator">|</span> <span class="token number">1</span> ton anvil    <span class="token operator">|</span>       <span class="token number">9.99</span> <span class="token operator">|</span> <span class="token number">1</span> ton anvil<span class="token punctuation">,</span> black<span class="token punctuation">,</span> complete <span class="token keyword">with</span> handy hook <span class="token operator">and</span> carrying <span class="token keyword">case</span> <span class="token operator">|</span><span class="token operator">|</span> ANV03   <span class="token operator">|</span>    <span class="token number">1001</span> <span class="token operator">|</span> <span class="token number">2</span> ton anvil    <span class="token operator">|</span>      <span class="token number">14.99</span> <span class="token operator">|</span> <span class="token number">2</span> ton anvil<span class="token punctuation">,</span> black<span class="token punctuation">,</span> complete <span class="token keyword">with</span> handy hook <span class="token operator">and</span> carrying <span class="token keyword">case</span> <span class="token operator">|</span><span class="token operator">|</span> DTNTR   <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> Detonator      <span class="token operator">|</span>      <span class="token number">13.00</span> <span class="token operator">|</span> Detonator <span class="token punctuation">(</span>plunger powered<span class="token punctuation">)</span><span class="token punctuation">,</span> fuses <span class="token operator">not</span> included                <span class="token operator">|</span><span class="token operator">|</span> FB      <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> Bird seed      <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span> Large bag <span class="token punctuation">(</span>suitable <span class="token keyword">for</span> road runners<span class="token punctuation">)</span>                          <span class="token operator">|</span><span class="token operator">|</span> FC      <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> Carrots        <span class="token operator">|</span>       <span class="token number">2.50</span> <span class="token operator">|</span> Carrots <span class="token punctuation">(</span>rabbit hunting season only<span class="token punctuation">)</span>                           <span class="token operator">|</span><span class="token operator">|</span> FU1     <span class="token operator">|</span>    <span class="token number">1002</span> <span class="token operator">|</span> Fuses          <span class="token operator">|</span>       <span class="token number">3.42</span> <span class="token operator">|</span> <span class="token number">1</span> dozen<span class="token punctuation">,</span> extra long                                            <span class="token operator">|</span><span class="token operator">|</span> JP1000  <span class="token operator">|</span>    <span class="token number">1005</span> <span class="token operator">|</span> JetPack <span class="token number">1000</span>   <span class="token operator">|</span>      <span class="token number">35.00</span> <span class="token operator">|</span> JetPack <span class="token number">1000</span><span class="token punctuation">,</span> intended <span class="token keyword">for</span> single <span class="token keyword">use</span>                          <span class="token operator">|</span><span class="token operator">|</span> JP2000  <span class="token operator">|</span>    <span class="token number">1005</span> <span class="token operator">|</span> JetPack <span class="token number">2000</span>   <span class="token operator">|</span>      <span class="token number">55.00</span> <span class="token operator">|</span> JetPack <span class="token number">2000</span><span class="token punctuation">,</span> multi<span class="token operator">-</span><span class="token keyword">use</span>                                        <span class="token operator">|</span><span class="token operator">|</span> OL1     <span class="token operator">|</span>    <span class="token number">1002</span> <span class="token operator">|</span> Oil can        <span class="token operator">|</span>       <span class="token number">8.99</span> <span class="token operator">|</span> Oil can<span class="token punctuation">,</span> red                                                   <span class="token operator">|</span><span class="token operator">|</span> SAFE    <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> Safe           <span class="token operator">|</span>      <span class="token number">50.00</span> <span class="token operator">|</span> Safe <span class="token keyword">with</span> combination <span class="token keyword">lock</span>                                     <span class="token operator">|</span><span class="token operator">|</span> SLING   <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> Sling          <span class="token operator">|</span>       <span class="token number">4.49</span> <span class="token operator">|</span> Sling<span class="token punctuation">,</span> one size fits <span class="token keyword">all</span>                                       <span class="token operator">|</span><span class="token operator">|</span> TNT1    <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> TNT <span class="token punctuation">(</span><span class="token number">1</span> stick<span class="token punctuation">)</span>  <span class="token operator">|</span>       <span class="token number">2.50</span> <span class="token operator">|</span> TNT<span class="token punctuation">,</span> red<span class="token punctuation">,</span> single stick                                         <span class="token operator">|</span><span class="token operator">|</span> TNT2    <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> TNT <span class="token punctuation">(</span><span class="token number">5</span> sticks<span class="token punctuation">)</span> <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span> TNT<span class="token punctuation">,</span> red<span class="token punctuation">,</span> pack <span class="token keyword">of</span> <span class="token number">10</span> sticks                                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span><span class="token comment"># data in orders</span><span class="token operator">+</span><span class="token comment">-----------+---------------------+---------+</span><span class="token operator">|</span> order_num <span class="token operator">|</span> order_date          <span class="token operator">|</span> cust_id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------+---------------------+---------+</span><span class="token operator">|</span>     <span class="token number">20005</span> <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>   <span class="token number">10001</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20006</span> <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>   <span class="token number">10003</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20007</span> <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>   <span class="token number">10004</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20008</span> <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>   <span class="token number">10005</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20009</span> <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>   <span class="token number">10001</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------+---------------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># data in orderitems</span><span class="token operator">+</span><span class="token comment">-----------+------------+---------+----------+------------+</span><span class="token operator">|</span> order_num <span class="token operator">|</span> order_item <span class="token operator">|</span> prod_id <span class="token operator">|</span> quantity <span class="token operator">|</span> item_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------+------------+---------+----------+------------+</span><span class="token operator">|</span>     <span class="token number">20005</span> <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> ANV01   <span class="token operator">|</span>       <span class="token number">10</span> <span class="token operator">|</span>       <span class="token number">5.99</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20005</span> <span class="token operator">|</span>          <span class="token number">2</span> <span class="token operator">|</span> ANV02   <span class="token operator">|</span>        <span class="token number">3</span> <span class="token operator">|</span>       <span class="token number">9.99</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20005</span> <span class="token operator">|</span>          <span class="token number">3</span> <span class="token operator">|</span> TNT2    <span class="token operator">|</span>        <span class="token number">5</span> <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20005</span> <span class="token operator">|</span>          <span class="token number">4</span> <span class="token operator">|</span> FB      <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20006</span> <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> JP2000  <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">55.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20007</span> <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> TNT2    <span class="token operator">|</span>      <span class="token number">100</span> <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20008</span> <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> FC      <span class="token operator">|</span>       <span class="token number">50</span> <span class="token operator">|</span>       <span class="token number">2.50</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20009</span> <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> FB      <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20009</span> <span class="token operator">|</span>          <span class="token number">2</span> <span class="token operator">|</span> OL1     <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>       <span class="token number">8.99</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20009</span> <span class="token operator">|</span>          <span class="token number">3</span> <span class="token operator">|</span> SLING   <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>       <span class="token number">4.49</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20009</span> <span class="token operator">|</span>          <span class="token number">4</span> <span class="token operator">|</span> ANV03   <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">14.99</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------+------------+---------+----------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># data in productnotes</span><span class="token operator">+</span><span class="token comment">---------+---------+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> note_id <span class="token operator">|</span> prod_id <span class="token operator">|</span> note_date           <span class="token operator">|</span> note_text                                                                                                                                                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span>     <span class="token number">101</span> <span class="token operator">|</span> TNT2    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">17</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Customer complaint:Sticks <span class="token operator">not</span> individually wrapped<span class="token punctuation">,</span> too easy <span class="token keyword">to</span> mistakenly detonate <span class="token keyword">all</span> at once<span class="token punctuation">.</span>Recommend individual wrapping<span class="token punctuation">.</span>                             <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">102</span> <span class="token operator">|</span> OL1     <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Can shipped <span class="token keyword">full</span><span class="token punctuation">,</span> refills <span class="token operator">not</span> available<span class="token punctuation">.</span>Need <span class="token keyword">to</span> <span class="token keyword">order</span> new can <span class="token keyword">if</span> refill needed<span class="token punctuation">.</span>                                                                            <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">103</span> <span class="token operator">|</span> SAFE    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Safe <span class="token operator">is</span> combination locked<span class="token punctuation">,</span> combination <span class="token operator">not</span> provided <span class="token keyword">with</span> safe<span class="token punctuation">.</span>This <span class="token operator">is</span> rarely a problem <span class="token keyword">as</span> safes are typically blown up <span class="token operator">or</span> dropped <span class="token keyword">by</span> customers<span class="token punctuation">.</span>           <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">104</span> <span class="token operator">|</span> FC      <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">19</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Quantity varies<span class="token punctuation">,</span> sold <span class="token keyword">by</span> the sack <span class="token keyword">load</span><span class="token punctuation">.</span><span class="token keyword">All</span> guaranteed <span class="token keyword">to</span> be bright <span class="token operator">and</span> orange<span class="token punctuation">,</span> <span class="token operator">and</span> suitable <span class="token keyword">for</span> <span class="token keyword">use</span> <span class="token keyword">as</span> rabbit bait<span class="token punctuation">.</span>                                        <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">105</span> <span class="token operator">|</span> TNT2    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Included fuses are short <span class="token operator">and</span> have been known <span class="token keyword">to</span> detonate too quickly <span class="token keyword">for</span> <span class="token keyword">some</span> customers<span class="token punctuation">.</span>Longer fuses are available <span class="token punctuation">(</span>item FU1<span class="token punctuation">)</span> <span class="token operator">and</span> should be recommended<span class="token punctuation">.</span>   <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">106</span> <span class="token operator">|</span> TNT2    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Matches <span class="token operator">not</span> included<span class="token punctuation">,</span> recommend purchase <span class="token keyword">of</span> matches <span class="token operator">or</span> detonator <span class="token punctuation">(</span>item DTNTR<span class="token punctuation">)</span><span class="token punctuation">.</span>                                                                             <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">107</span> <span class="token operator">|</span> SAFE    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Please note that <span class="token keyword">no</span> <span class="token keyword">returns</span> will be accepted <span class="token keyword">if</span> safe opened <span class="token keyword">using</span> explosives<span class="token punctuation">.</span>                                                                              <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">108</span> <span class="token operator">|</span> ANV01   <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Multiple customer <span class="token keyword">returns</span><span class="token punctuation">,</span> anvils failing <span class="token keyword">to</span> <span class="token keyword">drop</span> fast enough <span class="token operator">or</span> falling backwards <span class="token keyword">on</span> purchaser<span class="token punctuation">.</span> Recommend that customer considers <span class="token keyword">using</span> heavier anvils<span class="token punctuation">.</span>   <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">109</span> <span class="token operator">|</span> ANV03   <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Item <span class="token operator">is</span> extremely heavy<span class="token punctuation">.</span> Designed <span class="token keyword">for</span> dropping<span class="token punctuation">,</span> <span class="token operator">not</span> recommended <span class="token keyword">for</span> <span class="token keyword">use</span> <span class="token keyword">with</span> slings<span class="token punctuation">,</span> ropes<span class="token punctuation">,</span> pulleys<span class="token punctuation">,</span> <span class="token operator">or</span> tightropes<span class="token punctuation">.</span>                                        <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">110</span> <span class="token operator">|</span> FC      <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Customer complaint: rabbit has been able <span class="token keyword">to</span> detect trap<span class="token punctuation">,</span> food apparently less effective now<span class="token punctuation">.</span>                                                               <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">111</span> <span class="token operator">|</span> SLING   <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Shipped unassembled<span class="token punctuation">,</span> requires common tools <span class="token punctuation">(</span>including oversized hammer<span class="token punctuation">)</span><span class="token punctuation">.</span>                                                                                   <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">112</span> <span class="token operator">|</span> SAFE    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Customer complaint:Circular hole <span class="token operator">in</span> safe floor can apparently be easily cut <span class="token keyword">with</span> handsaw<span class="token punctuation">.</span>                                                                  <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">113</span> <span class="token operator">|</span> ANV01   <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Customer complaint:<span class="token operator">Not</span> heavy enough <span class="token keyword">to</span> generate flying stars around head <span class="token keyword">of</span> victim<span class="token punctuation">.</span> <span class="token keyword">If</span> being purchased <span class="token keyword">for</span> dropping<span class="token punctuation">,</span> recommend ANV02 <span class="token operator">or</span> ANV03 instead<span class="token punctuation">.</span>     <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">114</span> <span class="token operator">|</span> SAFE    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token keyword">Call</span> <span class="token keyword">from</span> individual trapped <span class="token operator">in</span> safe plummeting <span class="token keyword">to</span> the ground<span class="token punctuation">,</span> suggests an <span class="token keyword">escape</span> hatch be added<span class="token punctuation">.</span><span class="token keyword">Comment</span> forwarded <span class="token keyword">to</span> vendor<span class="token punctuation">.</span>                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单SQL"><a href="#简单SQL" class="headerlink" title="简单SQL"></a>简单SQL</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 检索单个列</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token comment"># 检索多个列</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span>prod_price<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token comment"># 检索全部列*|lists</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token comment"># 检索不同的元组 DISTINCT</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> vend_id<span class="token keyword">FROM</span> vendors<span class="token punctuation">;</span><span class="token comment"># LIMIT限定查询结果的行数</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment"># limit offset counts 指定位置、指定数量（对于行数不够的，就不显示）</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment"># 全限定名</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> query<span class="token operator">-</span>mysql<span class="token punctuation">.</span>products <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>排序</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 对单列排序</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span class="token comment"># 多列排序 （前面相同时，比较后面，以此类推）</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price<span class="token punctuation">,</span> prod_name<span class="token comment"># ASC|DESC 定义排序方向（默认ASC）</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price <span class="token keyword">DESC</span><span class="token punctuation">,</span> prod_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数据过滤</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># WHERE的比较操作符</span><span class="token comment">## = 找出商品名为fuses产品</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">=</span> <span class="token string">'fuses'</span><span class="token punctuation">;</span><span class="token comment">## &lt;=找出价格低于10美元的所有产品</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">## BETWEEB AND 范围检查</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_price <span class="token operator">BETWEEN</span> <span class="token number">5</span> <span class="token operator">AND</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment"># NULL检查</span><span class="token keyword">SELECT</span> cust_id<span class="token keyword">FROM</span> customers<span class="token keyword">WHERE</span> cust_email <span class="token operator">is</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>带有连接词的数据过滤</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># AND 由供应商1003提供的产品且价格不超过10美元的产品信息</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span> <span class="token operator">AND</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment"># OR 由供应商1002和1003提供的产品的信息</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token number">1002</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span><span class="token punctuation">;</span><span class="token comment"># AND 和 OR 的执行优先级（and优先）</span><span class="token comment">## 因为优先级问题 下面两个select语句执行结果不一致！正确语义是下面</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token number">1002</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span> <span class="token operator">AND</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>vend_id <span class="token operator">=</span> <span class="token number">1002</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span><span class="token punctuation">)</span> <span class="token operator">AND</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment"># IN(values) in通过匹配括号中的值 返回true|false。下面两句等价</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token number">1002</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># NOT 的全否定功能</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LIKE匹配</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 找出所有以jet开头的产品(%任意长度的字符串)</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">'jet%'</span><span class="token punctuation">;</span><span class="token comment"># 找出以_ ton anvil（_任意一个字符）</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">'_ ton anvil'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>正则表达式</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 二者都会匹配，但是LIKE不会返回结果，REGEXP返回结果</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">'1000'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'1000'</span><span class="token punctuation">;</span><span class="token comment"># 如果需要实现正则表达式忽略大小写 BINARY</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token keyword">BINARY</span> <span class="token string">'JetPack'</span><span class="token punctuation">;</span><span class="token comment"># 正则表达式中的OR</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'1000|2000'</span><span class="token punctuation">;</span><span class="token comment"># 匹配几个字符之一(下面二者等价)</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[1,2,3] ton'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[1|2|3] ton'</span><span class="token punctuation">;</span>  <span class="token comment"># 这里必须有[]，否则出错</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'1|2|3 ton'</span><span class="token punctuation">;</span> <span class="token comment">#这里匹配的是： 1 ，2 ，3 ton</span><span class="token comment"># 范围查询（下面两者等价）</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[0123456789] ton'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[0-9] ton'</span><span class="token punctuation">;</span><span class="token comment"># 匹配特殊字符 （可以使用\\转义特殊字符）</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'.'</span><span class="token punctuation">;</span><span class="token comment"># 重复元字符（* ? + {n} {n,} {n,m}(m&lt;=255)）</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'\\([0-9] sticks?\\)'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[[:digit:]]{4}'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字段操作</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> concat<span class="token punctuation">(</span>vend_name<span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span>vend_country<span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> vendors<span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">,</span>   <span class="token punctuation">(</span>quantity<span class="token operator">*</span>item_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> expanded_price<span class="token keyword">FROM</span> orderitems<span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数处理</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 大写处理</span><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> Upper<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span> <span class="token keyword">AS</span> vend_name_upcase<span class="token keyword">FROM</span> vendors<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span><span class="token comment"># 时间处理</span><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> order_num<span class="token keyword">FROM</span> orders<span class="token keyword">WHERE</span> <span class="token keyword">Date</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'2005-09-01'</span><span class="token punctuation">;</span><span class="token comment"># 五个aggregate functions</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_price<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> number_cust<span class="token keyword">FROM</span> customers<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_email<span class="token punctuation">)</span> <span class="token keyword">AS</span> number_cust<span class="token keyword">FROM</span> customers<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_price<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> min_price<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> items_ordered<span class="token keyword">FROM</span> orderitems<span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>聚集函数</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> items_quantity<span class="token punctuation">,</span>   <span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_max<span class="token punctuation">,</span>   <span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_min<span class="token punctuation">,</span>   <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_avg<span class="token punctuation">,</span>   <span class="token function">SUM</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_total<span class="token keyword">FROM</span> products<span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>相关子查询</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_name   <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>        <span class="token keyword">FROM</span> orders        <span class="token keyword">WHERE</span> orders<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> customers<span class="token punctuation">.</span>cust_id       <span class="token punctuation">)</span> <span class="token keyword">AS</span> orders<span class="token keyword">FROM</span> customers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu-20.10</title>
      <link href="2021/03/20/os-2/"/>
      <url>2021/03/20/os-2/</url>
      
        <content type="html"><![CDATA[<h1 id="如何用Linux"><a href="#如何用Linux" class="headerlink" title="如何用Linux"></a>如何用Linux</h1><h2 id="下载Ubuntu镜像"><a href="#下载Ubuntu镜像" class="headerlink" title="下载Ubuntu镜像"></a>下载Ubuntu镜像</h2><p>👉<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像网站</a></p><p>👉<a href="http://mirrors.ustc.edu.cn/">中国科学技术大学开源镜像网站</a></p><p>👉<a href="https://ubuntu.com/">Ubuntu官方</a></p><h2 id="下载vm"><a href="#下载vm" class="headerlink" title="下载vm"></a>下载vm</h2><p><a href="https://www.virtualbox.org/">Oracle vm virtualBox</a></p><h2 id="创建Linux虚拟机"><a href="#创建Linux虚拟机" class="headerlink" title="创建Linux虚拟机"></a>创建Linux虚拟机</h2>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList&lt;E&gt;底层原理</title>
      <link href="2021/03/19/CoreJava-6/"/>
      <url>2021/03/19/CoreJava-6/</url>
      
        <content type="html"><![CDATA[<h1 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h1><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210319151231.jpg" style="zoom:50%;"><h1 id="LinkedList-lt-E-gt-底层结构"><a href="#LinkedList-lt-E-gt-底层结构" class="headerlink" title="LinkedList<E>底层结构"></a>LinkedList&lt;E&gt;底层结构</h1><p><code>LinkedList&lt;E&gt;</code>作为一种链表型的列表，底层的数据结构当然就是链表，具体到内部类：结点<code>Node&lt;E&gt;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> item<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> item<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了基本的内部节点<code>Node</code>之外，还存在三个不可序列化的变量：<code>first（头结点）</code>、<code>last（尾结点）</code>、<code>size</code></p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<table><tbody><tr><td style="background-color:white">prev == null</td><td style="background-color:silver">first.item</td>        <td style="background-color:gray">next != null</td></tr></tbody></table><table>    <tbody><tr>        <td style="background-color:gray">prev != null</td>        <td style="background-color:silver">last.item&nbsp;</td>        <td style="background-color:white">next == null</td>    </tr></tbody></table><h1 id="✈️List-lt-E-gt"><a href="#✈️List-lt-E-gt" class="headerlink" title="✈️List<E>"></a>✈️List&lt;E&gt;</h1><h2 id="List-lt-E-gt-接口"><a href="#List-lt-E-gt-接口" class="headerlink" title="List<E>接口"></a>List&lt;E&gt;接口</h2><p><code>LinkedList&lt;E&gt;</code>作为一种链表型的列表，首先就有着列表的相关概念，也就是<code>List&lt;E&gt;</code>接口中的方法。</p><p><span class="github-emoji"><span>👀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>我们先看一下<code>List&lt;E&gt;</code>自己在<code>Collection&lt;E&gt;</code>接口之上增加的方法 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LinkedList直接继承AbstractList的实现</span>    <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LinkedList直接继承AbstractList的实现</span>    <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>👀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>我们再看一下<code>List&lt;E&gt;</code>自己自己增加的 <strong>default-method</strong> 以及覆盖<code>Collection&lt;E&gt;</code>的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> li <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            li<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>operator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> e <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">default</span> <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Spliterators</span><span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">Spliterator</span><span class="token punctuation">.</span>ORDERED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LinkedList实现"><a href="#LinkedList实现" class="headerlink" title="LinkedList实现"></a>LinkedList实现</h2><h3 id="获取器和更改器"><a href="#获取器和更改器" class="headerlink" title="获取器和更改器"></a>获取器和更改器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> oldVal <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    x<span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>get</code>与<code>set</code>辅助操作方法<span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// assert isElementIndex(index);  为了保证索引的正确性</span>    <span class="token comment">// 二分查找，判断索引属于前半段还是后半段，然后采取链表的顺序遍历得到对应位置的元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>add(int,E)</code>的辅助操作 </p><p>👉<strong>尾插</strong></p><table>    <tbody><tr>        <td style="background-color:gray">prev == last</td>        <td style="background-color:silver">add.item&nbsp;</td>        <td style="background-color:white">next == null</td>    </tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token comment">// 这里的if-else是为了防止链表为空的情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>👉<strong>中间任意位置元素之前插入</strong></p><table>    <tbody><tr>        <td style="background-color:gray">prev == succ.prev</td>        <td style="background-color:silver">&nbsp;&nbsp;&nbsp;&nbsp;add.item&nbsp;</td>        <td style="background-color:white">next == succ</td>    </tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// assert succ != null;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>    succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>remove(int)</code>的辅助操作</p><p>👉<strong>去除特定的结点</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 此方法会清空结点的内容，让结点脱离于链表，但是指向该结点的引用依旧存在，没有null处理</span><span class="token class-name">E</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// assert x != null;</span>    <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token comment">// 查看要删除的x前驱结点是否为first</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 查看要删除的x后继结点是否为last</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 进行x存储内容的删除，以及链表长度的调整</span>    x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    size<span class="token operator">--</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>这里就是简单的一个顺序遍历链表得到所查元素o在链表的位置，采取覆盖父类<code>AbstractList&lt;E&gt;</code>的方法，因为在<code>AbstractList&lt;E&gt;</code>中这两种索取元素位置的方式，都是依靠于<code>ListItreator</code>迭代器！</p><p>（左 -&gt; 右）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（左 &lt;- 右）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="🔗添加集合"><a href="#🔗添加集合" class="headerlink" title="🔗添加集合"></a>🔗添加集合</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numNew <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> pred<span class="token punctuation">,</span> succ<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        succ <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        pred <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        succ <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> <span class="token class-name">E</span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        pred <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>succ <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        last <span class="token operator">=</span> pred<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> succ<span class="token punctuation">;</span>        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="⚡迭代器"><a href="#⚡迭代器" class="headerlink" title="⚡迭代器"></a>⚡迭代器</h1><h2 id="✏️ListItreator"><a href="#✏️ListItreator" class="headerlink" title="✏️ListItreator"></a>✏️ListItreator</h2><table><thead><tr><th align="left">ListItreator&lt;E&gt;</th></tr></thead><tbody><tr><td align="left"><strong>boolean hasNext()</strong></td></tr><tr><td align="left"><strong>E next()</strong></td></tr><tr><td align="left"><strong>boolean hasPrevious()</strong></td></tr><tr><td align="left"><strong>E previous()</strong></td></tr><tr><td align="left"><strong>int nextIndex()</strong></td></tr><tr><td align="left"><strong>int previousIndex()</strong></td></tr><tr><td align="left"><strong>void remove()</strong></td></tr><tr><td align="left"><strong>void set(E e)</strong></td></tr><tr><td align="left"><strong>void add(E e)</strong></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> lastReturned<span class="token punctuation">;</span>           <span class="token comment">// 上次返回的结点</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>                   <span class="token comment">// 下一次将迭代访问的结点</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> nextIndex<span class="token punctuation">;</span>                  <span class="token comment">// 下一次将迭代访问的结点的位置</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span><span class="token comment">// 集合修改次数</span>    <span class="token comment">// 构造起始位置为index的迭代器指针引用</span>    <span class="token class-name">ListItr</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// assert isPositionIndex(index);</span>        next <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        nextIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// next方法的第一个元素是迭代器起点元素 比如listIterator(3) : 就是link[3]</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 保留跨越元素，再跨越元素</span>        lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>        next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextIndex <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// previous的第一个元素是迭代器起点元素的前一个元素 比如listIterator(3) : 就是link[2]</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastReturned <span class="token operator">=</span> next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> last <span class="token operator">:</span> next<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextIndex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> lastNext <span class="token operator">=</span> lastReturned<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span>lastReturned<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> lastReturned<span class="token punctuation">)</span>            next <span class="token operator">=</span> lastNext<span class="token punctuation">;</span>        <span class="token keyword">else</span>            nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>        lastReturned <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastReturned<span class="token punctuation">.</span>item <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastReturned <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">linkBefore</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>        expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>modCount <span class="token operator">==</span> expectedModCount <span class="token operator">&amp;&amp;</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java集合接口中的迭代器可视为：位于两个元素之间的位置。每次遍历指针在跨过元素之前都将保留元素，再跨过</p><p>这里关于<code>previous()</code>和<code>next()</code>方法的起点元素(注释中已经解释) </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartIndex</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// index {0,1,2,3,4,5}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// console: 3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// console: 2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>listIterator方法</code>参数index范围可以在[0,size]，是因为索引校验机制采取的<code>isPositionIndex</code></p><p>而获取器和更改器方法参数index范围只能在[0,size-1]，是因为索引校验机制采取的<code>isElementIndex</code></p><p>在<code>ListIterator</code>中存在一个同于的删除方法<code>remove</code>。为了平衡<code>previous</code>和<code>next</code>起始元素的不同，这里在remove里面加入了一个判断语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>next <span class="token operator">==</span> lastReturned<span class="token punctuation">)</span> <span class="token punctuation">{</span>    next <span class="token operator">=</span> lastNext<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    nextIndex<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>if</code>条件满足时，表示此时调用的是<code>previous</code>。当<code>else</code>条件满足时，表示调用的是<code>next</code>。</p><h1 id="✈️Deque-lt-E-gt"><a href="#✈️Deque-lt-E-gt" class="headerlink" title="✈️Deque<E>"></a>✈️Deque&lt;E&gt;</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自拓展双向队列方法</span><span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">offerFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">removeFirstOccurrence</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">removeLastOccurrence</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// *** Queue methods ***</span><span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 堆栈和队列的共性操作</span><span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// *** Stack methods ***</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// *** Collection methods ***</span><span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义降序迭代器</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">descendingIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从继承体系看出，在实现<code>Deque&lt;E&gt;</code>接口中，主要是以队列和堆栈以及特定的降序迭代器！</p><p>此接口扩展了 <code>Queue</code> 接口。</p><p><b style="color:hotpink">在将双端队列用作队列时</b>，将得到  FIFO（先进先出）行为。将元素添加到双端队列的末尾，从双端队列的开头移除元素。从 <code>Queue</code> 接口继承的方法完全等效于  <code>Deque</code> 方法，如下表所示： </p><table><thead><tr><th><strong><code>Queue</code> 方法</strong></th><th><strong>等效 <code>Deque</code> 方法</strong></th></tr></thead><tbody><tr><td><code>add(e)</code></td><td><code>addLast(e)</code></td></tr><tr><td><code>offer(e)</code></td><td><code>offerLast(e)</code></td></tr><tr><td><code>remove()</code></td><td><code>removeFirst()</code></td></tr><tr><td><code>poll()</code></td><td><code>pollFirst()</code></td></tr><tr><td><code>element()</code></td><td><code>getFirst()</code></td></tr><tr><td><code>peek()</code></td><td><code>peekFirst()</code></td></tr></tbody></table><p><b style="color:hotpink">双端队列作 LIFO（后进先出）堆栈时</b>。应优先使用此接口而不是遗留 <code>Stack</code> 类。在将双端队列用作堆栈时，元素被推入双端队列的开头并从双端队列开头弹出。堆栈方法完全等效于 <code>Deque</code> 方法，如下表所示： </p><table><thead><tr><th><strong>堆栈方法</strong></th><th><strong>等效 <code>Deque</code> 方法</strong></th></tr></thead><tbody><tr><td><code>push(e)</code></td><td><code>addFirst(e)</code></td></tr><tr><td><code>pop()</code></td><td><code>removeFirst()</code></td></tr><tr><td><code>peek()</code></td><td><code>peekFirst()</code>)</td></tr></tbody></table><p>注意，在将双端队列用作队列或堆栈时，<code>peek</code>  方法同样正常工作；无论哪种情况下，都从双端队列的开头抽取元素</p><h2 id="堆栈操作"><a href="#堆栈操作" class="headerlink" title="堆栈操作"></a>堆栈操作</h2><h3 id="压入栈顶"><a href="#压入栈顶" class="headerlink" title="压入栈顶"></a>压入栈顶</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// push与addFirst等价性</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token comment">// 这里判断主要是为了防止空表的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="弹出栈顶"><a href="#弹出栈顶" class="headerlink" title="弹出栈顶"></a>弹出栈顶</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// pop与removeFirst等价性</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// assert f == first &amp;&amp; f != null;</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取栈顶元素"><a href="#获取栈顶元素" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单向队列"><a href="#单向队列" class="headerlink" title="单向队列"></a>单向队列</h2><h3 id="队尾添加"><a href="#队尾添加" class="headerlink" title="队尾添加"></a>队尾添加</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// add与addfirst等价性在于都调用了linkLast</span>        <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">else</span>                l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关系代数</title>
      <link href="2021/03/19/db-2/"/>
      <url>2021/03/19/db-2/</url>
      
        <content type="html"><![CDATA[<h1 id="示例表"><a href="#示例表" class="headerlink" title="示例表"></a>示例表</h1>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 关系模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代操作系统</title>
      <link href="2021/03/19/os-1/"/>
      <url>2021/03/19/os-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDL DML for MySQL</title>
      <link href="2021/03/19/db-1/"/>
      <url>2021/03/19/db-1/</url>
      
        <content type="html"><![CDATA[<h1 id="SCT数据库"><a href="#SCT数据库" class="headerlink" title="SCT数据库"></a>SCT数据库</h1><p>这里以学生选课数据库<code>SCT-DB</code></p><p><code>student{ Sid char(8), Sname char(10), Ssex char(2), Sage int, Did char(2), Sclass char(6) }</code></p><table><thead><tr><th>sid</th><th>Sname</th><th>Ssex</th><th>Sage</th><th>Did</th><th>Sclass</th></tr></thead><tbody><tr><td>98030101</td><td>JB</td><td>男</td><td>20</td><td>03</td><td>980301</td></tr><tr><td>98030102</td><td>MS</td><td>女</td><td>20</td><td>03</td><td>980301</td></tr><tr><td>98030103</td><td>HW</td><td>男</td><td>19</td><td>03</td><td>980301</td></tr><tr><td>98040201</td><td>ali</td><td>男</td><td>20</td><td>04</td><td>980402</td></tr><tr><td>98040202</td><td>JD</td><td>男</td><td>21</td><td>04</td><td>980402</td></tr><tr><td>98040203</td><td>IBM</td><td>女</td><td>19</td><td>04</td><td>980402</td></tr></tbody></table><p><code>dept{ Did char(2), Dname char(10), Dean char(10) }</code></p><table><thead><tr><th>Did</th><th>Dname</th><th>Dean</th></tr></thead><tbody><tr><td>01</td><td>机电</td><td>baidu</td></tr><tr><td>02</td><td>能源</td><td>apple</td></tr><tr><td>03</td><td>计算机</td><td>google</td></tr><tr><td>04</td><td>自动控制</td><td>bytedance</td></tr></tbody></table><p><code>course{ Cid char(3), Cname char(12), Chours int, Credit float(1), Tid char(3) }</code></p><table><thead><tr><th>Cid</th><th>Cname</th><th>Chours</th><th>Credit</th><th>Tid</th></tr></thead><tbody><tr><td>001</td><td>数据库</td><td>40</td><td>6</td><td>001</td></tr><tr><td>003</td><td>数据结构</td><td>40</td><td>6</td><td>003</td></tr><tr><td>004</td><td>编译原理</td><td>40</td><td>6</td><td>001</td></tr><tr><td>005</td><td>C语言</td><td>30</td><td>4.5</td><td>003</td></tr><tr><td>002</td><td>高等数学</td><td>80</td><td>12</td><td>004</td></tr></tbody></table><p><code>teacher{ Tid char(3), Tname char(10), Did char(2), Salary float(2) }</code></p><table><thead><tr><th>Tid</th><th>Tname</th><th>Did</th><th>Salary</th></tr></thead><tbody><tr><td>001</td><td>JetBrains</td><td>01</td><td>1200.00</td></tr><tr><td>002</td><td>MicroSoft</td><td>02</td><td>1400.00</td></tr><tr><td>003</td><td>HUAWEI</td><td>03</td><td>1000.00</td></tr><tr><td>004</td><td>Alibaba</td><td>04</td><td>1100.00</td></tr></tbody></table><p><code>sc{ Sid char(8), Cid char(3), Score float(1) }</code></p><table><thead><tr><th>Sid</th><th>Cid</th><th>Score</th></tr></thead><tbody><tr><td>98030101</td><td>001</td><td>92</td></tr><tr><td>98030101</td><td>002</td><td>85</td></tr><tr><td>98030101</td><td>003</td><td>88</td></tr><tr><td>98040202</td><td>002</td><td>90</td></tr><tr><td>98040202</td><td>003</td><td>80</td></tr><tr><td>98040202</td><td>001</td><td>55</td></tr><tr><td>98040203</td><td>003</td><td>56</td></tr><tr><td>98030102</td><td>001</td><td>54</td></tr><tr><td>98030102</td><td>002</td><td>85</td></tr><tr><td>98030102</td><td>003</td><td>48</td></tr></tbody></table><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><h2 id="创建SCT数据库"><a href="#创建SCT数据库" class="headerlink" title="创建SCT数据库"></a>创建SCT数据库</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database SCT;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建关系表"><a href="#创建关系表" class="headerlink" title="创建关系表"></a>创建关系表</h2><p><code>student{ Sid char(8), Sname char(10), Ssex char(2), Sage int, Did char(2), Sclass char(6) }</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table student(    Sid char(8),    Sname char(10),    Ssex char(2),    Sage int,    Did char(2),    Sclass char(6))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>dept{ Did char(2), Dname char(10), Dean char(10) }</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table dept(    Did char(2),    Dname char(10),    Dean char(10))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>course{ Cid char(3), Cname char(12), Chours int, Credit float(1), Tid char(3) }</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table course(    Cid char(3),    Cname char(12),    Chours int,    Credit float(1),    Tid char(3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>teacher{ Tid char(3), Tname char(10), Did char(2), Salary float(2) }</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table teacher(    Tid char(3),    Tname char(10),    Did char(2),    Salary float(2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sc{ Sid char(8), Cid char(3), Score float(1) }</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table sc(    Sid char(8),    Cid char(3),    Score float(1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入关系表数据"><a href="#插入关系表数据" class="headerlink" title="插入关系表数据"></a>插入关系表数据</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># studentinsert into SCT.student(Sid, Sname, Ssex, Sage, Did, Sclass) values('98030101','JB','男',20,'03','980301'),('98030101','JB','男',20,'03','980301'),('98030103','HW','男',19,'03','980301'),('98040201','ali','男',20,'04','980402'),('98040202','JD','男',21,'04','980402'),('98040203','IBM','女',19,'04','980402');# deptinsert into SCT.dept(Did, Dname, Dean) values('01','机电','baidu'),('02','能源','apple'),('03','计算机','google'),('04','自动控制','bytedance');# courseinsert into SCT.course(Cid, Cname, Chours, Credit, Tid) values('001','数据库',40,6,'001'),('003','数据结构',40,6,'003'),('004','编译原理',40,6,'001'),('005','C语言',30,4.5,'003'),('002','高等数学',80,12,'004');# teacherinsert into SCT.teacher(Tid, Tname, Did, Salary) values('001','JetBrains','01',1200.00),('002','MicroSoft','02',1400.00),('003','HUAWEI','03',1000.00),('004','Alibaba','04',1100.00);# scinsert into SCT.sc(Sid, Cid, Score) values('98030101','001',92),('98030101','002',85),('98030101','003',88),('98040202','002',90),('98040202','003',80),('98040202','001',55),('98040203','003',56),('98030102','001',54),('98030102','002',85),('98030102','003',48);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DDL源码"><a href="#DDL源码" class="headerlink" title="DDL源码"></a>DDL源码</h2><p>👉<a href="https://gitee.com/matemaster/master-depository/blob/master/2021-03-21/SCT.sql">SCT.sql</a></p><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><p><b style="color: yellowgreen;">关于MySQL-select语句的使用，但是不介绍</b><br><b style="color: yellowgreen;">这里先简单浏览一下，完整版本的<code>MySQL-select</code>系列语句结构！</b></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select (select_list)[into new_tb_name]from (tb_name|view_name)[where condition][group by expression][having search_condition][order by expression [desc|asc]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他DML"><a href="#其他DML" class="headerlink" title="其他DML"></a>其他DML</h2><p>（1）insert语句可以参考源码中的数据插入！</p><p>这里演示一下向表中加入一个select检索结果（加入成绩及格的同学）：<code>insert -&gt; select</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 先创建newsc关系表insert into SCT.newsc(Sid, Cid, Score)select Sid, Cid, Scorefrom SCwhere (Score &gt;= 60)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）根据where子句的条件，删除符合要求的元素（去除成绩不及格的同学记录）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete from scwhere (Score &lt; 60)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（3）update更新指定属性列的值（提高计算机教师的工资（1.5倍））</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update teacherset Salary = Salary(1+0.5)where Did in select Didfrom deptWhere (Dname = '计算机')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery主题中文参考文档</title>
      <link href="2021/03/18/theme-use/"/>
      <url>2021/03/18/theme-use/</url>
      
        <content type="html"><![CDATA[<h1 id="Matery主题"><a href="#Matery主题" class="headerlink" title="Matery主题"></a>Matery主题</h1><p><a href="README.md">🇺🇸English Document</a> | <a href="http://blinkfox.com/">国内访问示例 (http://blinkfox.com)</a> | <a href="https://blinkfox.github.io/">Github 部署演示示例 (https://blinkfox.github.io)</a> | QQ 交流群1（已满）: <a href="https://jq.qq.com/?_wv=1027&amp;k=5zMDYHT"><code>926552981</code></a> | QQ 交流群2（推荐）: <a href="https://jq.qq.com/?_wv=1027&amp;k=53q2Ayp"><code>971887688</code></a></p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README.md">CHANGELOG.md</a></p>]]></content>
      
      
      <categories>
          
          <category> MasterStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> Matery </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java lambda</title>
      <link href="2021/03/18/CoreJava-5/"/>
      <url>2021/03/18/CoreJava-5/</url>
      
        <content type="html"><![CDATA[<h1 id="lambda演示"><a href="#lambda演示" class="headerlink" title="lambda演示"></a>lambda演示</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is running !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下代码与上面的<strong>main</strong>方法体中的代码等效 <span class="github-emoji"><span>😮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>这便是应用了<strong>lambda</strong>表达式的匿名内部类的写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is running !"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><b style="color: chocolate;">我们通过这个演示案例可以知道lambda表达式的好处：简化匿名内部类的使用，大大简化了代码冗余的问题！</b></p><h2 id="lambda？"><a href="#lambda？" class="headerlink" title="lambda？"></a>lambda？</h2><p>知晓了<strong>lambda</strong>表达式的好处，那么<strong>lambda</strong>表达式到底是什么？</p><p>通过一个简单的代码示例理解，<strong>what is lambda expression?</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LengthComparatorTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"i"</span><span class="token punctuation">,</span><span class="token string">"am"</span><span class="token punctuation">,</span><span class="token string">"second"</span><span class="token punctuation">,</span><span class="token string">"your"</span><span class="token punctuation">,</span><span class="token string">"you"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LengthComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LengthComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span><span class="token class-name">String</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们看见一句关键的代码：<code>Arrays.sort(strings,new LengthComparator())</code> 这个针对字符串类型长度比较器，目的是为了将“比较代码块” <code>compare</code> 传入到 <strong>Arrays.sort</strong> 方法中。而<strong>lambda</strong>表达式就是为了这一目的诞生的。</p><p>我们看下面的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"i"</span><span class="token punctuation">,</span><span class="token string">"am"</span><span class="token punctuation">,</span><span class="token string">"second"</span><span class="token punctuation">,</span><span class="token string">"your"</span><span class="token punctuation">,</span><span class="token string">"you"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> second<span class="token punctuation">)</span>                     <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>(String first, String second) -&gt; {return first.length() - second.length();}</code> : <strong>lambda</strong>表达式成功的将比较代码块 <code>compare</code> 传入到 <strong>Arrays.sort</strong> 方法中。 </p><p>也得出什么是lambda表达式的答案！<span class="github-emoji"><span>😉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><b style="color: purple;">lambda表达式：是一个可传递的代码块，可以在后面被执行一次或者多次！</b></p><h1 id="lambda-函数式接口"><a href="#lambda-函数式接口" class="headerlink" title="lambda-函数式接口"></a>lambda-函数式接口</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的代码我们看见了一个特别的注解：<b style="color: aqua;">@FunctionalInterface</b> 这便是函数接口的注解！</p><p><b style="color: orangered;">函数式接口：只有一个抽象方法的接口，在使用这些接口时，就可以提供一个lambda表达式</b></p><p>我们介绍一下函数接口的<strong>特点</strong>：</p><p>（1）函数接口只能有<strong>“一个方法”</strong> </p><p>（2）函数接口可以有默认方法 <strong>default-method</strong></p><p>（3）函数接口覆盖<strong>Object</strong>祖先类的方法</p><p><b style="color: chocolate;">一个方法的说法表示是：除了default方法和Object方法之外，我们只能定义一个自己的抽象方法！</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFuncInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">diyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"函数接口的默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来演示一下这个lambda表达式实现函数式接口的过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FuncInerfaceImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         *匿名内部类实现函数式接口         * new MyFuncInterface() {         *@override         *public void diyMethod() {         *System.out.prinln("Impl diyMethod!");         *}         *}         *lambda代替匿名内部类实现类函数式接口（精简写法）         *((MyFuncInterface) () -&gt; System.out.prinln("Impl diyMethod!"))         *         *         */</span>                <span class="token class-name">MyFuncInterface</span> funcImpl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span><span class="token string">"Impl diyMethod!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p><code>lambda</code>表达式最大的吸引力就是可以与<code>函数式接口</code>进行转换！</p><p>对于那些有着特别用处的函数式接口（<code>Comparator</code>），而不是单纯的需要一个参数和返回值的方法。换而言之：就是<strong>想要lambda表达式做些稍微复杂一点的处理</strong> 那么就可以为它建立一个函数式接口！</p><p>比如之前在<a href="">ArrayList底层原理分析</a>中，谈到了一个 <code>removeIf(Predicate&lt;? super E&gt;)</code>方法这里就有一个接口</p><p><b style="color: yellow;">Predicate&lt;T&gt;</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// default-method、static-method</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个接口专门用来传递lambda表达式，所以每个list下的类都可以调用这个方法来应用lambda表达式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// list清空所有元素</span>list<span class="token punctuation">.</span><span class="token function">reomveIf</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><b style="color: red;">注：</b> lambda表达式不能直接赋值给Object类型变量，因为这里的Object不是函数式接口！</p><h1 id="lambda语法及应用"><a href="#lambda语法及应用" class="headerlink" title="lambda语法及应用"></a>lambda语法及应用</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> expressions<span class="token punctuation">;</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述代码是标准的lambda表达式语法，当然还根据有无参数分为：有参、无参！以及是否存在返回值的情况！</p><p>下面我们以上面提到的比较器为例子 <span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// LengthComparator </span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> second<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 可以推测参数类型的赋值</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> comp <span class="token operator">=</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span>second<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 返回类型通过上下文推导出的情况</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> second<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lambda表达式还有需要注意的地方：</p><p>（1）变量名不能与lambda表达式中的局部变量重名！</p><p>（2）lambda表达式不允许在某些分支返回值，而在另外一些分支不返回！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// error</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Illgeal</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> second<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lambda遍历集合操作"><a href="#lambda遍历集合操作" class="headerlink" title="lambda遍历集合操作"></a>lambda遍历集合操作</h2><p>在Java集合框架中的顶层接口 <strong>Iterable</strong> 中存在一个<code>default：forEach</code>方法,所有的具体集合类都可以利用lambda表达式进行对集合的遍历操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaItr</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"master"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"matemaster"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"masterstudio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        list.forEach(new Consumer&lt;String&gt;() {</span><span class="token comment">//            @Override</span><span class="token comment">//            public void accept(String s) {</span><span class="token comment">//                System.out.println(s);</span><span class="token comment">//            }</span><span class="token comment">//        });        </span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// mate</span><span class="token comment">// master</span><span class="token comment">// matemaster</span><span class="token comment">// masterstudio</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lambda集合排序"><a href="#lambda集合排序" class="headerlink" title="lambda集合排序"></a>lambda集合排序</h2><p>比如在<code>ArrayList</code>类中是实现了<code>List</code>接口中一个支持lambda表达式的一个<strong>sort</strong>方法，所以直接利用lambda排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Corporation</span><span class="token punctuation">&gt;</span></span>  list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Corporation</span><span class="token punctuation">(</span><span class="token string">"HUAWEI"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Corporation</span><span class="token punctuation">(</span><span class="token string">"Microsoft"</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Corporation</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Corporation</span><span class="token punctuation">(</span><span class="token string">"IBM"</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//        list.sort(new Comparator&lt;Corporation&gt;() {</span><span class="token comment">//            @Override</span><span class="token comment">//            public int compare(Corporation o1, Corporation o2) {</span><span class="token comment">//                return o1.getAge()-o2.getAge();</span><span class="token comment">//            }</span><span class="token comment">//        });</span>                list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Corporation</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Corporation</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Corporation{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lambda在线程中调用"><a href="#lambda在线程中调用" class="headerlink" title="lambda在线程中调用"></a>lambda在线程中调用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        new Thread(new Runnable() {</span><span class="token comment">//            @Override</span><span class="token comment">//            public void run() {</span><span class="token comment">//                System.out.println("当前运行线程：" + Thread.currentThread().getName());</span><span class="token comment">//            }</span><span class="token comment">//        });</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前运行线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// console: 当前运行线程：Thread-0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="lambda-cupid"><a href="#lambda-cupid" class="headerlink" title="lambda:cupid:"></a>lambda<span class="github-emoji"><span>💘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f498.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>对于一些已经存在于Java标准库的方法（或者是已有的方法），那么我们可以利用更加简洁的方式编写lambda。</p><p style="color:brown">❗语法糖：<br>（1）方法引用<br>（2）构造器引用</p><p>接下来我们展示一下，利用已有的方法去直接实现忽略大小写的字符串排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Mate"</span><span class="token punctuation">,</span><span class="token string">"mate"</span><span class="token punctuation">,</span><span class="token string">"Master"</span><span class="token punctuation">,</span><span class="token string">"master"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"CBD"</span><span class="token punctuation">}</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于利用lambda实现一个忽略大小写的比较器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用构造器引用，将字符串列表转化为另外一种类型列表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这里省去加入元素的过程</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> people <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外方法引用还可以应用在 <strong>this</strong> 和 <strong>super</strong> 两个关键字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">;</span>  <span class="token comment">// 等价于: this.equals(x)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TimeGreeter</span> <span class="token keyword">extends</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Timer</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token operator">::</span><span class="token function">greet</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 这里 super::greet  等价于 super.greet()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: navy;">语法糖总结</b> <span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-code" data-language="code"><code class="language-code">object::instaceMethod;Class::staticMethod;Class::instaceMethod;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p style="color:gray">lambda表达式的组成部分：<code>() -&gt; {}</code><br>1）参数<br>2）代码块 <br>3）自由变量值：非参数，而且不在lambda表达式内部定义的变量</p><p>先看个栗子☕</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">repeatMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token keyword">int</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ActionListener</span> listener <span class="token operator">=</span> event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">repeatMsg</span><span class="token punctuation">(</span><span class="token string">"Master"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 每隔10秒打印一下Master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 <strong>msg</strong> 就是自由变量，它是在 <strong>repeatMsg</strong> 方法中定义的参数变量。它是一个不可变量<strong>（final String）</strong></p><p>为什么这里需要强调 <strong>自由变量msg是一个不可变量</strong>❔</p><p>答：因为在lambda表达式中，自由变量为最终变量，也就是一经初始化将不再允许它在与lambda表达式同作用域内改变。无论是lambda表达式内部还是外部！</p><p>也就是说下面两个做法都是<strong>error</strong> ❎</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ActionListener</span> listener <span class="token operator">=</span> event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        start<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// error: 不允许改变自由变量 start</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ActionListener</span> listener <span class="token operator">=</span> event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token string">":"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// error: 不允许改变自由变量 i</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认一千次重复</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理lambda"><a href="#处理lambda" class="headerlink" title="处理lambda"></a>处理lambda</h2><p>前面说的全都是怎么在方法中应用lambda！那么怎么自己编写一个可以应用lambda表达式的方法呢❓</p><p>我们一般把代码块包装在lambda表达式中，主要目的：延迟执行！<br>延迟执行的原因：</p><ul><li>在单独线程运行代码</li><li>多次执行代码</li><li>在算法的合适位置执行代码（Array.sort的比较器）</li><li>回调</li><li>必要时才运行</li></ul><p>再看<strong>repeatMsg</strong> ☕</p><p>这次我们希望可以这样调用 <strong>repeatMsg</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">repeatMsg</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Master"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么如何设计这样的方法，便是主要考虑内容！请看下面的设计方式⬇️</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">repeatMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: silver;">我们得出设计一个应用lambda表达式的方法，就需要利用已有的函数式接口或者提供diy的函数式接口</b></p><p>⏳看看Java标准库中的<strong>常用函数式接口</strong></p>&nbsp;&nbsp;&nbsp;&nbsp;<tr style="background-color: chocolate;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tr style="background-color: chocolate;"><table><tbody><tr><th>函数式接口</th><th>参数类型</th>        <th>返回类型</th>        <th>抽象方法名</th>        <th>描述</th>        <th>其他方法</th></tr>    <tr>        <td>Runable</td>        <td>无</td>        <td>void</td>        <td>run</td>        <td>作无参返回值的动作运行</td>        <td></td>    </tr>    <tr>        <td>Suppiler&lt;T&gt;</td>        <td>无</td>        <td>T</td>        <td>get</td>        <td>返回T型的值</td>        <td></td>    </tr>     <tr>        <td>Consumer&lt;T&gt;</td>        <td>T</td>        <td>void</td>        <td>accept</td>        <td>处理T型值</td>        <td>andThen</td>    </tr>     <tr>        <td>BiConsumer&lt;T,U&gt;</td>        <td>T,U</td>        <td>void</td>        <td>accept</td>        <td>处理T,U类型的值</td>        <td>andThen</td>    </tr>     <tr>        <td>Function&lt;T,R&gt;</td>        <td>T</td>        <td>R</td>        <td>apply</td>        <td>有个T类型的函数</td>        <td>compose,andThen,identity</td>    </tr>     <tr>        <td>BiFunction&lt;T,U,R&gt;</td>        <td>T,U</td>        <td>R</td>        <td>apply</td>        <td>有T,U类型值的函数</td>        <td>andThen</td>    </tr>     <tr>        <td>UnaryOperator&lt;T&gt;</td>        <td>T</td>        <td>T</td>        <td>apply</td>        <td>类型T的一元操作符</td>        <td>compose,andThen,identity</td>    </tr>     <tr>        <td>BinaryOperator&lt;T&gt;</td>        <td>T,T</td>        <td>T</td>        <td>apply</td>        <td>类型T的二元操作符</td>        <td>andThen,maxBy,minBy</td>    </tr>     <tr>        <td>Predicate&lt;T&gt;</td>        <td>T</td>        <td>boolean</td>        <td>test</td>        <td>布尔函数</td>        <td>and,or,negate,isEqual</td>    </tr>     <tr>        <td>BiPredicate&lt;T,U&gt;</td>        <td>T,U</td>        <td>boolean</td>        <td>test</td>        <td>两个参数的布尔函数</td>        <td>and,or,negate</td>    </tr></tbody></table>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<p>⌛基本类型的函数式接口：这些接口可以减少自动装箱</p>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java接口技术</title>
      <link href="2021/03/17/CoreJava-4/"/>
      <url>2021/03/17/CoreJava-4/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h1><p>接口技术主要来描述类具有什么功能，也就说明Java接口不会具体实现方法。接口就相当于一个类的功能说明书，当一个类去实现了一个特定的接口，就表面这个类具有接口中所提及的功能。<br>接口也是Java实现多继承的优化方式。</p><p>我们举个栗子<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>一般情况下 我们在使用 <code>Arrays.(Obejct[])</code> 方法时，这里传入的参数数组就必须要实现 <code>Comparable</code>接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们得出每一个实现了 <strong>Comparable</strong> 接口的类，都将具有这个 <strong>compareTo(T)</strong> ，那么编译器在执行代码时，就不用附加判断这个方法是不是对应类型。相当于接口的功能性标记！</p><h1 id="接口的特性"><a href="#接口的特性" class="headerlink" title="接口的特性"></a>接口的特性</h1><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>接口不是类，没有构造器，也就是不存在接口对象，但是和抽象类一致，没有对象也可以有接口变量。接口变量通过接受实现类的对象实例引用，可以调用实现的接口方法。当然同样也可以使用 <strong>instanceof</strong> 去判断类是否接口以下代码说明了上面的这段话</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Impl Test !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TestImpl</span> ti <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Test</span> t <span class="token operator">=</span> ti<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ti <span class="token keyword">instanceof</span> <span class="token class-name">Test</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ti<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// console : Impl Test !</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>接口中不能定义实例域和静态方法（虽然Java8之后支持，但是也不会这么做）。但是接口中可以定义常量，并且含有自动的修饰词 <code>public static final</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Movable</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> SPEED_LIMIT <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">;</span> <span class="token comment">// (public static final) double SPEED_LIMIT</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="接口中的方法"><a href="#接口中的方法" class="headerlink" title="接口中的方法"></a>接口中的方法</h1><p><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>接口中的方法都是抽象方法（除了 <b style="color: red;">default</b>关键词修饰的方法），也就是含有自带的修饰词<code>public abstract</code></p><p>接下来举个<code>Iterable</code>栗子 <span class="github-emoji"><span>🆗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f197.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">//迭代器</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 增强for循环</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> t <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 拆分器</span>    <span class="token keyword">default</span> <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Spliterators</span><span class="token punctuation">.</span><span class="token function">spliteratorUnknownSize</span><span class="token punctuation">(</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）我们看到，这个接口有两个默认的方法。虽然还不是很清楚第二个具体干啥，但是可以清楚的知道，所有实现这个接口的类都将能使用 增强for循环、拆分器（关键是不用自己去实现了）。这就是默认方法的好处。当然这里的迭代器方法也告诉了编译器，它的实现类都拥有获取迭代器的能力。而具体的迭代器功能需要其实现类去实现<code>Iterator</code>接口。</p><p>（2）代码中告诉我们， default方法可以调用其他任何方法！</p><h2 id="解决接口冲突"><a href="#解决接口冲突" class="headerlink" title="解决接口冲突"></a>解决接口冲突</h2><p>之前说到过：接口最大优点就是很好的解决了多继承带来的困扰，但是其实这样也会有问题。<span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>比如： 1. 我实现的多个接口，含有方法签名完全一致的方法，这个时候实现的方法应该怎么做？ 2.我从父类继承了一个和实现接口中一样的方法，那么又怎么办？</p><p>Java的解决规则：</p><p>（1）全覆盖，对于接口重复的方法，直接覆盖。</p><p>（2）超类优先，不管接口的实现方法，直接忽略，只承认继承的方法</p><h1 id="接口回调"><a href="#接口回调" class="headerlink" title="接口回调"></a>接口回调</h1><p><strong>callback</strong> 作为一种常用的设计模式，回调就是在特定的时间发生时所需要采取的一种应对方法。</p><p>请看下面代码👇</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo08</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ActionListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimePrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Timer</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"Quit program?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TimePrinter</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"At the tone the time is : "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h1><p>这里创建一个例子 <code>Company(name,foundedTime,founder)</code>类进行克隆演示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> foundedTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> founder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Date</span> foundedTime<span class="token punctuation">,</span> <span class="token class-name">String</span> founder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>foundedTime <span class="token operator">=</span> foundedTime<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>founder <span class="token operator">=</span> founder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// getter、setter</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再看下面的代码操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// copy</span><span class="token class-name">Company</span> alibaba <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"Alibaba"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1999"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">JackMa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Company</span> copyAli <span class="token operator">=</span> alibaba<span class="token punctuation">;</span>copyAli<span class="token punctuation">.</span><span class="token function">setFoundedTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token string">"1999-9-9"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// clone</span><span class="token class-name">Company</span> huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"HUAWEI"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1987"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RZF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Company</span> hwClone <span class="token operator">=</span> huawei<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hwClone<span class="token punctuation">.</span><span class="token function">setFoundedTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token string">"1987-9-15"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210317215740.jpg"></p><p>我们从上面这个简单的图例就能看出来，拷贝就是简单的对象共享，而克隆则是创建了两个内容相同的不同对象。 这样的话 <strong>alibaba</strong> 和 <strong>copyAli</strong> 一个对象状态改变另外一个对象都会随着改变。而对于 <strong>huawei</strong> 和 <strong>hwclone</strong> 每一个对象都会有单独的属于自己的状态，彼此之间并没有影响。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// clone</span><span class="token class-name">Company</span> huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"HUAWEI"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1987"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RZF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Company</span> hwClone <span class="token operator">=</span> huawei<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hwClone<span class="token punctuation">.</span><span class="token function">setFoundedTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1987-9-15"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: yellowgreen;">浅拷贝</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> foundedTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> founder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Date</span> foundedTime<span class="token punctuation">,</span> <span class="token class-name">String</span> founder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>foundedTime <span class="token operator">=</span> foundedTime<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>founder <span class="token operator">=</span> founder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFoundedTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> foundedTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>foundedTime <span class="token operator">=</span> foundedTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 修改方法的权限为：public ，返回类型改为：Company</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Company</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Company</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Company{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", foundedTime="</span> <span class="token operator">+</span> foundedTime <span class="token operator">+</span>                <span class="token string">", founder='"</span> <span class="token operator">+</span> founder <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210317221453.jpg"></p><p>这里代码的图解看出来，对于 <strong>Company</strong> 对象的数据域存在着两类子对象引用。当然对于像 <strong>String</strong> 这种不可变的 <strong>final</strong> 类，我们并不必要担心浅拷贝的弊端。因为源对象 <strong>huawei</strong> 和 浅拷贝对象 <strong>hwclone</strong> 共享的子对象是不可变的 （这里如果子对象在其生命周期之内，包含不变的常量，没有更改器会更改它的状态，没有方法生成它的引用） 这样都是一样安全的。<span class="github-emoji"><span>😓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </p><p>但是对于像 <strong>Date</strong> 这种子对象可变的，我们始终无法保持 <strong>huawei</strong> 和 <strong>hwclone</strong> 状态能够保持一致。我现在假设 执行了上面代码块的类似代码，那么虽然是<code>hwclone.setFoundedTime(new Data("1987-9-15"))</code> 我们可以大致推测出此时 <strong>huawei</strong> 的创立时间被改变。</p><p>为了避免类似上述情况，我们引入深拷贝的操作！ <span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// clone</span><span class="token class-name">Company</span> huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"HUAWEI"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1987"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RZF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Company</span> hwClone <span class="token operator">=</span> huawei<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hwClone<span class="token punctuation">.</span><span class="token function">setFoundedTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1987-9-15"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: orange;">深拷贝</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Company</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Company</span> comClone <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comClone<span class="token punctuation">.</span>foundedTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">)</span> foundedTime<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comClone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样对于这些可变的子对象引用，每一个都有这个自己独立的状态，彼此之间互不影响。</p>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>留言板信封动画</title>
      <link href="2021/03/17/mst-msg/"/>
      <url>2021/03/17/mst-msg/</url>
      
        <content type="html"><![CDATA[<h1 id="电脑端信封骨架结构"><a href="#电脑端信封骨架结构" class="headerlink" title="电脑端信封骨架结构"></a>电脑端信封骨架结构</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>computer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maincontent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeimg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>envelope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formmain<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              <span class="token comment">&lt;!--这里存放的是自己想展示的信封内容，注意图片大小，会影响演示效果--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headerimg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">padding</span><span class="token punctuation">:</span> 5px 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--以下是自己想要写入的内容--&gt;</span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">calss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>来自MateMaster的留言:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                有什么想问的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                有什么想说的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                有什么想吐槽的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                有什么新奇的想法，也都可以告诉我哦~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomcontent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomimg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomhr<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>自动书记人偶竭诚为您服务！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterimg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="移动端信封骨架结构"><a href="#移动端信封骨架结构" class="headerlink" title="移动端信封骨架结构"></a>移动端信封骨架结构</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mobile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formmain<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headerimg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">padding</span><span class="token punctuation">:</span> 5px 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>来自MateMaster的留言:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          有什么想问的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>          有什么想说的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>          有什么想吐槽的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>          有什么新奇的想法，也都可以告诉我哦~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomcontent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomhr<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomhr<span class="token punctuation">"</span></span><span class="token attr-name">"</span><span class="token punctuation">&gt;</span></span>自动书记人偶竭诚为您服务！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="css渲染动画"><a href="#css渲染动画" class="headerlink" title="css渲染动画"></a>css渲染动画</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/envelope.css<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将css文件放在 <strong>hexo-theme-matery</strong> 主题文件夹的 <strong>source/css</strong> 目录下，<strong>然后直接按照此方式引用即可！ 源码中我写的link为了演示效果，与这里引用的href不一致，注意修改</strong></p><h1 id="完整源码资源"><a href="#完整源码资源" class="headerlink" title="完整源码资源"></a>完整源码资源</h1><p>这里骨架结构，为了代码演示美观，我就直接把图片的<strong>src</strong>省略了，具体的可以直接在我的<strong>gitee</strong>仓库中下载源码</p><p><strong>首页就有gitee仓库的直通车O(∩_∩)O</strong></p><p>👉 <a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-17"><b>信封动画的源代码</b></a></p>]]></content>
      
      
      <categories>
          
          <category> MasterStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 动画 </tag>
            
            <tag> MasterStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Collection&lt;E&gt;</title>
      <link href="2021/03/16/CoreJava-3/"/>
      <url>2021/03/16/CoreJava-3/</url>
      
        <content type="html"><![CDATA[<h1 id="集合框架图"><a href="#集合框架图" class="headerlink" title="集合框架图"></a>集合框架图</h1><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-blog/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%9B%BE.png"></p><h2 id="collection框架图"><a href="#collection框架图" class="headerlink" title="collection框架图"></a>collection框架图</h2><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-blog/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%9B%BE.jpg"></p><h1 id="Java集合具体框架类"><a href="#Java集合具体框架类" class="headerlink" title="Java集合具体框架类"></a>Java集合具体框架类</h1><table><thead><tr><th>list</th><th>含义</th></tr></thead><tbody><tr><td><strong>ArrayList</strong></td><td>一种可以动态增长和缩减的索引序列</td></tr><tr><td><strong>LinkedList</strong></td><td>一种可以在任何位置进行高效地插人和删除操作的有序序列</td></tr><tr><td><strong>Vector</strong></td><td>Vector类实现了一个可增长的对象数组</td></tr><tr><td><strong>Stack</strong></td><td>堆栈类表示对象的最后一个先出（LIFO）堆栈。它用五个操作扩展类向量，使向量可以被视为堆栈。</td></tr></tbody></table><table><thead><tr><th>set</th><th>含义</th></tr></thead><tbody><tr><td><strong>HashSet</strong></td><td>一种没有重复元案的无序集合</td></tr><tr><td><strong>TreeSet</strong></td><td>一种有序集</td></tr><tr><td><strong>EnumSet</strong></td><td>一种包含枚举类型值的集</td></tr><tr><td><strong>LinkedHashSet</strong></td><td>一种可以记住元素插人次序的集</td></tr></tbody></table><table><thead><tr><th>queue</th><th>含义</th></tr></thead><tbody><tr><td><strong>ArrayDeque</strong></td><td>一种用循环数组实现的双端队列</td></tr><tr><td><strong>PriorityQueue</strong></td><td>一种允许高效删除最小元素的集合</td></tr></tbody></table><table><thead><tr><th>map</th><th>含义</th></tr></thead><tbody><tr><td><strong>HashMap</strong></td><td>一种存储键/值关联的数据结构</td></tr><tr><td><strong>TreeMap</strong></td><td>一种键值有序排列的映射表</td></tr><tr><td><strong>EnumMap</strong></td><td>一种键值属于枚举类型的映射表</td></tr><tr><td><strong>LinkedHashMap</strong></td><td>一种可以记住键/值项添加次序序的映射表</td></tr><tr><td><strong>WeakHashMap</strong></td><td>一种其值无用武之地后可以被垃圾回收器回收的映射表</td></tr><tr><td><strong>IdentityHashMap</strong></td><td>一种用 == 而不是用 equals 比较键值的映射表</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList&lt;E&gt;底层原理</title>
      <link href="2021/03/16/CoreJava-2/"/>
      <url>2021/03/16/CoreJava-2/</url>
      
        <content type="html"><![CDATA[<h1 id="原理分析图"><a href="#原理分析图" class="headerlink" title="原理分析图"></a>原理分析图</h1><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-blog/ArrayList.png"></p><h1 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h1><h2 id="完整关系图"><a href="#完整关系图" class="headerlink" title="完整关系图"></a>完整关系图</h2><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-blog/ArrayList继承关系.jpg" style="zoom: 50%;"><p>————–&gt;此继承关系图来资源idea</p><h1 id="★源码分析"><a href="#★源码分析" class="headerlink" title="★源码分析"></a>★源码分析</h1><p style="color: red; font-size :36px">    JDK-8U281</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><table><thead><tr><th>构造方法</th><th>含义</th></tr></thead><tbody><tr><td><strong>public ArrayList()</strong></td><td>创建初始容量为10的空列表（逻辑长度为0）</td></tr><tr><td><strong>public ArrayList(int initialCapacity)</strong></td><td>创建初始容量为initialCapacity的列表</td></tr><tr><td>★<strong>public ArrayList(Collection&lt;? extends E&gt; c)</strong></td><td>创建一个包含collection元素的列表，按照collection的迭代器返回的顺序来排列</td></tr></tbody></table><p style="color : hotpink">    <b>(1) public ArrayList()</b>是如何实现创建一个初始容量为10的空列表（逻辑长度为0）？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们从这里的代码可能看出，此时的列表存储 <strong>elementData</strong> 是一个空的数组。那么何来的初始容量为10？<br>这里的10是在添加元素时，才能体现出来的作用。</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-blog/初始容量10的创建过程.jpg" style="zoom: 50%;"><p>从上述代码关系图可以看出，在向<strong>elementData</strong>  <strong>add</strong> 第一个元素时，数组<strong>elementData</strong>会进行与默认容量的空数组 <strong>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</strong> 进行比对。如果比对成功的情况下，会自动对返回默认的初始容量 <strong>DEFAULT_CAPACITY = 10</strong>。所以说此时创建的列表虽然初始容量为10，但是逻辑长度为0。“逻辑长度：数组实际含有的元素，也是size()方法的返回值。”</p><p style="color : hotpink">    <b>(2) public ArrayList(int initialCapacity)</b>是如何实现创建一个初始容量为initialCapacity的列表？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// if...else if...else结构完成三种情况的讨论</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p style="color : hotpink">    <b>(3) public ArrayList(Collection&lt;? extends E&gt; c)</b>是如何实现创建一个包含collection元素的列表，按照collection的迭代器返回的顺序来排列？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 集合元素转成数组</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第一次判断数组是否为空、并完成逻辑长度的赋值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 第二次类型判断、完成数组的拷贝</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            elementData <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h2><table><thead><tr><th>add</th><th>含义</th></tr></thead><tbody><tr><td><strong>public boolean add(E e)</strong></td><td>添加元素e，返回值代表是否加入成功</td></tr><tr><td><strong>public void add(int index, E element)</strong></td><td>在指定的index处，加入元素element</td></tr></tbody></table><p style="color: hotpink">    <b>数组扩容的核心思想 : capacity</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>        <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>    MAX_ARRAY_SIZE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p style="color : hotpink">    <b>public boolean add(E e)</b>是如何实现加入一个e，并且返回成功标志，以及对数组的动态调整？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** add源码分析 * @author MateMaster * @version JDK-8U281 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p style="color : hotpink">    <b>public void add(int index, E element)</b>是如何实现在指定位置index加入元素e，并且完成对数组的动态调整？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//System.arraycopy : 完成插入前，插入位置数组元素地右移</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;</span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Index:"</span> <span class="token operator">+</span>index<span class="token operator">+</span> <span class="token string">",Size:"</span> <span class="token operator">+</span>size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//关于 ensureCapacityInternal()系列的方法，可以参考上面的add方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>addAll</th><th>含义</th></tr></thead><tbody><tr><td><strong>public boolean addAll(Collection&lt;? extends E&gt; c)</strong></td><td>将集合collection元素加入到列表中</td></tr><tr><td><strong>public boolean addAll(int index, Collection&lt;? extends E&gt; c)</strong></td><td>在指定的位置加入集合元素</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//生成包含集合元素的数组、并将逻辑长度复制为numNew</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">//ensureCapacityInternal : 确保数组的容量</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//System.arraycopy : 将集合c里的元素复制到列表里面</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//System.arraycopy : 完成对数组元素的移动</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token operator">+</span>numNew<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//System.arraycopy : 将集合c元素复制到相应的位置</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color : red">总结：</b> <b style="color : hotpink">从上述的代码我们可以看出，关于元素的添加的核心内容主要在于：1.数组容量的正确调整。2.数组元素的正确复制。也就是以ensureCapacityInternal()系列方法为核心的容量的动态调整，以及System.arraycopy()方法的两种作用——元素移动、元素复制。</b></p><h2 id="★删除方法？"><a href="#★删除方法？" class="headerlink" title="★删除方法？"></a>★删除方法？</h2><table><thead><tr><th>remove</th><th>含义</th></tr></thead><tbody><tr><td><strong>public E remove(int index)</strong></td><td>删除指定位置，并返回删除的元素</td></tr><tr><td><strong>public boolean remove(Object o)</strong></td><td>删除元素o，并且返回成功标志</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 首先判断索引位置是否合理</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 其次保留删除内容</span>    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 确定需要移动元素的个数</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 判断个数，并且完成移动</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//移动结束后，列表尾部置空，完成删除操作</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//check index</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">outOfBoundMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"Index:"</span> <span class="token operator">+</span> index<span class="token operator">+</span> <span class="token string">", Size:"</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//positional access</span><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">elementData</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">E remove(int)总结：</b> 从上述代码可以看出，删除指定位置的元素操作大致分为以下几个步骤：</p><p>（1） 索引校验<br>（2） 保留待删除的元素<br>（3） 确定删除前，需要移动的元素个数<br>（4） 判断个数，完成index后元素的前移动作<br>（5） 尾部位置元素置空，并将size-1</p><p>这里理解的难点在于：移动元素的个数（size-index-1）、System.arraycopy方法中源-目的数组复制的起始位置、size-1与尾部置空操作的先后顺序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// fastRemove</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">boolean remove(Object)总结：</b> 从上述代码看出，整个删除操作的核心过程就在去两个：找元素、快删除。这里为了避免null引起的调用equals方法的异常，所以将null单独提出来讨论。其次就是数组遍历，找出元素位置，然后进行快速删除。这里的快速删除与上面remove保持一致。</p><table><thead><tr><th>removeAll</th><th>含义</th></tr></thead><tbody><tr><td>★<strong>public boolean removeAll(Collection&lt;?&gt; c)</strong></td><td>从此列表中移除包含在指定集合c中的所有元素</td></tr></tbody></table><table><thead><tr><th>retainAll</th><th>含义</th></tr></thead><tbody><tr><td>★<strong>public boolean retainAll(Collection&lt;?&gt; c)</strong></td><td>从此列表中移除不包含在指定集合c中的所有元素</td></tr></tbody></table><p style="color:hotpink">    这里利用一个数学表达式来表示这两个方法的作用：<br>    <b>（1）list.removeAll(c) : list - list ∩ c</b><br>    <b>（2）list.retainAll(c) : list ∩ c</b>   </p>    <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 判断对象是否是空</span>    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 批删除操作</span>    <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于这个方法最为重要的便是理解下面这两个方法：</p><p><b style="color:hotpink">（1）requireNonNull</b></p><p><b style="color:hotpink">（2）batchRemove ？</b></p><p>而（1）方法只是单纯的用于判断集合对象是否为空、终点都在第二个 <strong>batchRemove</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span> <span class="token keyword">boolean</span> complement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copyData <span class="token operator">=</span> elementData<span class="token punctuation">;</span>    <span class="token keyword">int</span> read <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> write <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> modified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> read <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> read<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>copyData<span class="token punctuation">[</span>read<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> complement<span class="token punctuation">)</span>                elementData<span class="token punctuation">[</span>write<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> copyData<span class="token punctuation">[</span>read<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>copyData<span class="token punctuation">,</span> read<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> write<span class="token punctuation">,</span> size <span class="token operator">-</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>            write <span class="token operator">+=</span> size <span class="token operator">-</span> read<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>write <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// clear to let GC do its work</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> write<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                copyData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            modCount <span class="token operator">+=</span> size <span class="token operator">-</span> write<span class="token punctuation">;</span>            size <span class="token operator">=</span> write<span class="token punctuation">;</span>            modified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> modified<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">batchRemove总结：</b> 这一部分相较于底层源码在一些变量上面进行了一些变动，因为底层源码不太好理解，所以就按照自己的理解意思进行了修改，测试功能一致。这部分理解难点就在于 <strong>try</strong> 语句块。我们从补充标志 <strong>complement</strong> 决定是删除、还是保留。</p><p>当 <strong>complement == false</strong> 时，表面<strong>不会保留共同元素</strong>，也就是会<strong>删除</strong>列表中所有与集合c<strong>相同</strong>的元素。<br>当 <strong>complement == true</strong> 时，表明<strong>会保留共同元素</strong>，也就是说会<strong>删除</strong>列表中所有与集合c<strong>不相同</strong>的元素。</p><p>关于finally语句块里面提到的两个if条件判断的情况，目前理解就是保持与AbstractCollection的兼容性。</p><table><thead><tr><th>范围删除</th><th>含义</th></tr></thead><tbody><tr><td><strong>protected void removeRange(int fromIndex, int toIndex)</strong></td><td>删除[fromIndex,toIndex)元素</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 确定移动个数，并移动</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> toIndex<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 确定新的size、并且将 [size - (toIndex - fromIndex),size)的元素清空</span>    <span class="token keyword">int</span> newSize <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token punctuation">(</span>toIndex <span class="token operator">-</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>newSize<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 重新设置size</span>    size <span class="token operator">=</span> newSize<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">removeRange总结：</b>此方法中当 <strong>fromIndex &lt;= toIndex</strong> 时,方法会删除列表中[from,to)元素。但是当不会满足上面条件时，方法就是无效，并且抛出 <strong>IndexOutOfBoundsException</strong></p><h2 id="简单方法"><a href="#简单方法" class="headerlink" title="简单方法"></a>简单方法</h2><table><thead><tr><th>set</th><th>含义</th></tr></thead><tbody><tr><td><strong>public E set(int index, E element)</strong></td><td>将指定位置index的元素设置为element</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 索引校验 : rangeCheck(index)</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 位置存取操作 : E elementData(index)</span>    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>get</th><th>含义</th></tr></thead><tbody><tr><td><strong>public E get(int index)</strong></td><td>获取指定位置index处的元素</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">set/get总结: 索引校验、位置存取操作</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//check index</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"Index:"</span> <span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">", Size:"</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//positional access</span><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">elementData</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>clear</th><th>含义</th></tr></thead><tbody><tr><td><strong>public void clear()</strong></td><td>情况列表的元素</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>contains</th><th>含义</th></tr></thead><tbody><tr><td><strong>public boolean contains(Object o)</strong></td><td>判断此列表是否包含至少一个满足 (o==null ? e==null : o.equals(e)) 的元素 e</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获取元素o在列表中的位置 左-&gt;右</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取元素o在列表中的位置 左&lt;-右</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h2><table><thead><tr><th>toArray</th><th>含义</th></tr></thead><tbody><tr><td><strong>public Object[] toArray()</strong></td><td>将集合对象转换成数组</td></tr><tr><td><strong>public &lt;T&gt; T[] toArray(T[] arrayToFill)</strong></td><td>集合对象转换成T类型数组、并将多余部分使用a里的元素填充</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">T[] toArray(T[] a)总结：</b> 主要分为两种情况：</p><p>（1）当数组a的长度小于列表长度时，则会直接将列表转化为T类型的数组。<br>（2）当数组a的长度大于或等于列表长度时，则会超出长度的部分都将会使用数组a里面的元素进行填充。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>list1 <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span>此时会得到新的数组 <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> T1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>list2 <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>此时会得到新数组 <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> T2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>toString</th><th>含义</th></tr></thead><tbody><tr><td><strong>public String toString()</strong></td><td>将列表以数组的字符串形式输出（继承自AbstractCollection）</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取迭代器</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 判断是否有元素</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 收集元素转换成字符串</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">E</span> e <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">this</span> <span class="token operator">?</span> <span class="token string">"(this collection)"</span> <span class="token operator">:</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="★迭代器"><a href="#★迭代器" class="headerlink" title="★迭代器"></a>★迭代器</h1><table><thead><tr><th align="center">iterator</th></tr></thead><tbody><tr><td align="center"><strong>public Iterator&lt;E&gt; iterator()</strong></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> exceptedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>                <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>cursor <span class="token operator">!=</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> current <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">&gt;=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        cursor <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> current<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="动态扩容和缩减"><a href="#动态扩容和缩减" class="headerlink" title="动态扩容和缩减"></a>动态扩容和缩减</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>        <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>    MAX_ARRAY_SIZE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="gt-demo"><a href="#gt-demo" class="headerlink" title="-> demo"></a>-&gt; demo</h1><p>这里是ArrayList常用方法的演示代码，较长但简单，就是一个测试的demo。具体的相关测试代码及ArrayList源码、可以访问我的gitee仓库进行下载查看 👉 <a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-14"><b>ArrayList原理分析的相关代码</b></a></p>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoreJava知识总结</title>
      <link href="2021/03/15/CoreJava-1/"/>
      <url>2021/03/15/CoreJava-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello MasterStudio!</title>
      <link href="2021/03/14/mst/"/>
      <url>2021/03/14/mst/</url>
      
        <content type="html"><![CDATA[<h1 id="MateMasterStudio的创建初衷"><a href="#MateMasterStudio的创建初衷" class="headerlink" title="MateMasterStudio的创建初衷"></a>MateMasterStudio的创建初衷</h1><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210317194730.jpeg"></p><p style="color: red">    <b>See the picture to know the meaning: <br>-  everything will start from the creation of MasterStudio</b><br>    <b>- Dream: I'm a master —— matemaster</b></p><h1 id="关于创建博客网站的思考"><a href="#关于创建博客网站的思考" class="headerlink" title="关于创建博客网站的思考"></a>关于创建博客网站的思考</h1><p>按照前面的思路来说，可以看出我写博客网站是为了分享自己的学习笔记，其实也是一种学习的输出。我喜欢的UP主CodeSheep在一篇关于Java后端开发的博文中说过这样一句话：“计算机学习在出不在入”。就这样我把博客网站当作自己的一种学习知识的输出，便于自己后面查看复习或者是纠错。</p><p>但是就目前写博客思考为止。我大部分的时间都放在博客优化上面了。其实我玩博客网站的时间并不是很长，期间尝试过Matery、nexT、buttefly。都在自己的本地都做很很多的魔改，真的花了我很多的时间。一度都把我的学习给暂时停滞了。</p><p>在经过一段时间的反思之后，我觉得重新去规划自己的博客建设，把重点都放在博客文章的更新、会把自己的时间放在优化博客文章阅读方面。后面随着博客文章的增多，还要加强博客的分类布局不仅方便自己查看页方便陌生网站浏览者查看。一个优秀博客更重要体现在博客文章方面以及网站的阅读体验。</p><p>后面的网站建设中，更重要是偏重陌生浏览者。花哨的功能以及极度个性化的设计都只是服务于自己的，而我的目标是把博客网站打造成学习的交流平台。让更多的人去浏览我的博客才是我的最终目的。</p><p>大概在75篇博客文章之后，我把自己博客文章的框架图发出来。顺便分享一下自己的学习路线，以及优秀开发者总结的关于计算机的学习路线。</p>]]></content>
      
      
      <categories>
          
          <category> MasterStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> MasterStudio </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
