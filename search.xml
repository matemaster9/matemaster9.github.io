<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HashMap底层原理</title>
      <link href="posts/10092.html"/>
      <url>posts/10092.html</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><p>基于哈希表的 <code>Map</code> 接口的实现。此实现提供所有可选的映射操作，并允许使用 <code>null</code> 值和 <code>null</code>  键。（除了非同步和允许使用 null 之外，<code>HashMap</code> 类与 <code>Hashtable</code>  大致相同。）此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 </p><p>此实现假定哈希函数将元素适当地分布在各桶之间，可为基本操作（<code>get</code> 和 <code>put</code>）提供稳定的性能。迭代  collection 视图所需的时间与 <code>HashMap</code>  实例的“容量”（桶的数量）及其大小（键-值映射关系数）成比例。所以，如果迭代性能很重要，则不要将初始容量设置得太高（或将加载因子设置得太低）。 </p><p><code>HashMap</code> 的实例有两个参数影响其性能：<em>初始容量</em> 和<em>加载因子</em>。<em>容量</em>  是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。<em>加载因子</em>  是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 <em>rehash</em>  操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。 </p><p>通常，默认加载因子 (.75) 在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数  <code>HashMap</code> 类的操作中，包括 <code>get</code> 和 <code>put</code>  操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash  操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。 </p><p>如果很多映射关系要存储在 <code>HashMap</code> 实例中，则相对于按需执行自动的 rehash  操作以增大表的容量来说，使用足够大的初始容量创建它将使得映射关系能更有效地存储。 </p><p><strong>注意，此实现不是同步的。</strong>如果多个线程同时访问一个哈希映射，而其中至少一个线程从结构上修改了该映射，则它<em>必须</em>  保持外部同步。（结构上的修改是指添加或删除一个或多个映射关系的任何操作；仅改变与实例已经包含的键关联的值不是结构上的修改。）这一般通过对自然封装该映射的对象进行同步操作来完成。如果不存在这样的对象，则应该使用  Collections.synchronizedMap  方法来“包装”该映射。最好在创建时完成这一操作，以防止对映射进行意外的非同步访问，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">Map m = Collections.synchronizedMap(new HashMap(...));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由所有此类的“collection 视图方法”所返回的迭代器都是<em>快速失败</em>  的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器本身的 <code>remove</code> 方法，其他任何时间任何方式的修改，迭代器都将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就会完全失败，而不冒在将来不确定的时间发生任意不确定行为的风险。 </p><p>注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出  <code>ConcurrentModificationException</code>。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：<em>迭代器的快速失败行为应该仅用于检测程序错误。</em> </p><p>此类是 Java  Collections Framework 的成员</p><h2 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认初始容量为16</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// aka 16</span><span class="token comment">// 最大容量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">// 默认加载因子（扩容的时机、前辈经验、毋庸置疑）</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment">// 链表转红黑树的最小要求</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// 红黑树转链表的要求</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">// 最小树化要求：桶容量要超过64，并且链表长度最小为8</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 空参构造:default_bucket = 16  loadFacotr = 0.75</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token comment">// all other fields defaulted</span><span class="token punctuation">}</span><span class="token comment">// int构造：default_bucket = initialCapacity  loadFacotr = 0.75</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 指定容量和加载因子</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                           initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>        initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                           loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 利用已有的map基础之上构造新的map</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span>    <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从构造函数可以看出，基本的桶数组都不是在构造函数期间创建的，而是在put向hashmap中加元素时创建的。</p><h1 id="put"><a href="#put" class="headerlink" title="put"></a>put</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PutTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token string">"champion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 因为链表长度大于等于8,这里需要树化或者扩容(这里是扩容)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们根据<code>maps.put(1,"first");</code>操作深入到put操作底层执行逻辑！</p><h2 id="put初始化-扩容"><a href="#put初始化-扩容" class="headerlink" title="put初始化(扩容)"></a>put初始化(扩容)</h2><p>①率先执行<strong>put(K,V)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>②执行<strong>putVal(int, K, V, boolean, boolean)</strong></p><p>hash-&gt;插入键的哈希值</p><p>onlyIfAbsent-&gt;布尔值，当为true时表示：不能覆盖原有的键值</p><p>evict-&gt;布尔值，当为false时表示：表正在创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// tab:代表临时的哈希桶数组 p:执行元素的指针 n:哈希桶数 i:数组下标</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token comment">// 这步仅在初始化使用，当桶数组为空时，进行扩容操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 如果出现哈希冲突，则以链表的形式存储。否则该位置就是元素位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化时该步不会执行,(只会在出现hash冲突时，应用)</span>    <span class="token punctuation">}</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③执行resize()，将hash数组扩容，并将原数组元素加入到新数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化时该步不会执行</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化时该步不会执行</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>                       newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化时该步不会执行</span>    <span class="token punctuation">}</span>    <span class="token comment">// 修改次hashmap的预期值和桶数,newTab:表示新的hash数组</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>oldCap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化时该步不会执行</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="put处理简单hash冲突"><a href="#put处理简单hash冲突" class="headerlink" title="put处理简单hash冲突"></a>put处理简单hash冲突</h2><p>我们接着上面的putVal()中处理hash冲突的else语句块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// e:元素结点,k:代表当前元素的key值</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>        <span class="token comment">// 1.插入元素的键与冲突键相同</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        e <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token comment">// 2.树化操作</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>        e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.插入键与冲突键不同</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 该死循环是为了将插入K-V加入链表中(要么树化、要么链表尾插)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 链表尾</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 在链表上发送键冲突</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 覆盖原有键值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// existing mapping for key</span>        <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="put扩容"><a href="#put扩容" class="headerlink" title="put扩容"></a>put扩容</h2><p>①何时扩容何时树化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 这里因为插入的129 已经超过了链表的最大长度限制，此时需要决定是扩容还是树化</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>                <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②决定现在树化操作：是进行扩容操作，还是进行树化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeifyBin</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>    <span class="token comment">// 因为桶数不足导致扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TREEIFY_CAPACITY<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 树化:在满足桶数大于等于64、链表长度大于等于8进行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③resize</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 修改新的桶数和预期值</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token generics"><span class="token punctuation">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;</span><span class="token operator">&amp;</span>             oldCap <span class="token punctuation">&gt;</span></span><span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>        newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span><span class="token punctuation">}</span><span class="token comment">// 如果扩容前的数组存在元素，则需要将数组移动到扩容后的数组</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// preserve order</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                            loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token keyword">else</span>                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                        loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                            hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token keyword">else</span>                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                        hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5</title>
      <link href="posts/22726.html"/>
      <url>posts/22726.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring基础"><a href="#Spring基础" class="headerlink" title="Spring基础"></a>Spring基础</h1><h2 id="Spring起步"><a href="#Spring起步" class="headerlink" title="Spring起步"></a>Spring起步</h2><h3 id="Spring基本概念"><a href="#Spring基本概念" class="headerlink" title="Spring基本概念"></a>Spring基本概念</h3><p><strong>Spring</strong>的核心就是容器（container），也就是<b style="color: hotpink;">SpringApplicationContext（Spring应用上下文）</b><br>Spring应用是由若干个组件（component）构成，也就是<b style="color: hotpink;">bean</b>。并且利用Spring应用上下文进行组件的创建和管理！</p><p>Spring组件装配的方式采用了<strong>依赖注入（Dependency Injection DI）</strong>，这样做的好处就在于组件不需要再创建管理自己所依赖组件及生命周期！而是交由Spring应用上下文将组件注入到需要它们的bean中！通常是利用构造器参数和属性访问方法来实现的。</p><p>举个栗子✨</p><p>现在在我的Spring容器中存在两个组件：ProductService和InventoryService，并且前者依赖后者。那么我们就可以采用DI的方式，将这两个组件注入到Spring容器中！Spring将依赖的InventoryService注入到ProductService中！</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210408203037.png" style="width:75%"><p>上面提到了依赖注入的过程，那么就需要进行代码演示，将bean注入到Speing容器的两种方式</p><p>1）XML配置</p><p>2）Java注解</p><p><b style="background-color: black;color: white;">XML配置</b></p><p>xml主要描述在Spring上下文（容器）中<strong>存在哪些组件</strong>？以及各个组件之间的<strong>关联关系</strong>？</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>inventoryService<span class="token punctuation">"</span></span>       <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>cn.matemaster.InventoryService<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>productService<span class="token punctuation">"</span></span>       <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>cn.matemaster.ProductService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>inventoryService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="background-color: black;color: white;">Java注解</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">InventoryService</span> <span class="token function">inventoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InventoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ProductService</span> <span class="token function">productService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductService</span><span class="token punctuation">(</span><span class="token function">inventoryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: green;">关于Java注解的含义</b></p><p>① <strong>@Configuration注解</strong>告知Spring这是一个配置类，会为Spring应用上下文提供bean</p><p>② <strong>@Bean注解</strong>表明该方法返回的对象将会以bean的方式注入到Spring容器（默认情况：bean对应的bean ID将会与方法名称相同）</p><p>关于xml配置和Java注解，它们都是依赖注入的显示配置方式！当然Spring技术还提供了强大的<strong>自动配置</strong>功能。<b style="color: silver;">自动配置主要起源自：自动装配 和 组件扫描</b>。借助组件扫描技术，Spring可以自动发现类路径下的组件，并且将它们创建成Spring应用上下文的bean。在借助自动装配技术，Spring自动为组件注入他们所依赖的bean！</p><h3 id="初始化Spring项目"><a href="#初始化Spring项目" class="headerlink" title="初始化Spring项目"></a>初始化Spring项目</h3><h4 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h4><p>为了方便快捷的构建Spring项目骨架，将自己的主要精力放在Spring应用代码的编写上。<br>这里基于<b style="background-color: black;color: white;">JetBrains IntelliJ IDEA</b>平台使用<b style="background-color: black;color: white;">Spring Initializr</b>初始化应用</p><p>1）新建Spring Initilazr</p><p>2）配置项目的相关信息</p><p>3）导入项目的依赖</p><p>4）选择项目的存储路径</p><p>① 建立Spring Initilazr、选择项目的SDK</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210408150416.jpg" style="width:50%"><p>② 配置好项目所属、名称、Maven、开发语言、语言版本、描述信息…</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210408150610.jpg" style="width:50%"><p>③ 选择需要导入项目的依赖</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210408150808.jpg" style="width:50%"><p>④ 选择项目存储路径</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210408150812.jpg" style="width:50%"><h4 id="项目的结构"><a href="#项目的结构" class="headerlink" title="项目的结构"></a>项目的结构</h4><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210408160334.jpg" style="width:100%;border:solid"><p><b style="color: skyblue;">TacoCloudApplication.java</b>：Sprint Boot的主类</p><p><b style="color: limegreen;">application.properties</b>：指定配置属性的文件</p><p><b style="color: skyblue;">TacoCloudApplicationTests.java</b>：Spring Boot的测试类</p><p><b style="color: gray;">mvnw/mvnw.cmd</b>：Maven包装器的脚本</p><p><b style="color: silver;">static</b>：存储项目的静态资源（图片.css .js）</p><p><b style="color: silver;">templates</b>：存放用来渲染内容到浏览器的模板文件</p><p><b style="color: blue;">pom.xml</b>：Maven项目的构建规范</p><p><b style="background-color: black;color: white;">初始Maven构建规范：pom.xml</b></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>taco-cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>taco-cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring Boot starter依赖的特别之处：它们本身并不包含库的代码，而是传递性的拉去其他的库。</p><ul><li>构建文件变小，因为不必要为每一个库声明依赖</li><li>不用担心库的版本问题</li></ul><p>spring-boot-maven-plugin插件</p><ul><li>可以使用maven命令运行项目</li><li>确保所有依赖库都打包在jar文件中</li><li>会在jar文件生成一个manifest文件，将TacoCloudApplication声明为jar的主类</li></ul><p><b style="background-color: black;color: white;">SpringBoot主类</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TacoCloudApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TacoCloudApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: gray;">@SpringBootApplication</b>：表明这是一个SpringBoot应用，并且这还是复合注解。它组合了下面几个注解</p><ul><li>@SpringBootConfiguration：将该类声明为配置类</li><li>@EnableAutoConfiguration：启动SpringBoot的自动配置</li><li>@ComponentScan：启用组件扫描</li></ul><p><b style="color: gray;">SpringApplication.run(Class&lt;?&gt; primarySource, String… args)</b>：创建一个Spring应用上下文</p><p><b style="background-color: black;color: white;">Spring测试类</b></p><p>这里的类的权限和方法权限必须全部是public</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">ackage com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TacoCloudApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: gray;">@RunWith(SpringRunner.class)</b>：RunWith(runner)可以视为JUnit的一个插件，他会提供一个测试运行器runner来指导JUnit如何运行测试<br><b style="color: gray;">SpringRunner</b>：Spring提供放入一个测试运行器，它会创建运行需要的Spring应用上下文<br><b style="color: gray;">@SpringBootTest</b>：将该类标注为测试类，等同于运行main()中的SpringApplication.run()</p><h3 id="编写项目代码"><a href="#编写项目代码" class="headerlink" title="编写项目代码"></a>编写项目代码</h3><p>这里就简单的给自己的应用写一个主页站点，当本地浏览器通过 <b style="color: skyblue;"><a href="http://localhost:8080/">http://localhost:8080</a></b>端口进行主页的访问时，我们编写的控制器将返回一个主页的视图，用于欢迎顾客！</p><p>①编写处理web请求的控制器</p><p><b style="background-color: black;color: white;">HomeController</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">{</span>    <span class="token comment">// 接受来自本地服务器的GET请求，返回home字符串</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"home"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的注解不做过多解释，在学习SpringMVC时已经接触到相关的概念！有了@Controller注解，Spring在组件扫描的时候就会将识别到它，并将创建HomeController实例作为Spring容器的bean</p><p>②编写Taco Cloud主页视图的模板</p><p>这里页面的模板引擎是 <b style="color: slategray;">Thymeleaf</b>。至于其它的引擎：<b style="color: slategray;">FreeMaker、JSP…</b>再说</p><p><b style="background-color: black;color: white;">Taco Cloud主页模板</b></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span>      <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Taco Cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Welcome to Taco Cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/images/TacoCloud.png}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就是在img标签中引用了Thymeleaf的th:src属性和@{…}表达式。这里的图片资源是放在了项目的静态资源路径：”/src/main/resources/static/images/TacoCloud.ong”。该模板页面的html文件则放在了专门存放模板的路径：”/src/main/resources/templates/home.html”。</p><p>这里穿插一下，如何在 <b style="color: darkred;">IntelliJ IDEA</b> 中加入Thymeleaf模板文件。关于模板引擎的语法，可以参考文档</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210409102500.jpg" style="width:80%;border:solid"><p>③测试控制器是否能正常工作</p><p><b style="background-color: black;color: white;">HomeController测试类</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">WebMvcTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">Matchers</span><span class="token punctuation">.</span>containsString<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span>get<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span><span class="token class-name">HomeController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeControllerTest</span> <span class="token punctuation">{</span>    <span class="token comment">// 自动注入</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"Welcome to Taco Cloud"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在测试类HomeControllerTest中存在几个陌生的注解标签：@WebMvcTest(HomeController.class)与@Autowired。</p><p><b style="color: lime;">@WebMvcTest</b>：SpringBoot提供的特殊测试注解，有了这个注解我们就可以让这次测试是在SpringMVC应用上下文中执行，而此次web测试的对象就是：HomeController。<br><b style="color: lime;">@Autowired</b>：自动将MockMvc注入到Spring的容器当中</p><h3 id="测试项目运行"><a href="#测试项目运行" class="headerlink" title="测试项目运行"></a>测试项目运行</h3><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210408195631.jpg" style="width:80%;border:solid"><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210408195735.jpg" style="width:80%;border:solid"><h2 id="web应用开发"><a href="#web应用开发" class="headerlink" title="web应用开发"></a>web应用开发</h2><h3 id="网页的展示信息"><a href="#网页的展示信息" class="headerlink" title="网页的展示信息"></a>网页的展示信息</h3><p>为了健全Taco Cloud网站的功能，现在建立一个标准的MVC控制流。</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210409101844.png" style="width:80%;border:solid"><p>从上面的控制流程图可以看出，我们需要构建四个组件：</p><p>①关于taco的设计（这个类的设计放在后面）</p><p>②taco设计所需的原料</p><p>③处理设计请求的控制类</p><p>④展示所需要的视图模板</p><p><b style="background-color: black;color: white;">原料：Ingredient</b></p><p>taco配料的定义十分简洁，这里主要是为了引入Lombok库的使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ingredient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Type</span> type<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>        WRAP<span class="token punctuation">,</span>PROTEIN<span class="token punctuation">,</span>VEGGIES<span class="token punctuation">,</span>CHEESE<span class="token punctuation">,</span>SAUCE    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: silver;">@RequiredArgsConstructor</b>：构造函数注解，生成含有特殊参数的构造器。一般是指被final修饰的参数</p><p><b style="color: silver;">@Data</b>：这是一个组合注解。加了data就等同于加了以下几个注解</p><ul><li>@Getter/@Setter</li><li>@ToString</li><li>@EqualsAndHashCode</li><li>@RequiredArgsConstructor</li></ul><p><b style="background-color: black;color: white;">设计结果：Taco</b></p><p>这个类主要是用来表示我们在设计页面所设计出来的taco</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Taco</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ingredients<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="background-color: black;color: white;">控制器：DesignTacoController</b></p><p>为了完成客户的设计taco需求，我们需要处理客户来自/design页面的请求。所以控制器需要完成以下几个功能：</p><ul><li>处理来自”/design”的http请求</li><li>构建配料的列表</li><li>处理请求，将配料的数据传递给需要渲染为HTML的视图模板design.html，并且发送给请求的web浏览器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Ingredient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Ingredient<span class="token punctuation">.</span>Type</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Taco</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/design"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DesignTacoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showDesignFrom</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 构建配料列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Ingredient</span><span class="token punctuation">&gt;</span></span> ingredientList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Ingredient</span><span class="token punctuation">(</span><span class="token string">"FLTO"</span><span class="token punctuation">,</span> <span class="token string">"Flour Tortilla"</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>WRAP<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Ingredient</span><span class="token punctuation">(</span><span class="token string">"COTO"</span><span class="token punctuation">,</span> <span class="token string">"Corn Tortilla"</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>WRAP<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Ingredient</span><span class="token punctuation">(</span><span class="token string">"GRBF"</span><span class="token punctuation">,</span> <span class="token string">"Ground Beef"</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>PROTEIN<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Ingredient</span><span class="token punctuation">(</span><span class="token string">"CARN"</span><span class="token punctuation">,</span> <span class="token string">"Carnitas"</span><span class="token punctuation">,</span> <span class="token class-name">Ingredient<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span>PROTEIN<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Ingredient</span><span class="token punctuation">(</span><span class="token string">"TMTO"</span><span class="token punctuation">,</span> <span class="token string">"Diced Tomatoes"</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>VEGGIES<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Ingredient</span><span class="token punctuation">(</span><span class="token string">"LETC"</span><span class="token punctuation">,</span> <span class="token string">"Lettuce"</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>VEGGIES<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Ingredient</span><span class="token punctuation">(</span><span class="token string">"CHED"</span><span class="token punctuation">,</span> <span class="token string">"Cheddar"</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>CHEESE<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Ingredient</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">,</span> <span class="token string">"Monterrey Jack"</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>CHEESE<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Ingredient</span><span class="token punctuation">(</span><span class="token string">"SLSA"</span><span class="token punctuation">,</span> <span class="token string">"Salsa"</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>SAUCE<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Ingredient</span><span class="token punctuation">(</span><span class="token string">"SRCR"</span><span class="token punctuation">,</span> <span class="token string">"Sour Cream"</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>SAUCE<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token class-name">Ingredient<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将数据加入视图模板中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> type <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>            model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               <span class="token function">filterByType</span><span class="token punctuation">(</span>ingredientList<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 将当前设计页面的表单数据封装在Taco对象中</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"design"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Taco</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"design"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Ingredient</span><span class="token punctuation">&gt;</span></span> <span class="token function">filterByType</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Ingredient</span><span class="token punctuation">&gt;</span></span> ingredients<span class="token punctuation">,</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ingredients            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>x<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: silver;">@Slf4j</b>：会在该类自动生成一个SLF4J的logger。与下面的代码等价</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span><span class="token class-name">DesignTacoController</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">DesignTacoController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><b style="background-color: black;color: white;">视图模板：design.html</b></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Taco Cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/styles.css}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Design Your Taco!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/images/TacoCloud.png}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${design}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient-group<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wraps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Designate your warp:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient : ${wrap}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredients<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.id}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.name}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>INGREDIENT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient-group<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>proteins<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Designate your protein:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient : ${protein}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredients<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.id}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.name}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>INGREDIENT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient-group<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cheeses<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Designate your cheese:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient : ${cheese}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredients<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.id}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.name}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>INGREDIENT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient-group<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>veggies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Designate your veggies:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient : ${veggies}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredients<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.id}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.name}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>INGREDIENT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient-group<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sauces<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Select your sauce:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient : ${sauce}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredients<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.id}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.name}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>INGREDIENT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Name your taco creation:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>filed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*{name}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Submit your taco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察以下模板渲染后的html文件：</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210409114053.jpg" style="width:80%;border:solid"><p>在design.html中的核心渲染部分，就是配料的选择</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredient : ${warp}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredients<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.id}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${ingredient.name}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>INGREDIENT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的th:each将对ingredient.warp的每一个html元素进行迭代渲染。那么我们从DesignTacoController传递来的数据，将会被渲染成下面的效果：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredients<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FLTO<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Flour Tortilla<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ingredients<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>COTO<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Corn Tortilla<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然我们设计出了design页面的视图，但是页面的表单post请求我们依旧没有处理！所以在提交表单时会报错！</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210410100830.jpg" style="width:90%;border:solid"><p>所以我们接下来需要进行表单请求的处理</p><h3 id="处理表单请求"><a href="#处理表单请求" class="headerlink" title="处理表单请求"></a>处理表单请求</h3><p>①<b style="color: greenyellow;">处理来自design表单的请求</b></p><p>处理请求必然少不了控制器，这里我们就在（DesingTacoController）设置处理表单请求的控制器，让其在后台展示当前设计taco的信息，以及将客户端浏览器重定向到”orders/current/“页面。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">processDesign</span><span class="token punctuation">(</span><span class="token class-name">Taco</span> design<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Processing desing:"</span> <span class="token operator">+</span> design<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/orders/current"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述代码看出，只要表单提交之后，表单数据将会被封装在Taco对象中。processDesign会在后端控制台打印出日志信息，表明当前设计design。并且将页面重定向至<code>/orders/current/</code></p><p>②<b style="color: greenyellow;">来自processDesign重定向的get请求</b></p><p><b style="color: green;">2.1接下来我们需要继续编写一个控制器，也接受来自上面重定向的get请求</b></p><p>（为了给之前的设计生成一个当前订单）处理请求需要做到下面两点：</p><ol><li>将当前订单页面的数据封装在Order对象中</li><li>构建返回给请求的orderFrom.html页面模板</li></ol><p><b style="background-color: black;color: white;">当前订单：Order</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> zip<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ccNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ccExpiration<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ccCVV<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="background-color: black;color: white;">订单控制器：OrderController</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/orders"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/current"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">orderForm</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 封装当前订单页面视图数据</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"orderForm"</span><span class="token punctuation">;</span>     <span class="token comment">// 返回当前订单视图orderForm.html</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: green;">2.2很显然，接下来的任务就是orderForm.html视图模板的编写</b></p><p><b style="background-color: black;color: white;">订单页面模板：orderForm.html</b></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Taco Cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/styles.css}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/orders}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${order}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Order your taco creations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/images/TacoCloud.png}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/design}<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>another<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Desing another taco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#fields.hasErrors()}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>validationError<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请求正确填写表单数据！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Deliver my taco masterpieces to ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*{name}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>street<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Street:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*{street}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>City:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*{city}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>State:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*{state}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zip<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Zip:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*{zip}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ccNumber<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ccNumber:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*{ccNumber}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ccExpiration<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ccExpiration:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*{ccExpiration}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ccCVV<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ccCVV:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*{ccCVV}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit Order<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个模板会在”/orders/current/“页面生成一个订单信息的表单，我们继续需要（OrderController）创建一个处理请求的控制器方法，来处理来自orderForm表单的post请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Processing Order:"</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="校验表单数据（存在BUG暂时跳过）"><a href="#校验表单数据（存在BUG暂时跳过）" class="headerlink" title="校验表单数据（存在BUG暂时跳过）"></a>校验表单数据（存在BUG暂时跳过）</h3><p>为了提高系统的安全性、保证数据的合法性，我们需要在客户端浏览器完成表单数据的校验！</p><p>Spring支持Java的Bean校验的API（Bean Validation API或者是JSR-303）。我们就不需要再显式的为校验机制编写逻辑代码！至于要导入相应的依赖即可</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.validation/validation-api --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>7.0.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于更加强大的SpringBoot来说，我们甚至不需要显式导入依赖，因为在spring-boot-starter-web已经集成了JSR-303和Validation API的Hibernate实现。</p><p>为组件类（Taco、Order）增加校验</p><p><b style="background-color: black;color: white;">校验类：Taco</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Size</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Taco</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">"Taco最少为4字符"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">"最少选择一种配料"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ingredients<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="background-color: black;color: white;">校验类：Order</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">CreditCardNumber</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Digits</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"不可空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"不可空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"不可空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"不可空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"不可空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> zip<span class="token punctuation">;</span>    <span class="token annotation punctuation">@CreditCardNumber</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入正确的信用卡号"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ccNumber<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"^(0[1-9]|1[0-2])([\\/])([1-9][0-9])$"</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">"格式位MM/YY"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ccExpiration<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Digits</span><span class="token punctuation">(</span>integer <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>fraction <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">"三位有效的数字"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ccCVV<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写好了数据校验机制之后，我们还需要对校验的时机做出规定。也就是解决什么时候校验的问题？</p><p>修改控制器的执行校验时机：在每一次绑定表单数据之后，调用对应的post方法之前。如果此时出现校验错误，系统会捕获Errors将信息传递给对应的post请求处理方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token comment">// 前端表单传递来的数据 design</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">processDesign</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span>  <span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"/design"</span><span class="token punctuation">)</span><span class="token class-name">Taco</span> design<span class="token punctuation">,</span> <span class="token class-name">Errors</span> errors<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"/design"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Processing desing:"</span> <span class="token operator">+</span> design<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/orders/current"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@PostMapping</span><span class="token comment">// 前端表单传递来的数据 order</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">Errors</span> errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"orderForm"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Processing Order:"</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图控制器"><a href="#视图控制器" class="headerlink" title="视图控制器"></a>视图控制器</h3><p>在上面的叙述过程中，我们已经创建了三个控制器：HomeController、DesignTaacoController、OrderController。除了HomeController之外，其他两个控制器都具有类似的编程模型：完成填充模型或者是处理输入。而对于HomeController来说，它只是简单的做了一个将请求转发到一个视图，而没有其他功能。对于这种 <strong>只做了一个将请求转发到一个视图</strong>的控制器，我们可以实现视图控制器完成任务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tacocloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ViewControllerRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于实现视图控制器，我们需要实现一个 <strong>WebMvcConfigurer</strong>接口，这个接口提供所有接口方法的默认实现，我们所要做的就是，在实现接口功能时覆盖相应的方法即可！</p><p>这里的 <strong>WebConfig</strong>与 <strong>HomeController</strong>功能一致。</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表的受限和推广</title>
      <link href="posts/27874.html"/>
      <url>posts/27874.html</url>
      
        <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p><code>栈</code>：只允许在一端（栈顶）操作的线性表。</p><p><code>栈顶</code>：允许增删的一端。</p><p><code>空栈</code>：不含任何元素的空表。</p><p>栈的数学性质：入栈的n个元素，有多少个不同排列方式的出栈序列！</p><h2 id="栈的基本知识"><a href="#栈的基本知识" class="headerlink" title="栈的基本知识"></a>栈的基本知识</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>c语言定义的栈的基本操作</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">DestroyStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Java语言定义的栈的基本操作</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始状态与基本操作的关系"><a href="#初始状态与基本操作的关系" class="headerlink" title="初始状态与基本操作的关系"></a>初始状态与基本操作的关系</h3><p>1）假设我们规定S.top = -1为栈顶的初始化设置，那么代表着栈顶从0开始计数，栈顶指针始终指向栈顶元素！</p><p><code>栈顶指针</code>：S.top = -1</p><p><code>进栈操作</code>：先将栈顶指针移动到下一位，在赋值元素 S.data[++S.top] = e</p><p><code>出栈操作</code>：先将出栈元素保存，再将栈顶指针移动到下一位 e = S.data[S.top–]</p><p><code>栈空、满</code>：空-&gt; S.top == -1 满-&gt; S.top == MaxSize-1</p><p>2）假设我们规定S.top = 0为栈顶的初始化设置，那么代表着栈顶从1开始计数，栈顶指针始终指向栈顶元素的下一个存储单元！</p><p><code>栈顶指针</code>：S.top = 0</p><p><code>进栈操作</code>：先赋值元素，在将栈顶指针移动到下一位 S.data[S.top++] = e</p><p><code>出栈操作</code>：先将栈顶指针移动到下一位，再将出栈元素保存 e = S.data[–S.top]</p><p><code>栈空、满</code>：空-&gt; S.top == 0 满-&gt; S.top == MaxSize</p><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Elemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span> SqStack<span class="token punctuation">;</span>SqStack S<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C语言实现"><a href="#C语言实现" class="headerlink" title="C语言实现"></a>C语言实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Elemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span> SqStack<span class="token punctuation">;</span>SqStack S<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span> <span class="token punctuation">{</span>    S<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>Elemtype<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizeOf</span><span class="token punctuation">(</span>Elemtype<span class="token punctuation">)</span><span class="token operator">*</span>MaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span>Elemtype e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> MaxSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span>Elemtype <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">,</span>Elemtype <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    e <span class="token operator">=</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DestroyStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top <span class="token operator">==</span> data<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StackOverflowError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> d<span class="token operator">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            d <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ShareStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top1<span class="token punctuation">,</span>top2<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        top1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        top2 <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>top1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>top2 <span class="token operator">==</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>top2 <span class="token operator">-</span> top1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ins1</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StackOverFlowException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span><span class="token operator">++</span>top1<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ins2</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StackOverFlowException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span><span class="token operator">--</span>top2<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">del1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>top1<span class="token operator">--</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">del2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>top2<span class="token operator">++</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><ul><li>链表结构</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">{</span>    Elemtype data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">*</span>LiSatck<span class="token punctuation">;</span>LiStack S<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于链式的结构有以下的优点：</p><p>1）增删都在表头完成，效率高</p><p>2）基本不会存在上溢的问题</p><h3 id="C实现"><a href="#C实现" class="headerlink" title="C实现"></a>C实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitStack_L</span><span class="token punctuation">(</span>LiStack S<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Java实现-1"><a href="#Java实现-1" class="headerlink" title="Java实现"></a>Java实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>   <span class="token comment">// 始终指向栈顶的head引用</span>    <span class="token comment">// 链表的组成结点</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token class-name">E</span> data<span class="token punctuation">;</span>        <span class="token class-name">Node</span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">E</span> data<span class="token punctuation">,</span> <span class="token class-name">Node</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 不含头结点的链表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// 堆栈为空就是栈顶元素为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 采用类似头插法生成列表的方式，让head始终保持栈顶位置</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            head <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            n<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">E</span> elem <span class="token operator">=</span> h<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        h <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> elem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node</span> n <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            head <span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p><code>队列</code>：一种操作受限制的线性表，只允许在<code>队头</code>出队<code>队尾</code>入队！</p><p><code>队头</code>：允许删除的一端</p><p><code>队尾</code>：允许插入的一端</p><h2 id="队列基本知识"><a href="#队列基本知识" class="headerlink" title="队列基本知识"></a>队列基本知识</h2><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>c类语言</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GetHead</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Java语言</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">initQ</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">insQueue</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">delQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始状态与基本操作的关系-1"><a href="#初始状态与基本操作的关系-1" class="headerlink" title="初始状态与基本操作的关系"></a>初始状态与基本操作的关系</h3><p>1）假设我们设置初始状态下，Q.front = Q.rear = 0！此时队尾指针始终指向队尾元素的下一个存储单元！</p><p><code>初始状态</code>：Q.front = Q.rear = 0</p><p><code>队空条件</code>：Q.front == Q.rear </p><p><code>队满条件</code>：存在三种实现方式（这里的队列是循环队列结构）</p><p><code>入队操作</code>：Q.data = x ; Q.rear = (Q.rear+1)%MaxSize;</p><p><code>出队操作</code>：x = Q.data ; Q.front = (Q.front+1)%MaxSize</p><p>通过模运算就可以实现类似于<code>(0,1,2,……,MaxSize-1)</code>的周期序列</p><p>2）假设我们设置初始状态下，Q.front = 0、Q.rear = MaxSize-1！此时队尾指针始终指向队尾元素！</p><p><code>初始状态</code>：Q.front = 0、Q.rear = MaxSize-1</p><p><code>队空条件</code>：Q.front == (Q.rear+1)%MaxSize</p><p><code>队满条件</code>：存在三种实现方式（这里的队列是循环队列结构）</p><p><code>入队操作</code>：Q.rear = (Q.rear+1)%MaxSize ; Q.data = x </p><p><code>出队操作</code>：x = Q.data ; Q.front = (Q.front+1)%MaxSize</p><p><b style="color: red;">注：</b><strong>因为无论是哪一种初始状态，队头指针始终指向队头，所以两种状态下的出队操作保持一致！</strong></p><h2 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h2><h3 id="C类语言实现"><a href="#C类语言实现" class="headerlink" title="C类语言实现"></a>C类语言实现</h3><p>①假设初始状态一</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Elemtype data <span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span><span class="token punctuation">}</span> SqQueue<span class="token punctuation">;</span>SqQueue Q<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">QueueFull</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 补充操作，用于判断队列是否满，具体实现会在后面展出三种方案，目前可以直接使用</span><span class="token punctuation">}</span>bool <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>Elemtype x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">QueueFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>       <span class="token comment">//循环周期操作：初始值为0、步长为1、循环周期为MaxSize的序列</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>Elemtype <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    x <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">GetHead</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">,</span>Elemtype <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    x <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: darkred;">QueueFull(SqQueue Q)判断操作的三种实现方案</b></p><p>1）牺牲一个存储空间：保留最后一个位置<code>Q.data[MaxSize-1]</code>以区别和队空的判断条件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 队空</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 队满</span>bool <span class="token function">QueueFull</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>MaxSize <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）增加标记元素个数的辅助变量size：此时队空和队满都有各自的标准，结构体也要做响应修正，以及进出队size变量的变化。<strong>入队：size++、出队：size–。</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Elemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span> SqQueue<span class="token punctuation">;</span><span class="token comment">// 队空</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 队满</span>bool <span class="token function">QueueFull</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>size <span class="token operator">==</span> MaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）对于数组空间的每一位元素添加进出队标记tag。<strong>出队：flag == 0、入队：flag == 1。</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Elemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span> SqQueue<span class="token punctuation">;</span><span class="token comment">// 队空</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>front <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 队满</span>bool <span class="token function">QueueFull</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>front <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②假设初始状态二</p><p>1）牺牲两个存储空间：保留最后一个位置<code>Q.data[MaxSize-1]</code>、倒数第二个位置<code>Q.data[MaxSize-2]</code>以区别和队空的判断条件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 队空</span>bool <span class="token class-name">QueueEmpty</span><span class="token punctuation">(</span><span class="token class-name">SqQueue</span> <span class="token class-name">Q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>front <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token class-name">MaxSize</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 队满</span>bool <span class="token class-name">QueueFull</span><span class="token punctuation">(</span><span class="token class-name">SqQueue</span> <span class="token class-name">Q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>front <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token class-name">MaxSize</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）增加标记元素个数的辅助变量size：此时队空和队满都有各自的标准，结构体也要做响应修正，以及进出队size变量的变化。<strong>入队：size++、出队：size–。</strong></p><p>3）对于数组空间的每一位元素添加进出队标记tag。<strong>出队：flag == 0、入队：flag == 1。</strong></p><p><b style="color: yellowgreen;">代码保持不变！</b></p><h3 id="Java语言实现"><a href="#Java语言实现" class="headerlink" title="Java语言实现"></a>Java语言实现</h3><p>1）牺牲一个存储空间：保留最后一个位置<code>data[capacity]</code>以区别和队空的判断条件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqQueue1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>    <span class="token comment">// capacity：表示可用的队列空间（因为这里是采取牺牲存储空间的方式）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>front <span class="token operator">==</span> rear<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFullQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> data<span class="token punctuation">.</span>length <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insQueue</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFullQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StackOverflowError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">delQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">E</span> elem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">return</span> elem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）增加标记元素个数的辅助变量size：此时队空和队满都有各自的标准，属性也要做响应修正，以及进出队size变量的变化。<strong>入队：size++、出队：size–。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SqQueue2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFullQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insQueue</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFullQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StackOverflowError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">delQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">E</span> elem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> elem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）对于添加进出队标记flag。<strong>出队：flag == 0、入队：flag == 1。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SqQueue3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> flag<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>front <span class="token operator">==</span> rear <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFullQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>front <span class="token operator">==</span> rear <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insQueue</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFullQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StackOverflowError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">delQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">E</span> elem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> elem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h2><p>链表实现队列的好处在于：基本不需要考虑队列满的情况，只需要留意判断队空的情况！并且对于队列的出入队，也可以等价于队头和队尾的删除和插入！</p><h3 id="C类实现"><a href="#C类实现" class="headerlink" title="C类实现"></a>C类实现</h3><p>对于含有头结点的单链表，将会比较适合实现队列的结构！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span>  <span class="token punctuation">{</span>    Elemtype data<span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>LinkNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span>  <span class="token punctuation">{</span>    LinkNode <span class="token operator">*</span>front<span class="token punctuation">,</span><span class="token operator">*</span>rear<span class="token punctuation">;</span><span class="token punctuation">}</span>LiQueue<span class="token punctuation">;</span>LiQueue Q<span class="token punctuation">;</span><span class="token comment">// 带有头结点的链表</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>LiQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>LiQueue Q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LiQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>Elemtype e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkNode <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token operator">-&gt;</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    n<span class="token operator">-&gt;</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> n<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>LiQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>Elemtype <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    e <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">GetHead</span><span class="token punctuation">(</span>LiQueue Q<span class="token punctuation">,</span>Elemtype <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">return</span> Q<span class="token punctuation">.</span>front<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Java实现-2"><a href="#Java实现-2" class="headerlink" title="Java实现"></a>Java实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token class-name">E</span> data<span class="token punctuation">;</span>        <span class="token class-name">Node</span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token class-name">Node</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 不带头结点的链表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>front <span class="token operator">==</span> rear<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 队尾插入</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span> r <span class="token operator">=</span> rear<span class="token punctuation">;</span>        <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rear <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            front <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 队头删除</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> f <span class="token operator">=</span> front<span class="token punctuation">;</span>        front <span class="token operator">=</span> front<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">E</span> elem <span class="token operator">=</span> f<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        f <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> elem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmptyQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> front<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h1><h2 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">bracesMatch</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> braces<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> braces<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">']'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ch<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Polish-Notation"><a href="#Polish-Notation" class="headerlink" title="Polish Notation"></a>Polish Notation</h2><p>中缀表达式转化为逆波兰式<code>(Reverse Polish Notation)</code></p><p><code>toRPN</code>接受的表达式必须是将各字符之间必须存在空格分离开！</p><p>算法思想：</p><p>1）扫描数组，当字符是操作数时，直接将操作数加入rpn数组</p><p>2）当字符是界限符时，是<code>(</code>直接压入operator栈。是<code>)</code>则依次将operator中的操作符弹出加入rpn数组，直至遇到<code>(</code>停止！并且弹出<code>(</code>丢弃</p><p>3）当字符是操作符时，依次弹出栈中大于等于当前操作符的优先级的所有运算符，加入rpn数组，直至栈空或者遇到字符<code>(</code>，再将当前的字符压入operator栈</p><p>4）当扫描完数组，若operator栈不为空，则将所有的操作符依次弹出，加入rpn数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">stack</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> RPN <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toRPN</span><span class="token punctuation">(</span><span class="token class-name">String</span> express<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 运算符存储栈</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> operator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 逆波兰式存储数组</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> rpn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 中缀表达式的字符串数组形式</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ie <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 中缀表达式数组扫描，算法核心代码</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOperator</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                rpn<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                operator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>operator<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    rpn<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>operator<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>operator<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    operator<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>operator<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token operator">&amp;&amp;</span><span class="token function">comparePriority</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>operator<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                      <span class="token operator">&amp;&amp;</span><span class="token operator">!</span>operator<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    rpn<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>operator<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                operator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>operator<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rpn<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>operator<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> rpn<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span>objects<span class="token punctuation">.</span>length<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 操作符判断方法(+ - * / ( ) )</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isOperator</span><span class="token punctuation">(</span><span class="token class-name">String</span> op<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> op<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\p{Punct}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 比较运算符优先级（op1的优先级大于等于op0）</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">comparePriority</span><span class="token punctuation">(</span><span class="token class-name">String</span> op0<span class="token punctuation">,</span><span class="token class-name">String</span> op1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getPriorVal</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">getPriorVal</span><span class="token punctuation">(</span>op0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 为运算符规定优先级（+ - 为0级 * / 为1级）</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getPriorVal</span><span class="token punctuation">(</span><span class="token class-name">String</span> op<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token operator">||</span>op<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token operator">||</span>op<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RPN</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RPN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">toRPN</span><span class="token punctuation">(</span><span class="token string">"A + B - C * D / E + F"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逆波兰式计算"><a href="#逆波兰式计算" class="headerlink" title="逆波兰式计算"></a>逆波兰式计算</h2><p>栈结构实现逆波兰式的计算</p><p>①从左扫描数组</p><p>②判断扫描的字符</p><ul><li>若扫描的是操作数，压入栈</li><li>若扫描的是操作符，弹出两个操作数，进行运算，将结果加入栈顶</li></ul><p>③扫描完毕后，弹出最终结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> RPN <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calcRPN</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rpn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> r <span class="token operator">:</span> rpn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOperator</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 左操作数 右操作数 操作符 </span>                    <span class="token keyword">int</span> right <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                    <span class="token keyword">int</span> left <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token operator">-</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token operator">*</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token operator">/</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RPN</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RPN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// console : 13    </span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">calcRPN</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">toRPN</span><span class="token punctuation">(</span><span class="token string">"15 - ( 2 + ( 1 + 1 ) * 3 ) / 4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归栈"><a href="#递归栈" class="headerlink" title="递归栈"></a>递归栈</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fiboracci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fiboracci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fiboracci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// console : fiboracci(5) = 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210406174136.jpg" style="width:80%;border:solid"><h1 id="队列应用"><a href="#队列应用" class="headerlink" title="队列应用"></a>队列应用</h1><h2 id="树的层次遍历"><a href="#树的层次遍历" class="headerlink" title="树的层次遍历"></a>树的层次遍历</h2><h2 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h2><h2 id="先来先服务"><a href="#先来先服务" class="headerlink" title="先来先服务"></a>先来先服务</h2><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><h2 id="矩阵压缩存储"><a href="#矩阵压缩存储" class="headerlink" title="矩阵压缩存储"></a>矩阵压缩存储</h2><ul><li><b style="color: chocolate;">对称矩阵的压缩存储</b></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">compressSymmetricMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> symmetricMatrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compressed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                compressed<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                compressed<span class="token punctuation">[</span>j<span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> compressed<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><b style="color: chocolate;">下三角矩阵的压缩存储</b></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">compressTriangularMatrixDown</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> triangularMatrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compressed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                compressed<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    compressed<span class="token punctuation">[</span>compress<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> triangularMatrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> compressed<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><b style="color: chocolate;">上三角矩阵压缩存储</b></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">compressTriangularMatrixUp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> triangularMatrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compressed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                compressed<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>j<span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    compressed<span class="token punctuation">[</span>compress<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> triangularMatrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> compressed<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣刷题</title>
      <link href="posts/46256.html"/>
      <url>posts/46256.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h2 id="刷题顺序图"><a href="#刷题顺序图" class="headerlink" title="刷题顺序图"></a>刷题顺序图</h2><h3 id="一-数组"><a href="#一-数组" class="headerlink" title="一. 数组"></a>一. 数组</h3><table><thead><tr><th>题目分类</th><th>题目编号</th></tr></thead><tbody><tr><td>数组的遍历</td><td>485、495、414、628</td></tr><tr><td>统计数组中的元素</td><td>645、697、448、442、41、274</td></tr><tr><td>数组的改变、移动</td><td>453、665、283</td></tr><tr><td>二维数组及滚动数组</td><td>118、119、661、598、419</td></tr><tr><td>数组的旋转</td><td>189、396</td></tr><tr><td>特定顺序遍历二维数组</td><td>54、59、498</td></tr><tr><td>二维数组变换</td><td>566、48、73、289</td></tr><tr><td>前缀和数组</td><td>303、304、238</td></tr></tbody></table><h2 id="力扣刷题"><a href="#力扣刷题" class="headerlink" title="力扣刷题"></a>力扣刷题</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>为了后面的复习以及刷题复盘，我将自己解题的答案及思路全部放在了自己的仓库中👉 <a href="https://gitee.com/matemaster/master-depository/tree/master/leetcode/">力扣刷题</a></p><h3 id="一-数组-1"><a href="#一-数组-1" class="headerlink" title="一. 数组"></a>一. 数组</h3><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><ul><li>485</li></ul><p>给定一个二进制数组， 计算其中最大连续 1 的个数。</p><blockquote><p>示例：<br>输入：[1,1,0,1,1,1]<br>输出：3<br>解释：开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.</p></blockquote><p>解题思路：</p><p>使用一个连续1的计数器i和最大连续数标志max！通过对计数器i记录连续1的个数！当数组元素为1时，计数器i+1当数组元素为0时，计数器需要重新清零计数。并且更新最大连续1数max，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMaxConsecutiveOnes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 i<span class="token operator">++</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span>max<span class="token punctuation">)</span>                     max <span class="token operator">=</span> i<span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>                           <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>495</li></ul><p>在《英雄联盟》的世界中，有一个叫 “提莫” 的英雄，他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。现在，给出提莫对艾希的攻击时间序列和提莫攻击的中毒持续时间，你需要输出艾希的中毒状态总时长。</p><p>你可以认为提莫在给定的时间点进行攻击，并立即使艾希处于中毒状态。</p><blockquote><p>示例1:</p><p>输入: [1,4], 2<br>输出: 4<br>原因: 第 1 秒初，提莫开始对艾希进行攻击并使其立即中毒。中毒状态会维持 2 秒钟，直到第 2 秒末结束。<br>第 4 秒初，提莫再次攻击艾希，使得艾希获得另外 2 秒中毒时间。<br>所以最终输出 4 秒。<br>示例2:</p><p>输入: [1,2], 2<br>输出: 3<br>原因: 第 1 秒初，提莫开始对艾希进行攻击并使其立即中毒。中毒状态会维持 2 秒钟，直到第 2 秒末结束。<br>但是第 2 秒初，提莫再次攻击了已经处于中毒状态的艾希。<br>由于中毒状态不可叠加，提莫在第 2 秒初的这次攻击会在第 3 秒末结束。<br>所以最终输出 3 。</p><p>提示：</p><p>你可以假定时间序列数组的总长度不超过 10000。<br>你可以假定提莫攻击时间序列中的数字和提莫攻击的中毒持续时间都是非负整数，并且不超过 10,000,000。</p></blockquote><p>解题思路：</p><p>我们从题目中得出，数组元素为中毒的开始时刻，那么当时间间隔大于中毒的持续时间<code>duration</code>时，我们的整个中毒过程持续时间直接就是：数组的长度✖中毒的持续时间<code>total</code>。但是当其中的时间间隔有小于中毒持续时间的情况时，也就是说中毒效果存在叠加，那么我们就要在上面的total就需要去除重复时间。</p><p>可以看出，题目的难度就聚集在如何确定中毒的叠加时间<code>repeat</code>！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPoisonedDuration</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> timeSeries<span class="token punctuation">,</span> <span class="token keyword">int</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> repeat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>timeSeries<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>timeSeries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>duration<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> timeSeries<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                repeat <span class="token operator">+=</span>  <span class="token punctuation">(</span>timeSeries<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> duration <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> timeSeries<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> timeSeries<span class="token punctuation">.</span>length<span class="token operator">*</span>duration <span class="token operator">-</span> repeat<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 任意时刻i中毒的结束时刻：endForI = (timeSeries[i]+duration-1)</span><span class="token comment">// 任意时刻i+1中毒的开始时刻：startForIplus = timeSeries[i+1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: chocolate;">增强可读性版本</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPoisonedDuration</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> timeSeries<span class="token punctuation">,</span> <span class="token keyword">int</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> repeat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>timeSeries<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> endForI <span class="token operator">=</span> <span class="token punctuation">(</span>timeSeries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>duration<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> startForIplus <span class="token operator">=</span> timeSeries<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>endForI <span class="token operator">&gt;=</span> startForIplus<span class="token punctuation">)</span>                repeat <span class="token operator">+=</span>  endForI <span class="token operator">-</span> startForIplus <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> timeSeries<span class="token punctuation">.</span>length<span class="token operator">*</span>duration <span class="token operator">-</span> repeat<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>414</li></ul><p>给你一个非空数组，返回此数组中 <strong>第三大的数</strong> 。如果不存在，则返回数组中最大的数。</p><blockquote><p>示例 1:<br>输入：[3, 2, 1]<br>输出：1<br>解释：第三大的数是 1 。</p><p>示例 2：</p><p>输入：[1, 2]<br>输出：2<br>解释：第三大的数不存在, 所以返回最大的数 2 。</p><p>示例 3：</p><p>输入：[2, 2, 3, 1]<br>输出：1<br>解释：注意，要求返回第三大的数，是指在所有不同数字中排第三大的数。<br>此例中存在两个值为 2 的数，它们都排第二。在所有不同数字中排第三大的数为 1 。</p><p>提示：<br>1 &lt;= nums.length &lt;= 104<br>-231 &lt;= nums[i] &lt;= 231 - 1</p></blockquote><p>解题思路：</p><p>通过三次遍历的方式：第一次获取最大值，第二次获取第二大值，第三次获取第三大值！这里为了防止出现类似这种情况：<code>[1,2,3,4,Integer.MIN_VALUE]</code>，所以目标选值使用<code>Long.MIN_VALUE</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">thirdMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> first <span class="token operator">=</span><span class="token class-name">Long</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token class-name">Long</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> third<span class="token operator">=</span><span class="token class-name">Long</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> first<span class="token punctuation">)</span>                first <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> first<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> second<span class="token punctuation">)</span>                second <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> second<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> third<span class="token punctuation">)</span>                third <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>third <span class="token operator">==</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>third<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>628</li></ul><p>给你一个整型数组 nums ，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</p><blockquote><p>示例 1：</p><p>输入：nums = [1,2,3]<br>输出：6<br>示例 2：</p><p>输入：nums = [1,2,3,4]<br>输出：24<br>示例 3：</p><p>输入：nums = [-1,-2,-3]<br>输出：-6</p><p>提示：</p><p>3 &lt;= nums.length &lt;= 104<br>-1000 &lt;= nums[i] &lt;= 1000</p></blockquote><p>解题思路：</p><p>对于大于等于三个数的最大成绩：当数组全为非负数时，最大乘积等于三个最大数的乘积！当数组元素为负数时，最大乘积也是最大的三个负数的乘积！当包含正负数时，最大乘积一定等于最小的两个负数与最大值的乘积！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="统计数组元素"><a href="#统计数组元素" class="headerlink" title="统计数组元素"></a>统计数组元素</h4><p>集合 s 包含从 1 到 n 的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合 丢失了一个数字 并且 有一个数字重复 。</p><p>给定一个数组 nums 代表了集合 S 发生错误后的结果。</p><p>请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。</p><p>（在这个错误集合当中，只会存在一个重复数字和丢失数字）</p><blockquote><p>示例 1：</p><p>输入：nums = [1,2,2,4]<br>输出：[2,3]<br>示例 2：</p><p>输入：nums = [1,1]<br>输出：[1,2]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络应用层</title>
      <link href="posts/64831.html"/>
      <url>posts/64831.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p><code>URI</code>和<code>URL</code>的联系</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">mailto:</span> matemaster@163.com<span class="token header-name keyword">https:</span>//matemaster.cn/posts/52745.html<span class="token header-name keyword">ftp:</span>//ftp.sjtu.edu.cn<span class="token header-name keyword">news:</span>comp.infosystem.www.servers.unix<span class="token header-name keyword">telnet:</span>//124.70.110.117:443/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-uri" data-language="uri"><code class="language-uri"># 绝对URI格式http://user:pass@www.server.com:80/dir/index.htm?uid=1#ch1# user:pass ：登录信息验证# www.server.com ：服务器地址# 80 ：端口号# dir/index.htm ：带层次的文件路径# uid = 1 ：查询字符串# ch1 ：片段标识符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="持续性"><a href="#持续性" class="headerlink" title="持续性"></a>持续性</h2><p>非持续性连接：假设现在访问<code>https://matemaster.cn/posts/52745.html</code>页面，此页面大概含有60个资源对象</p><p>1）<code>华为浏览器</code>的http进程从<code>port:80</code>端口发起一个与 <code>mateamster.cn</code>的<code>TCP连接</code></p><p>2）华为浏览器客户端发出一个<code>https://matemaster.cn/posts/52745.html</code>请求报文</p><p>3）<code>Nginx</code>接受请求，从后端数据库获取请求资源封装成响应报文，并返回该响应报文</p><p>4）华为浏览器发起tcp连接关闭的请求，Nginx回应，并关闭连接。</p><p>5）华为浏览器分析<code>52745.html</code>的引用，并根据引用请求资源，重复上面四步，直至资源请求完毕！</p><p>也就是说：此次获取页面资源，大概需要<code>60个tcp连接</code></p><p>持续性连接：则是在上面的第四步发生不同，</p><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p><code>2xx</code>：正常</p><ul><li><strong>200 OK</strong>：浏览器请求被服务器正常返回</li><li><strong>204 No Content</strong>：请求正常响应，但是没有资源返回</li><li><strong>206 Partial Content</strong>：请求正常响应，返回需要的一部分资源</li></ul><p><code>3xx</code>：重定向</p><ul><li><strong>301 Moved Permaently</strong>：永久重定向</li><li><strong>302 Found</strong>：临时重定向</li><li><strong>303 See Other</strong></li><li><strong>304 Not Modified</strong>：资源找到，但请求不满足条件</li><li><strong>307 Temporary Redirect</strong></li></ul><p><code>4xx</code>：客户端错误</p><ul><li><strong>400 Bad Request</strong>：客户端请求存在语法错误</li><li><strong>401 Unauthorized</strong>：服务器需要验证客户端身份</li><li><strong>403 Forbidden</strong>：不允许请求该资源</li><li><strong>404 Not Found</strong>：服务器不存在请求的资源</li></ul><p><code>5xx</code>：服务器错误</p><ul><li><strong>500 Internal Server Error</strong>：服务器执行请求错误</li><li><strong>503 Service Unavailable</strong>：服务器繁忙</li></ul><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><b style="color: red;">HTTP协议是一种无状态的协议，简而言之就是，服务器不会记录浏览器的访问请求，即使是刚请求的浏览器，服务器依旧视为第一次请求访问！</b>但是<code>Cookie</code>引入，支持了HTTP状态，第一次华为浏览器访问阿里官网，阿里服务器会在响应报文中加入<code>cookie</code>字段，并且在阿里的后端数据库记录该cookie。同时华为浏览器在来自阿里服务器的响应报文中查找到<code>Set-Cookie: sid = 18967626</code>，并在浏览器的cookie管理中添加这个信息，以便于下次**@matemaster_pc**访问阿里官网时，将cookie加入到请求头中。阿里服务器在华为浏览器下一次访问时，进行数据库检索，如果存在cookie记录，那么阿里将会自动记录该浏览器的浏览记录，保持状态！</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210329191736.jpg" style="width:80%;border:solid"><h2 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h2><p>代理服务器的作用就是做<code>web缓存</code>。web缓存可以减轻接入英特网的压力，并且加快了客户端的响应速度！</p><p>这里为了保证<code>web缓存有效期</code>，我们的web缓存服务器，会向源服务器发送GET请求，并且在字段中存在<code>If-Modified-Since</code>与<code>Last-Modified</code>做对比，当不一致时说明缓存过期，那么将更新web缓存！</p><pre class="line-numbers language-wireshark" data-language="wireshark"><code class="language-wireshark"># 上一次修改时间Last-Modified: Mon, 29 Mar 2021 05:59:01 GMT# 假设上一次修改时间If-Modified-Since: Mon, 29 Mar 2021 05:59:01 GMT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210329184233.jpg" style="width:80% ;border:solid;"><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><p><code>start https://matemaster.cn</code></p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210329165927.jpg" style="width:80%;border:solid"><p>简单的<code>Wireshark抓包</code></p><p><code>GET /wireshark-labs/HTTP-wireshark-file1.html HTTP/1.1</code>请求报文：单行的简单报文</p><pre class="line-numbers language-wireshark" data-language="wireshark"><code class="language-wireshark">Hypertext Transfer Protocol    GET /wireshark-labs/HTTP-wireshark-file1.html HTTP/1.1        [Expert Info (Chat/Sequence): GET /wireshark-labs/HTTP-wireshark-file1.html HTTP/1.1]            [GET /wireshark-labs/HTTP-wireshark-file1.html HTTP/1.1]            [Severity level: Chat]            [Group: Sequence]        Request Method: GET        Request URI: /wireshark-labs/HTTP-wireshark-file1.html        Request Version: HTTP/1.1    Host: gaia.cs.umass.edu    Connection: keep-alive    Upgrade-Insecure-Requests: 1    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36 HBPC/11.0.3.301    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9    Accept-Encoding: gzip, deflate    Accept-Language: zh-CN,zh;q=0.9    [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html]    [HTTP request 1/2]    [Response in frame: 1037]    [Next request in frame: 1039]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>HTTP/1.1 200 OK (text/html)</code>响应报文</p><pre class="line-numbers language-wireshark" data-language="wireshark"><code class="language-wireshark">Hypertext Transfer Protocol    HTTP/1.1 200 OK        [Expert Info (Chat/Sequence): HTTP/1.1 200 OK]            [HTTP/1.1 200 OK]            [Severity level: Chat]            [Group: Sequence]        Response Version: HTTP/1.1        Status Code: 200        [Status Code Description: OK]        Response Phrase: OK    Date: Mon, 29 Mar 2021 11:28:02 GMT    Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.14 mod_perl/2.0.11 Perl/v5.16.3    Last-Modified: Mon, 29 Mar 2021 05:59:01 GMT    ETag: "80-5bea6940d9e00"    Accept-Ranges: bytes    Content-Length: 128        [Content length: 128]    Keep-Alive: timeout=5, max=100    Connection: Keep-Alive    Content-Type: text/html; charset=UTF-8    [HTTP response 1/2]    [Time since request: 0.270377000 seconds]    [Request in frame: 1033]    [Next request in frame: 1039]    [Next response in frame: 1040]    [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html]    File Data: 128 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除缓存后的第二次访问，获取file2.html</p><p><code>GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1</code>：多行文本</p><pre class="line-numbers language-wireshark" data-language="wireshark"><code class="language-wireshark">Hypertext Transfer Protocol    GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1        [Expert Info (Chat/Sequence): GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1]            [GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1]            [Severity level: Chat]            [Group: Sequence]        Request Method: GET        Request URI: /wireshark-labs/HTTP-wireshark-file2.html        Request Version: HTTP/1.1    Host: gaia.cs.umass.edu    Connection: keep-alive    Upgrade-Insecure-Requests: 1    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36 HBPC/11.0.3.301    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9    Accept-Encoding: gzip, deflate    Accept-Language: zh-CN,zh;q=0.9    [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html]    [HTTP request 1/1]    [Response in frame: 142]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>HTTP/1.1 200 OK (text/html)</code>响应报文</p><pre class="line-numbers language-wireshark" data-language="wireshark"><code class="language-wireshark">Hypertext Transfer Protocol    HTTP/1.1 200 OK        [Expert Info (Chat/Sequence): HTTP/1.1 200 OK]            [HTTP/1.1 200 OK]            [Severity level: Chat]            [Group: Sequence]        Response Version: HTTP/1.1        Status Code: 200        [Status Code Description: OK]        Response Phrase: OK    Date: Mon, 29 Mar 2021 11:48:18 GMT    Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.14 mod_perl/2.0.11 Perl/v5.16.3    Last-Modified: Mon, 29 Mar 2021 05:59:01 GMT    ETag: "173-5bea6940d9630"    Accept-Ranges: bytes    Content-Length: 371        [Content length: 371]    Keep-Alive: timeout=5, max=100    Connection: Keep-Alive    Content-Type: text/html; charset=UTF-8    [HTTP response 1/1]    [Time since request: 0.275678000 seconds]    [Request in frame: 140]    [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html]    File Data: 371 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h1><p>国内常见的邮件服务商</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">smtp.qq.comsmtp.163.comsmtp.aliyun.comsmtp.sina.com//关于国际知名的邮件，因为网络限制就不介绍了，国内的几个已经够用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h2><p>邮件系统的组成：<code>user-agent</code>、<code>mail server</code>、<code>SMTP</code></p><p>邮件的发送过程：以<code>matemaster@163.com</code>向<code>2099625007@qq.com</code>为例</p><p>1）首先，matemaster本地的用户代理，会将含有发送方和接收方信息，以及邮件主体信息的邮件报文<code>(SMTP)</code>。并且<strong>在25号端口建立与邮件服务器的tcp连接</strong>，发送给对应的网易邮件服务器，并且将报文存在服务器的报文队列当中</p><p>2）网易邮件服务器，将根据接收方信息，利用<code>tcp</code>连接将邮件报文发送给腾讯邮件服务器<code>(SMTP)</code></p><p>3）腾讯邮件服务器在收到邮件报文之后，主动将报文推送给对应接收方的用户代理<code>(SMTP)</code></p><p><code>SMTP</code>与<code>HTTP</code>之间区别在于：</p><p>①SMTP属于push协议，不可以主动从服务器端获取邮件，只能等待服务器推送！HTTP属于pull协议，可以主动向服务器请求获取资源！<br>②SMTP每个报文的内容必须是7位ASCII码格式</p><p><strong>Wireshark抓包</strong>看出<code>SMTP</code>报文信息：（就是<code>matemaster@163.com-&gt;user-agent</code>与网易邮件服务器的对话）👇</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210329150920.jpg" style="width:80%;border:solid ;"><p>标准的报文格式：</p><pre class="line-numbers language-smtp" data-language="smtp"><code class="language-smtp">From: matemaster@163.comTo: matemaster@qq.comSubject: This is a simple title!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h2><p>基于<code>telnet</code>命令可以使用SMTP协议向指定用户发送信息，完整演示效果，可以参看下图👇</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># telnet 服务器域名 端口号telnet smtp.163.com 25# 连接服务器成功之后，可以使用HELO指定向服务器发出指令helo 163.com# 登录邮箱用户auth login # 334 username:# 334 password:# 登录成功后，向指定的邮箱发送消息mail from: &lt;matemaster@163.com&gt;rcpt to: &lt;35679808@qq.com&gt;data # 邮件报文内容from: matemasterto: 35679808@qq.comsubject: mail titleThis is main content of mail message!.# send successful!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210329142131.jpg" style="width:80%; border:solid "><h2 id="基于python的邮件发送"><a href="#基于python的邮件发送" class="headerlink" title="基于python的邮件发送"></a>基于python的邮件发送</h2><p>这里暂时不支持附件传送，因为没有导入包</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> header<span class="token comment"># SMTP需要邮件服务商授权，获取一个授权码，自行百度</span>auth_passport <span class="token operator">=</span> <span class="token string">"邮件服务商的授权码"</span><span class="token comment"># 建立与qq服务商的SMTP联系</span>server <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"smtp.qq.com"</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token string">"35679808@qq.com"</span><span class="token punctuation">,</span>auth_passport<span class="token punctuation">)</span><span class="token comment"># 邮件参数：发送者、接收者、邮件标题</span>sendedr <span class="token operator">=</span> <span class="token string">'35679808@qq.com'</span>receiver <span class="token operator">=</span> <span class="token string">'matemaster@163.com'</span>subject <span class="token operator">=</span> <span class="token string">'Python SMTP 邮件发送测试代码'</span><span class="token comment"># 发送邮件</span>message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span><span class="token string">'Python send email test!'</span><span class="token punctuation">,</span><span class="token string">'plain'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span>receiver<span class="token punctuation">,</span>message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭与服务器的连接</span>server<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="邮件访问POP3"><a href="#邮件访问POP3" class="headerlink" title="邮件访问POP3"></a>邮件访问POP3</h2><p>POP3三个工作阶段</p><p>1）客户校验<code>authorization</code>：此时主要为了校验用户的身份</p><p>2）事务处理：取回SMTP报文、对报文进行删除标记和取消删除标记，获取邮件的统计信息</p><p>3）更新：在用户指向quit命令之后，邮件服务器会删除那些被删除标记的报文</p><p><b style="color: chocolate;">POP3用户代理与邮件服务器的对话过程</b></p><p><b style="color: blue;">C: telnet pop.163.com 110</b></p><p><b style="color: red;">S: +OK Welcome to coremail Mail Pop3 Server (163coms[blahblah])</b></p><p><b style="color: blue;">C: user matemaster-mail</b></p><p><b style="color: red;">S: +OK core mail </b></p><p><b style="color: blue;">C: pass matemaster-authorizationCode</b></p><p><b style="color: red;">S: +OK user successfully logged on（验证成功）或 S:-ERR Unable to log on（验证失败）</b></p><p><b style="color: blue;">C: list</b></p><p><b style="color: red;">S: 1 [980bytes] 2[990bytes] ……</b></p><p><b style="color: blue;">C: quit</b></p><p><b style="color: red;">S: +OK core mail</b></p><p><strong>POP3命令</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 登录用户的账号以及授权码user usermailpass authorization code# 事务处理阶段的命令list #列出邮件服务器的邮件  Server: 序号 [邮件字节数]stat #返回邮件服务器的状态（我使用的pop.163.com不支持这个）top n #列出第n个邮件的内容retr n #接受第n个邮件dele n #删除第n个邮件（这里只是做删除标记，在quit之后才会删除）quit #退出邮件服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h2><h3 id="基本服务"><a href="#基本服务" class="headerlink" title="基本服务"></a>基本服务</h3><p><code>DNS</code>提供了域名-&gt;ip的解析服务。主要由：DNS分布式数据库以及使得主机可以查询数据库的应用层协议构成。</p><p><code>DNS</code>建立在<code>UDP</code>协议之上进行网络传输，互联网端口<code>port:53</code></p><p>举个栗子<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>从应用层解释：本地主机<code>(@localhost)</code>向服务器请求<code>www.matemaster.cn/index.html</code>资源时，<code>DNS</code>的操作过程</p><p>1）<code>web browser:华为浏览器</code>向本地电脑的<code>DNS客户端</code>程序发送获取<code>www.matemaster.cn的ip地址</code>请求</p><p>2）本地电脑的<code>DNS客户端</code>向远端<code>DNS server</code>发送上述请求报文</p><p>3）<code>DNS server</code>从后端分布式数据库或者DNS缓存中获取ip，并封装成响应报文，返回给<code>DNS客户端</code></p><p>4)<code>web browser:华为浏览器</code>根据<code>DNS客户端</code>返回的<code>ip</code>与远端服务器<code>www.matemaster.cn</code>建立<code>tcp</code>连接</p><h3 id="额外服务"><a href="#额外服务" class="headerlink" title="额外服务"></a>额外服务</h3><p>除了<code>域名-&gt;ip的解析服务</code>，DNS支持：主机别名、邮件服务器别名、负载分配。</p><p><code>主机别名</code>：对于含有复杂hostname的主机，可以支持多别名的操作。而其中存在一个<code>规范主机名</code>和多个<code>主机别名</code>而DNS便是提供，将多个主机别名，转为对应的规范主机名。</p><p><code>邮件服务器别名</code>：为了让邮件用户可以自己定义好记的邮件名，我们就需要利用类似主机别名的方式，为邮件服务器提供别名操作，而在DNS记录中存在的MX记录，允许邮件服务器名和web服务器名相同。</p><p><code>负载分配</code>：简单理解：就是一个IP地址集合与同一个规范主机名相联系！（可以参考下面在Ubuntu系统下的nslookup alibaba.com）。从那里看出，一个<strong>alibaba.com</strong>对应了4个IP地址</p><h2 id="DNS分布式数据库"><a href="#DNS分布式数据库" class="headerlink" title="DNS分布式数据库"></a>DNS分布式数据库</h2><h3 id="分布式数据库结构"><a href="#分布式数据库结构" class="headerlink" title="分布式数据库结构"></a>分布式数据库结构</h3><p>DNS采取的是：<code>分布式、层次数据库</code>。层次：root、TLD、权威</p><p>看看例图<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210328145741.jpg" style="width:80%;border:solid"><p><code>root server</code>：提供了对应顶级域服务器的<code>ip</code></p><p><code>TLD</code>：顶级域服务器提供了存储了<code>主机ip</code>的权威服务器的<code>ip</code></p><p><code>权威服务器</code>：存储了<code>对应主机名的ip地址</code></p><p><code>本地DNS server</code>：虽然不属于分布式层次结构中的数据库，但是在DNS中起重要作用。与DNS缓存有关！</p><p>alibaba.com的DNS解析过程：</p><p>1）@matemaster_pc向本地DNS服务器发送请求，以获取alibaba.com域名的ip地址</p><p>2）本地DNS服务器先查询数据库，看是否存在对应ip地址的缓存。</p><ul><li><p>若存在直接返回给主机</p></li><li><p>若不存在则，向根服务器发送请求</p></li></ul><p>3）响应报文，获取com顶级域服务器的ip地址</p><p>4）向com顶级域发送请求报文</p><p>5）响应报文，获取alibaba.com权威服务器的ip地址</p><p>6）向权威服务器发送请求</p><p>7）响应报文，获取alibaba.com主机的ip地址</p><p>8）返回给@matemaster_pc</p><h3 id="分布式数据库的工作过程"><a href="#分布式数据库的工作过程" class="headerlink" title="分布式数据库的工作过程"></a>分布式数据库的工作过程</h3><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210328151824.jpg" style="width:80%;border:solid red"><p>在这里<code>alibaba.com</code>服务器的<code>ip</code>采取了负载分配的方式，我这里的对应ali的DNS服务器，以及ip如下<span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-ubuntu" data-language="ubuntu"><code class="language-ubuntu">matemaster@matemaster:~$ nslookup alibaba.comServer:        127.0.0.53Address:    127.0.0.53#53Non-authoritative answer:Name:    alibaba.comAddress: 106.11.223.101 106.11.208.151 203.119.129.109 203.119.215.82matemaster@matemaster:~$ nslookup -type=NS alibaba.comServer:        127.0.0.53Address:    127.0.0.53#53Non-authoritative answer:alibaba.com    nameserver = ns2.alibabadns.com.alibaba.com    nameserver = ns1.alibabadns.com.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DNS记录"><a href="#DNS记录" class="headerlink" title="DNS记录"></a>DNS记录</h2><p>DNS记录包含4元组：<code>[name,value,type,TTL]</code></p><p><b style="color: red;">type的值，决定了name-value之间的关系</b></p><p><code>type = A</code>：name是主机名，value是主机名对应的IP地址</p><p><code>type = NS</code>：name是域，value也是主机名——该域主机IP对应的权威服务器</p><p><code>type = CNAME</code>：name是主机别名，value是对应的规范主机名</p><p><code>type = MX</code>：name邮件服务器别名，value是对应的规范主机名</p><p>（1）当某个DNS服务器<code>server_it</code>不是<code>alibaba.com</code>的权威服务器，那么<code>server_it</code>必将包含两条记录：A和NS</p><p><code>NS(alibaba.com,ns1.alibabadns.com,NS,100)</code></p><p><code>A(ns1.alibabadns.com,198.11.138.254,A,100)</code></p><p>（2）当某个服务器<code>server_ali</code>是<code>alibaba.com</code>的权威服务器，那么<code>server_ali</code>一定含有A记录</p><p><code>A(alibaba.com,203.119.215.82,A,100)</code></p><p><b style="color: hotpink;">比如我在华为云域名服务器注册的域名matemaster.cn，在DNS系统数据库中至少存在两个关于我域名的记录：(matemaster.cn,ns1-huaweiclound-dns.net,NS)、<br>(ns1-huaweiclound-dns.net,198.70.153.255,A)</b></p><h2 id="DNS报文"><a href="#DNS报文" class="headerlink" title="DNS报文"></a>DNS报文</h2><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210328155528.jfif" style="width:80%"><h3 id="Wireshark抓包"><a href="#Wireshark抓包" class="headerlink" title="Wireshark抓包"></a>Wireshark抓包</h3><p>首先说下，这里的抓包操作，借鉴了计算机网络自顶向下方法：DNS实验。关于完整的实验文档我放在了自己的仓库当中，如果有需要的可以自己<code>git clone</code>。👉 <a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-28/wireshark%E5%AE%9E%E9%AA%8C%E6%96%87%E6%A1%A3-en">Wireshark实验报告文档</a></p><p>下面是我利用<strong>Wireshark</strong>抓取本地主机访问<code>matemaster.cn</code>主机的<code>DNS请求报文</code></p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210328195018.jpg" style="width:80%;border:solid"><pre class="line-numbers language-wireshark" data-language="wireshark"><code class="language-wireshark">Domain Name System (query)    Transaction ID: 0x49f1    Flags: 0x0100 Standard query        0... .... .... .... = Response: Message is a query        .000 0... .... .... = Opcode: Standard query (0)        .... ..0. .... .... = Truncated: Message is not truncated        .... ...1 .... .... = Recursion desired: Do query recursively        .... .... .0.. .... = Z: reserved (0)        .... .... ...0 .... = Non-authenticated data: Unacceptable    Questions: 1    Answer RRs: 0    Authority RRs: 0    Additional RRs: 0    Queries        matemaster.cn: type A, class IN            Name: matemaster.cn            [Name Length: 13]            [Label Count: 2]            Type: A (Host Address) (1)            Class: IN (0x0001)    [Response In: 498]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相对于的来自<code>DNS server</code>的响应报文</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210328195022.jpg" style="width:80%;border:solid"><pre class="line-numbers language-wireshark" data-language="wireshark"><code class="language-wireshark">Domain Name System (response)    Transaction ID: 0x49f1    Flags: 0x8180 Standard query response, No error        1... .... .... .... = Response: Message is a response        .000 0... .... .... = Opcode: Standard query (0)        .... .0.. .... .... = Authoritative: Server is not an authority for domain        .... ..0. .... .... = Truncated: Message is not truncated        .... ...1 .... .... = Recursion desired: Do query recursively        .... .... 1... .... = Recursion available: Server can do recursive queries        .... .... .0.. .... = Z: reserved (0)        .... .... ..0. .... = Answer authenticated: Answer/authority portion was not authenticated by the server        .... .... ...0 .... = Non-authenticated data: Unacceptable        .... .... .... 0000 = Reply code: No error (0)    Questions: 1    Answer RRs: 1    Authority RRs: 0    Additional RRs: 0    Queries        matemaster.cn: type A, class IN            Name: matemaster.cn        # 查询名            [Name Length: 13]            [Label Count: 2]            Type: A (Host Address) (1) # 查询类型            Class: IN (0x0001)         # 查询类    Answers        matemaster.cn: type A, class IN, addr 124.70.110.117            Name: matemaster.cn            Type: A (Host Address) (1)            Class: IN (0x0001)            Time to live: 283 (4 minutes, 43 seconds)            Data length: 4            Address: 124.70.110.117    [Request In: 495]    [Time: 0.005763000 seconds]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="报文参数"><a href="#报文参数" class="headerlink" title="报文参数"></a>报文参数</h3><p><code>Transaction ID</code>：事务ID，只是单纯的2B，16bit的数据，用于标识报文的唯一性</p><p><code>Flags</code>：</p><ul><li><p><strong>QR(Response)</strong> <code>1bit</code>：标记是请求还是响应报文</p><ul><li>0：请求</li><li>1：响应</li></ul></li><li><p><strong>Opcode</strong> <code>4bit</code>：</p><ul><li>0：标准查询</li><li>1：反向查询</li><li>2：服务器状态请求</li></ul></li><li><p><strong>Authoritative</strong> <code>1bit</code>：标记发送此响应报文的服务器是否为权威服务器</p><ul><li>0：</li><li>1：是权威服务器</li></ul></li><li><p><strong>Truncated</strong> <code>1bit</code>：数据是否被截断，在数据超过512B时自动截断，也就是只能传输512B</p><ul><li>0：</li><li>1：</li></ul></li><li><p><strong>Recursion desired</strong> <code>1bit</code>：是递归查询还是迭代查询</p><ul><li>0：</li><li>1：</li></ul></li><li><p><strong>Recursion available</strong> <code>1bit</code>：只出现在响应报文，表明服务器是否支持递归查询</p><ul><li>0：</li><li>1：</li></ul></li><li><p><strong>Z</strong> <code>1bit</code>：保留字段只能为0</p></li><li><p><strong>Answer authenticated</strong> <code>1bit</code>：服务器授权验证</p><ul><li>0：</li><li>1：</li></ul></li><li><p><strong>Non-authenticated data</strong> <code>1bit</code>：保留字段，只能为0</p></li><li><p><strong>Reply code</strong> <code>4bit</code></p><ul><li>0：无差错 </li><li>1：格式差错</li><li>2：问题在域名服务器上 </li><li>3：域参照问题 </li><li>4：查询类型不支持 </li><li>5：在管理上被禁止 </li><li>6 ~ 15 保留</li></ul></li></ul><p><code>Queries</code>：</p><ul><li>查询名：<strong>域名</strong>-<code>matemaster.cn</code>或者 <strong>IP地址</strong></li><li>查询类型：（比较多，这里介绍一下比较常见的）<ul><li>A（1）：IPV4地址</li><li>NS（2）：域名服务器</li><li>CNAME（5）：规范主机名的别名</li><li>MX（15）：</li><li>AAAA（28）：IPV6地址</li><li>PTR（12）：IP转域名</li></ul></li><li>查询类：IN-<code>Internet</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的博客网站</title>
      <link href="posts/52745.html"/>
      <url>posts/52745.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于Matery的魔改"><a href="#基于Matery的魔改" class="headerlink" title="基于Matery的魔改"></a>基于Matery的魔改</h1><h2 id="自定义网站字体"><a href="#自定义网站字体" class="headerlink" title="自定义网站字体"></a>自定义网站字体</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>首先确保主题存在css文件：<code>(hexo-theme-matery/source/css/.mycss)</code></p><p><b style="color: chocolate;">路径很重要！文件没有用就自己创！</b></p><p><b style="color: red;">本站使用的开源字体:JetBrains Mono</b></p><h3 id="网站局部个性化字体"><a href="#网站局部个性化字体" class="headerlink" title="网站局部个性化字体"></a>网站局部个性化字体</h3><p>一般网站的web字体都可以直接从<a href="https://fonts.google.com/">Google-Font</a>获取资源，这样不用担心字体商业带来的法律问题</p><p>1）创建web字体引用</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'引用的字体名称'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'谷歌字体路径（或者其他什么字体引用）'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2）在网页合适的位置进行字体引用</p><p>①利用浏览器检查元素，获取需要定义字体的部分</p><p>②在主体的配置文件中(hexo-theme-matery/layout/…)找到对应的渲染(.ejs)文件，查找需要修改的部分</p><p>①演示一下利用浏览器获取定义字体的部分</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210331113624.jpg" style="width:80%;"><p>对获取到的<code>id选择器：#artDetail</code>进行css渲染</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#artDetail</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'引用的web字体'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>②利用主体的ejs渲染文件找出需要修饰的部分（加入自定义类）</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210331114123.jpg" style="width:80%"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*使用我在文章内容详情定义的diyFnot类**/</span><span class="token selector">.diyfont</span> <span class="token punctuation">{</span>   <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'引用的web字体'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">/*也可以使用自带的id*/</span><span class="token selector">#artDetail</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'引用的web字体'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网站全局化字体定义"><a href="#网站全局化字体定义" class="headerlink" title="网站全局化字体定义"></a>网站全局化字体定义</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'引用的字体名称'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'谷歌字体路径（或者其他什么字体引用）'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'引用的web字体名称'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用本地的字体文件"><a href="#引用本地的字体文件" class="headerlink" title="引用本地的字体文件"></a>引用本地的字体文件</h3><p>当然有时候那个谷歌字体的网站可能登录不上去，需要科学上网，很烦人！我们也可以直接下载下字体文件，将他放在本地，进行直接引用！看下面操作👇</p><p>①在本地的hexo根目录的source文件下创立diy-font文件夹:<code>/source/diy-font</code></p><p>在该文件下存放你的字体文件，比如：<code>/source/diy-font/IBMPlexMono-Italic.ttf</code></p><p>②引用本地字体（仍然是在my.css文件中书写代码）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'IBMPlexMono-Italic'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../diy-font/IBMPlexMono-Italic.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'IBMPlexMono-Italic'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就可以实现引用本地的字体了，并且在web有效！</p><h1 id="字蛛压缩字体"><a href="#字蛛压缩字体" class="headerlink" title="字蛛压缩字体"></a>字蛛压缩字体</h1><p>在上面我们介绍了如何在网站上引用自己喜欢的字体，但是这样会出现一个问题：字体文件太大！（尤其是中文，有时候为了几个字引入一个数十兆的字体文件，得不偿失），所有需要字体压缩！</p><p>①下载字蛛插件</p><pre class="line-numbers language-nodejs" data-language="nodejs"><code class="language-nodejs">npm install font-spider -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>②在网站上引用自己的字体</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'IBMPlexMono-Italic'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../diy-font/IBMPlexMono-Italic.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'IBMPlexMono-Italic'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③字蛛命令直接压缩引用了你自定义字体的页面</p><pre class="line-numbers language-nodejs" data-language="nodejs"><code class="language-nodejs">font-spider 引用字体页面的路径// 比如：font-spider /public/*.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关于字体压缩有很多方式：可以自己编译自己的常用字体，这样文件最小，当然最好就直接捡现成的开源字体！</p><h1 id="Hexo部署云服务器"><a href="#Hexo部署云服务器" class="headerlink" title="Hexo部署云服务器"></a>Hexo部署云服务器</h1><p>准确来说，这部分是介绍，如何将hexo部署到云服务器。也就说这部分是面向那些想把自己的博客网站放到自己的云服务器上运行的朋友们！</p><h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p><b style="color: yellowgreen;">云服务器配置</b></p><table><thead><tr><th>云服务器</th><th>参数</th></tr></thead><tbody><tr><td><strong>Linux系统</strong></td><td><strong>Ubuntu 18.04 server 64bit with ARM</strong></td></tr><tr><td><strong>云硬盘</strong></td><td><strong>1G+40GB（高IO）</strong></td></tr><tr><td><strong>域名</strong></td><td><strong><a href="http://www.matemaster.cn/">www.matemaster.cn</a></strong></td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210327105816.jpg" style="width:80%"><h2 id="连接云服务器"><a href="#连接云服务器" class="headerlink" title="连接云服务器"></a>连接云服务器</h2><h3 id="创建git用户"><a href="#创建git用户" class="headerlink" title="创建git用户"></a>创建git用户</h3><p>（1）登录云服务器，切换root用户（华为云默认root用户）</p><p>（2）安装git（可以git–version测试是否成功）</p><p>（3）创建管理git的用户</p><p>（4）添加git用户的权限</p><p>（5）vim操作编辑git的权限</p><p>（6）切换至git用户，创建SSH密钥</p><p>（7）修改SSH文件权限，测试是否成功（ssh -v git@服务器ip）</p><pre class="line-numbers language-cloundshell" data-language="cloundshell"><code class="language-cloundshell">// 切换root用户（华为云默认root用户）sudo su root// 安装gitapt install git// 创建管理git的用户（若之前弄过git用户就可以deluser git）adduser git// 添加git用户的权限chmod 740 /etc/sudoersvim /etc/sudoers// 上面这个vim操作将会进入编辑模式 输入 i 进行编辑// 找到这个内容：root    ALL=(ALL)     ALL// 加入下面代码：git    ALL=(ALL)     ALL// 按下ESC推出i，并且输入:wq保存推出// 改回权限chmod 400 /etc/sudoers// 如果你在创建git用户时，已经输入密码，那么就跳过这一步sudo passwd git// 切换至git用户（很重要） 进行下面操作su gitmkdir ~/.sshvim ~/.ssh/authorized_keys// vim操作进入了authorized_keys编辑操作，按序i进入编辑，将本地的SSH密钥输入进去，然后ESC，在:wq保存推出// 修改上面这两个文件的权限chmod 600 /home/git/.ssh/authorized_keyschmod 700 /home/git/.ssh//测试一下本地终端能不能连接到云服务器的git（下面这行代码是在本地电脑完成，不是云服务器的命令）ssh -v git@云服务器的ip至此git用户操作完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>（1）创建git文件夹，授予git主权</p><p>（2）新建git仓库</p><p>（3）创建git钩子</p><p>（4）给git钩子权限</p><pre class="line-numbers language-cloundshell" data-language="cloundshell"><code class="language-cloundshell">// 延续上面的操作，此时需要切回root用户（以下命令均在root）mkdir /var/repo//将上面这个文件授权给gitchown -R git:git /var/repochmod -R 755 /var/repo// 建立网站根目录，并给权限mkdir /var/hexochown -R git:git /var/hexochmod -R 755 /var/hexo// 新建git仓库（这里hexo.git，可以改成：自己想要的名字.git）cd /var/repogit init --bare hexo.git// 创建git钩子，服务自动部署vim /var/repo/hexo.git/hooks/post-receive// 进行vim编辑 ，粘贴保存退出#!/bin/bashgit --work-tree=/var/hexo --git-dir=/var/repo/hexo.git checkout -f//修改钩子权限chown -R git:git /var/repo/hexo.git/hooks/post-receivechmod +x /var/repo/hexo.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置云服务器软件Nginx（宝塔）"><a href="#配置云服务器软件Nginx（宝塔）" class="headerlink" title="配置云服务器软件Nginx（宝塔）"></a>配置云服务器软件Nginx（宝塔）</h3><p>（1）在云服务器下载宝塔</p><p>（2）下载Nginx</p><p>（3）添加站点</p><p>（4）配置文件</p><p>（5）网站目录</p><p>（6）重启宝塔，使配置生效</p><pre class="line-numbers language-cloundshell" data-language="cloundshell"><code class="language-cloundshell">// 下载宝塔（下面有教程）wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh// 下载好之后（会出现网站公网域名、登录用户、登录密码）// 记住在登录宝塔的时候，一定要记着放开port: 8888 端口不然就拦截了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装宝塔Linux面板方法<a href="https://www.bt.cn/bbs/thread-19376-1-1.html">查看详细教程 &gt;&gt;</a></p><blockquote><p>使用 SSH 连接工具，如<a href="https://download.bt.cn/ssh/BT-Term.exe">堡塔SSH终端</a>连接到您的 Linux 服务器后，<a href="https://www.bt.cn/bbs/thread-5166-1-1.html">挂载磁盘</a>，根据系统执行相应命令开始安装（大约2分钟完成面板安装）：</p><p>Centos安装脚本</p><pre class="line-numbers language-none"><code class="language-none">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Ubuntu/Deepin安装脚本</p><pre class="line-numbers language-none"><code class="language-none">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Debian安装脚本</p><pre class="line-numbers language-none"><code class="language-none">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Fedora安装脚本</p><pre class="line-numbers language-none"><code class="language-none">wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>下载nginx</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210327113052.jpg" style="width:90%"><p>添加站点</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210327113213.jpg" style="width:90%"><p>设置配置文件</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210327113305.jpg" style="width:90%"><p>设置网站目录</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210327113329.jpg" style="width:90%"><p>重启宝塔服务（在云服务器中进行）</p><pre class="line-numbers language-cloundshell" data-language="cloundshell"><code class="language-cloundshell">bt restart   //这样才会使上面在宝塔linux面板的配置生效<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地hexo配置"><a href="#本地hexo配置" class="headerlink" title="本地hexo配置"></a>本地hexo配置</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">deploy:  type: git  repo: git@域名:/var/repo/hexo.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo cl&amp;&amp;hexo g&amp;&amp;hexo d  //完成部署<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我在部署的时候出现了权限错误的问题 ，后来发现是自己在创建git下的文件夹时，忘记授权了。</p><pre class="line-numbers language-cloundshell" data-language="cloundshell"><code class="language-cloundshell">chown -R git:git /var/repo/chown -R git:git /var/hexo/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="部署成功预览"><a href="#部署成功预览" class="headerlink" title="部署成功预览"></a>部署成功预览</h3><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.1/imgs/20210326173021.jpg" style="width:80%"><h1 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h1><h2 id="获取SSL证书"><a href="#获取SSL证书" class="headerlink" title="获取SSL证书"></a>获取SSL证书</h2><p>这个SSL可以买，也可以直接白嫖。当然为了省钱的话，还是教大家怎么白嫖！<a href="https://support.huaweicloud.com/scm_faq/scm_01_0192.html">华为云官方教程</a></p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210327131003.jpg" style="width:90%"><p>将证书的*.key以及*.pem内容保存到对应位置即可！</p><h1 id="前端库CDN加速"><a href="#前端库CDN加速" class="headerlink" title="前端库CDN加速"></a>前端库CDN加速</h1><p>在<code>Matery</code>主题配置文件中，作者对于<code>libs</code>下的文件做出这样的解释：使用到的前端库，可按需替换成对应的CDN地址，如果下面未指定具体的版本号，使用最新的版本即可。👉<a href="https://github.com/matemaster9/source@2.0/matery-libs">Github前端库</a></p><h2 id="libs"><a href="#libs" class="headerlink" title="libs"></a>libs</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">libs:  css:    matery: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/matery.css     mycss:  /css/my.css     fontAwesome: /libs/awesome/css/all.css     materialize: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/materialize.min.css    aos: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/aos.css     animate: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/animate.min.css     lightgallery: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/lightgallery.min.css     aplayer: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/APlayer.min.css     dplayer: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/DPlayer.min.css    gitalk: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/gitalk.css     jqcloud: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/jqcloud.css     tocbot: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/tocbot.css     prism: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/css/prism.css    js:    matery: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/matery.js     jquery: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/jquery.min.js     materialize: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/materialize.min.js     masonry: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/masonry.pkgd.min.js     aos: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/aos.js     scrollProgress: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/scrollProgress.min.js     lightgallery: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/lightgallery-all.min.js     clicklove: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/clicklove.js    busuanzi: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/busuanzi.pure.mini.js     aplayer: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/APlayer.min.js    dplayer: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/DPlayer.min.js     crypto: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/crypto-js.min.js     echarts: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/echarts.min.js     gitalk: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/gitalk.min.js #/libs/gitalk/gitalk.min.js    valine: https://unpkg.com/valine/dist/Valine.min.js     minivaline: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/MiniValine.js     twikoo: https://cdn.jsdelivr.net/npm/twikoo/dist/twikoo.all.min.js     jqcloud: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/jqcloud-1.0.4.min.js    tocbot: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/tocbot.min.js     canvas_nest: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/canvas-nest.js     ribbon: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/ribbon.min.js     ribbonRefresh: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/ribbon-refresh.min.js     ribbon_dynamic: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/ribbon-dynamic.js     instantpage: https://cdn.jsdelivr.net/gh/matemaster9/source@2.0/matery-libs/js/instantpage.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cdn-jsdelivr-github"><a href="#cdn-jsdelivr-github" class="headerlink" title="cdn+jsdelivr+github"></a>cdn+jsdelivr+github</h2><p>这个是目前比较好用的静态资源的CDN加速方式。当然还有花钱的方式，那个也不错</p><p><code>腾讯</code>：<a href="https://blog.sky03.cn/medias/test.jpg">COS + CDN</a></p><p><code>GitHub</code>：<a href="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/test.jpg">cdn + jsDelivr + GitHub</a></p><p><code>阿里</code>：<a href="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/test.jpg">OSS</a></p><p>为了避开<code>jsdelivr</code>每次加速资源不超过20m或者github仓库容量不能超过50m的弊端，我们可以采取发布版本的方式来解决！</p><p>（1）新建一个<code>GitHub</code>仓库<strong>source</strong></p><p>（2）<code>git clone</code>当本地，将需要加速的静态资源（.css .js）等文件放入本地仓库</p><p>（3）<code>git push</code>到远端仓库，然后发布版本即可</p><p>引用资源的方式</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">// 具体使用连接，可以参考上面的前端库https://cdn.jsdelivr.net/gh/用户名/仓库名@发布的版本号/文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h1><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><h3 id="将域名站点提交到百度"><a href="#将域名站点提交到百度" class="headerlink" title="将域名站点提交到百度"></a>将域名站点提交到百度</h3><p>测试网站是否被搜索引擎收录：在百度输入下面代码，会出现收录结果</p><pre class="line-numbers language-none"><code class="language-none">// site:(域名)site:www.matemaster.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><b style="color: hotpink;">没有收录？那么看下面操作</b></p><p>（1）登录<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a></p><p>（2）登录成功后，在用户中心-&gt;站点管理-&gt;添加网站操作 <span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>看下图</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210326232547.jpg" style="width: 90%"><p>（3）这里讲一下第三步：验证网站！最好选择CNAME解析（换而言之，就用这个最好，帮你选好方式省的纠结）</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210326233923.jpg" style="width: 90%"><p><b style="color: orange;">华为云域名为例，添加域名记录集（阿里云、腾讯云、七牛云……）都一样的操作，实在不会的可以直接百度，或者就在官方云服务网站找教程！</b></p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210326234541.jpg" style="zoom: 67%;"><p><b style="color: hotpink;">以上操作，只是单纯的将网站域名提交的百度收录了！，但是为了以后自己写的每一篇博客文章都可以被百度收录，那么我们还是主动推送为好！</b></p><h3 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h3><p>首先说一句，推送的方式有三种：主动推送、自动推送、sitemap推送。这里<code>matery</code>已经内部集成了自动推送，<code>hexo-theme-matery</code>内部文档中有解释，这里就介绍最好的方式：<strong>主动推送</strong></p><p>（1）一个插件<code>hexo-baidu-url-submit</code></p><p>（2）一个配置项<code>baidu_url_submit</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">baidu_url_submit:  count: 80 # 提交最新的一个链接  host: https://www.matemaster.cn # 在百度资源搜索平台中注册的域名  token: xxxxxxxxxxxx # 请注意这是推送秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>❓：密钥从哪里获取<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>token = 密钥</strong></p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio@1.2/imgs/20210326235758.jpg" style="width:90%"><p>这里要添加新的<code>deploy</code>类型</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># hexo根目录下deploy:- type: baidu_url_submitter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="查看推送反馈"><a href="#查看推送反馈" class="headerlink" title="查看推送反馈"></a>查看推送反馈</h3><ul><li><p>推送成功</p></li><li><p>状态码为200，可能返回以下字段：</p><table><thead><tr><th align="left">字段</th><th align="left">是否必选</th><th align="left">参数类型</th><th align="right">说明</th></tr></thead><tbody><tr><td align="left">success</td><td align="left">是</td><td align="left">int</td><td align="right"><strong>成功推送的url条数</strong></td></tr><tr><td align="left">remain</td><td align="left">是</td><td align="left">int</td><td align="right">当天剩余的可推送url条数</td></tr><tr><td align="left">not_same_site</td><td align="left">否</td><td align="left">array</td><td align="right">由于不是本站url而未处理的url列表</td></tr><tr><td align="left">not_valid</td><td align="left">否</td><td align="left">array</td><td align="right">不合法的url列表</td></tr></tbody></table></li></ul><h2 id="url优化"><a href="#url优化" class="headerlink" title="url优化"></a>url优化</h2><p>因为在<code>hexo</code>根目录下的配置文件，默认的文章页对应的url是四级，也就是下面这种形式</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">url: https://www.matemaster.cnpermalink: :year/:month/:day/:title.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么我们如何缩短url链接</p><p>（1）插件：<code>hexo-abbrlink</code></p><p>（2）<code>hexo</code>根配置项</p><pre class="line-numbers language-none"><code class="language-none">// 下载插件npm install hexo-abbrlink --save// 根目录配置项abbrlink:  alg: crc16  #算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点  rep: dec    #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制// 修改根目录文章permalinkpermalink: posts/:abbrlink.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终效果：<b style="color: aqua;">matemaster.cn/posts/52745.html</b></p><h2 id="cnpm加速"><a href="#cnpm加速" class="headerlink" title="cnpm加速"></a>cnpm加速</h2><p>在使用<code>npm</code>下载插件的时候，往往速度很慢，并且可能存在卡死的情况，没有办法不想科学上网！</p><p>后来发现国内淘宝团队做了一个npm的镜像<code>cnpm</code>，下面介绍如何使用<code>cnpm下载</code></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">// 获取npm的默认下载地址npm config get registry   //默认地址：https://registry.npmjs.org/// 下载cnpmnpm install -g cnpm --registry=https://registry.npm.taobao.org// 测试cnpm是否下载成功（出现版本号即可）cnpm-v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然了，有时候也会出现下载<code>cnpm</code>会出现错误，比如我自己就出现了，因为我在电脑上面本地建立了多个博客，所以就出现下载<code>cnpm错误</code>。当然还有一种：“修改npm默认仓库地址的方式，实现使用淘宝镜像”！</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">// 修改cnpm的默认仓库地址npm config set registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><b style="color: red;">这样以后就可以用cnpm代替npm指令</b></p>]]></content>
      
      
      <categories>
          
          <category> MasterStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL存储程序</title>
      <link href="posts/55362.html"/>
      <url>posts/55362.html</url>
      
        <content type="html"><![CDATA[<h1 id="存储过程基本知识"><a href="#存储过程基本知识" class="headerlink" title="存储过程基本知识"></a>存储过程基本知识</h1><p>操作采用的数据库关系表图</p><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210322215407.png"></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><b style="color: chocolate;">建一个不带参数的存储过程</b></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建一个productpricing存储过程</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token function">Avg</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> priceaverage<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token comment"># 删除此存储过程</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span>  <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> productpricing<span class="token punctuation">;</span><span class="token comment"># 使用此存储过程（此时会输出结果@priceaverage）</span><span class="token keyword">CALL</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------+</span><span class="token operator">|</span><span class="token variable">@priceaverage</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+</span><span class="token operator">|</span>    <span class="token number">16.133571</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: hotpink;">建一个带参数（输出）的存储过程</b></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建一个带参productpricing存储过程</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> productpricing<span class="token punctuation">(</span>    <span class="token keyword">OUT</span> pMin <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> pMax <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> pAvg <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token function">Min</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">INTO</span> pMin<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">Max</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">INTO</span> pMax<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">Avg</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">INTO</span> pAvg<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token comment"># 使用此存储过程（此时不在直接输出结果，而是将结果保存在输出参数中）</span><span class="token keyword">CALL</span> productpricing<span class="token punctuation">(</span><span class="token variable">@pMin</span><span class="token punctuation">,</span><span class="token variable">@pMax</span><span class="token punctuation">,</span><span class="token variable">@pAvg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@pMin</span><span class="token punctuation">,</span><span class="token variable">@pMax</span><span class="token punctuation">,</span><span class="token variable">@pAvg</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------+-------+</span><span class="token operator">|</span> <span class="token variable">@pMin</span> <span class="token operator">|</span> <span class="token variable">@pMax</span> <span class="token operator">|</span> <span class="token variable">@pAvg</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+-------+</span><span class="token operator">|</span>  <span class="token number">2.50</span> <span class="token operator">|</span> <span class="token number">55.00</span> <span class="token operator">|</span> <span class="token number">16.13</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+-------+</span><span class="token comment"># 删除此存储过程</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span>  <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> productpricing<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里解释一下：为什么不讲上面三个select子句合并？也就是下面的编写方式。</p><p>因为：在存储过程中，记录集不属于任何数据类型，为了和上面的输出参数类型保持一致，所以就必须将每一项的类型保持一一对应！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token function">Min</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Max</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Avg</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">INTO</span> pMin<span class="token punctuation">,</span>pMax<span class="token punctuation">,</span>pAcg<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: yellowgreen;">建一个智能的存储过程</b></p><p>场景描述：现在需要对订单进行统计，但是需要对某些地方的增加税收。</p><p>那么需要完成以下几步：</p><p>（1）正常统计订单</p><p>（2）对需要增加营业税的订单，进行税收处理</p><p>（3）返回统计的结果</p><p>存储过程：ordertotal</p><p>参数：</p><ul><li>onumber：订单号</li><li>taxable ：是否税收</li><li>ototal：统计结果        </li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> ordertotal<span class="token punctuation">(</span>    <span class="token operator">IN</span> onumber <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token operator">IN</span> taxable <span class="token keyword">BOOLEAN</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> ototal <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">COMMENT</span> <span class="token string">'Obtain ordertotal,optional taxable'</span><span class="token keyword">BEGIN</span><span class="token comment"># 定义局部变量：total、taxrate</span><span class="token keyword">DECLARE</span> total <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">DECLARE</span> taxrate <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment"># 订单合计</span><span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>item_price<span class="token operator">*</span>quantity<span class="token punctuation">)</span><span class="token keyword">FROM</span> orderitems<span class="token keyword">INTO</span> total<span class="token punctuation">;</span><span class="token comment"># 是否交税</span><span class="token keyword">IF</span> taxable <span class="token keyword">THEN</span><span class="token keyword">SELECT</span> total<span class="token operator">+</span><span class="token punctuation">(</span>total<span class="token operator">/</span><span class="token number">100</span><span class="token operator">*</span>taxrate<span class="token punctuation">)</span> <span class="token keyword">INTO</span> total<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>        <span class="token comment"># 返回结果</span>    <span class="token keyword">SELECT</span> total <span class="token keyword">INTO</span> ototal<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上述的存储过程</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 不加税</span><span class="token keyword">CALL</span> ordertotal<span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@total</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------+</span><span class="token operator">|</span> <span class="token variable">@total</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+</span><span class="token operator">|</span> <span class="token number">1368.34</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+</span><span class="token comment"># 加税</span><span class="token keyword">CALL</span> ordertotal<span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@total</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------+</span><span class="token operator">|</span> <span class="token variable">@total</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+</span><span class="token operator">|</span> <span class="token number">1450.44</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构详解"><a href="#结构详解" class="headerlink" title="结构详解"></a>结构详解</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">[</span>修饰词<span class="token punctuation">]</span> 过程主体<span class="token comment"># 参数列表</span><span class="token punctuation">[</span><span class="token operator">IN</span><span class="token operator">|</span><span class="token keyword">OUT</span><span class="token operator">|</span><span class="token keyword">INOUT</span><span class="token punctuation">]</span> parameter <span class="token keyword">type</span><span class="token comment"># 修饰词</span><span class="token keyword">LANGUAGE</span> <span class="token keyword">SQL</span> <span class="token comment">#表明当前系统语言为SQL</span><span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> <span class="token keyword">DETERMINISTIC</span> <span class="token comment">#无NOT表明：同样输入得到相同结果。NOT 表明：同样输入结果可能不一致</span>{<span class="token keyword">CONTAINS</span> <span class="token keyword">SQL</span><span class="token operator">|</span><span class="token keyword">NO</span> <span class="token keyword">SQL</span><span class="token operator">|</span><span class="token keyword">READS</span> <span class="token keyword">SQL</span> <span class="token keyword">DATA</span><span class="token operator">|</span><span class="token keyword">MODIFIES</span> <span class="token keyword">SQL</span> <span class="token keyword">DATA</span>} <span class="token comment">#子程序使用SQL的限制</span><span class="token comment"># CONTAINS SQL:子程序包含SQL，但是不包含读写的</span><span class="token comment"># NO SQL:子程序不包含SQL语句</span><span class="token comment"># READS SQL DATA:包含读数据SQK</span><span class="token comment"># MODIFIES SQL DATA:包含写数据SQL</span><span class="token keyword">SQL</span> SECURITY{<span class="token keyword">DEFINER</span><span class="token operator">|</span><span class="token keyword">INVOKER</span>} <span class="token comment">#执行SQL的权限</span><span class="token comment"># DEFINER：定义者执行</span><span class="token comment"># INVOKER：有权限的调用者执行</span><span class="token keyword">COMMENT</span> <span class="token string">'String'</span> <span class="token comment"># 注释信息，可以描述存储过程</span><span class="token comment"># 过程主体</span><span class="token keyword">BEGIN</span><span class="token comment"># 主体SQL语句</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">type</span> <span class="token punctuation">[</span>修饰词<span class="token punctuation">]</span> 函数主体<span class="token comment"># 参数列表和修饰词与存储过程保持一致，不做赘述</span><span class="token comment"># 函数主体</span><span class="token keyword">RETURN</span> <span class="token keyword">value</span> <span class="token comment"># value 可以是一个查询记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里定义一个<code>SupplierName</code>函数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> SupplierName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">RETURN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> s_name    <span class="token keyword">FROM</span> suppliers    <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>s_call <span class="token operator">=</span> <span class="token string">'48075'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 调用函数</span><span class="token keyword">SELECT</span> SupplierName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="存储程序进阶"><a href="#存储程序进阶" class="headerlink" title="存储程序进阶"></a>存储程序进阶</h1><h2 id="变量使用"><a href="#变量使用" class="headerlink" title="变量使用"></a>变量使用</h2><p>之前在<code>ordertotal</code>存储过程中，使用到了局部变量的定义</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> total <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">DECLARE</span> taxrate <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">6</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上面代码看出，MySQL变量定义的方式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 无默认值</span><span class="token keyword">DECLARE</span> var_name var_type<span class="token punctuation">;</span><span class="token comment"># 有默认值</span><span class="token keyword">DECLARE</span> var_name var_type <span class="token keyword">DEFAULT</span> default_value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么在定义了变量之后，我们怎么实现对变量的赋值呢？</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># set操作</span><span class="token keyword">SET</span> var_name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span><span class="token comment"># select...into...</span><span class="token keyword">SELECT</span> <span class="token keyword">value</span> <span class="token keyword">INTO</span> var_name<span class="token punctuation">;</span><span class="token comment">## 这里的value可以是特定值或者查询结果！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义条件和处理程序"><a href="#定义条件和处理程序" class="headerlink" title="定义条件和处理程序"></a>定义条件和处理程序</h2><p>定义条件和处理程序的好处在于：当存储程序发生错误或者问题时，可以使用定义的条件判断错误的类型，并且选择合适的处理程序进行问题处理，提高了存储程序能力，避免程序异常！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> condition_name CONDITION <span class="token keyword">FOR</span> condition_type<span class="token punctuation">;</span><span class="token comment"># condition_name:错误的类型名，可以自定义</span><span class="token comment"># condition_type:错误类型，分为：字符型（字符长度为5）、数值型错误代码</span>SQLSTATE <span class="token punctuation">[</span><span class="token keyword">VALUE</span><span class="token punctuation">]</span> : sqlstate_value<span class="token operator">|</span>mysql_error_code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就直接举个栗子<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> ：定义一个错误代码 <code>ERROR 1970(43990)</code>，名称为<code>command_not allowed</code>的条件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># （1）sqlstate_value</span><span class="token keyword">DECLARE</span> command_not_allowed CONDITION <span class="token keyword">FOR</span> <span class="token number">1970</span><span class="token punctuation">;</span><span class="token comment"># （2）mysql_error_code</span><span class="token keyword">DECLARE</span> command_not_allowed CONDOTION <span class="token keyword">FOR</span> <span class="token string">'43990'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="游标的使用"><a href="#游标的使用" class="headerlink" title="游标的使用"></a>游标的使用</h2><p>简单介绍一下游标<code>cursor</code>的声明、打开、使用、关闭</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 声明游标</span><span class="token keyword">DECLARE</span> cursor_name <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> select_statement<span class="token punctuation">;</span><span class="token comment"># 打开游标</span><span class="token keyword">OPEN</span> cursor_name<span class="token punctuation">;</span><span class="token comment"># 使用游标</span><span class="token keyword">FETCH</span> cursor_name <span class="token keyword">INTO</span> var_name<span class="token punctuation">;</span><span class="token comment"># 关闭游标</span><span class="token keyword">CLOSE</span> cursor_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单地举个栗子<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 声明名称为cursor_fruit的光标</span><span class="token keyword">CREATE</span> cursor_fruit <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> f_name<span class="token punctuation">,</span> f_price     <span class="token keyword">FROM</span> fruits <span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 打开游标</span><span class="token keyword">OPEN</span> cursor_fruit<span class="token punctuation">;</span><span class="token comment"># 使用游标（变量必须在游标声明之前就已经定义了）</span><span class="token keyword">FETCH</span>  cursor_fruit <span class="token keyword">INTO</span> fruit_name<span class="token punctuation">,</span> fruit_price <span class="token punctuation">;</span><span class="token comment"># 关闭</span><span class="token keyword">CLOSE</span> cursor_fruit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li>理解<code>if</code>语句和<code>if()</code>函数的区别</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">IF</span> condition1 <span class="token keyword">THEN</span> expression1<span class="token punctuation">[</span><span class="token keyword">ELSE</span> <span class="token keyword">IF</span> condition2 <span class="token keyword">THEN</span> expression2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ELSE</span> else_statement<span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举个栗子</strong><span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">IF</span> var <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'var is null'</span><span class="token punctuation">)</span><span class="token keyword">ELSE</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'var is not null'</span><span class="token punctuation">)</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>case</code>语句的两种形式</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 1.case存在变量</span><span class="token keyword">CASE</span> vars<span class="token keyword">WHEN</span> var1 <span class="token keyword">THEN</span> expr1<span class="token punctuation">[</span><span class="token keyword">WHEN</span> var2 <span class="token keyword">THEN</span> expr2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ELSE</span> else_statement<span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span class="token comment"># 2.case不存在变量</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> condition1 <span class="token keyword">THEN</span> expr1<span class="token punctuation">[</span><span class="token keyword">WHEN</span> condition2 <span class="token keyword">THEN</span> expr2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ELSE</span> else_statement<span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举个栗子</strong><span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># (1)</span><span class="token keyword">CASE</span> var  <span class="token keyword">WHEN</span> <span class="token number">1</span> <span class="token keyword">THEN</span> <span class="token keyword">SELECT</span> <span class="token string">'val is 1'</span><span class="token punctuation">;</span>  <span class="token keyword">WHEN</span> <span class="token number">2</span> <span class="token keyword">THEN</span> <span class="token keyword">SELECT</span> <span class="token string">'val is 2'</span><span class="token punctuation">;</span>  <span class="token keyword">ELSE</span> <span class="token keyword">SELECT</span> <span class="token string">'val is not 1 or 2'</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span class="token comment"># (2)</span><span class="token keyword">CASE</span>  <span class="token keyword">WHEN</span> val <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span> <span class="token keyword">SELECT</span> <span class="token string">'val is NULL'</span><span class="token punctuation">;</span>  <span class="token keyword">WHEN</span> val <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token keyword">SELECT</span> <span class="token string">'val is less than 0'</span><span class="token punctuation">;</span>  <span class="token keyword">WHEN</span> val <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token keyword">SELECT</span> <span class="token string">'val is greater than 0'</span><span class="token punctuation">;</span>  <span class="token keyword">ELSE</span> <span class="token keyword">SELECT</span> <span class="token string">'val is 0'</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Loop</code>循环</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>loop_label<span class="token punctuation">]</span>: <span class="token keyword">LOOP</span>loop_statement<span class="token keyword">END</span> <span class="token keyword">LOOP</span> <span class="token punctuation">[</span>loop_label<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>举个栗子</strong><span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 求1~100之和</span><span class="token keyword">DECLARE</span> s <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">DECLARE</span> id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>SUM : <span class="token keyword">loop</span><span class="token keyword">SET</span> id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s <span class="token operator">=</span> s <span class="token operator">+</span> id<span class="token punctuation">;</span><span class="token keyword">IF</span> id <span class="token operator">&gt;=</span> <span class="token number">100</span> <span class="token keyword">THEN</span> <span class="token keyword">LEAVE</span> SUM<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">LOOP</span> SUM<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里还涉及到一个<code>LEAVE</code>语句，用于跳出循环和<code>BEGIN……END</code>。当然还有一个用于直接跳转到循环头<code>ITERATE</code>。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> doiterate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">DECLARE</span> p1 <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>my_loop: <span class="token keyword">LOOP</span>  <span class="token keyword">SET</span> p1<span class="token operator">=</span> p1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">IF</span> p1 <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token keyword">THEN</span> <span class="token keyword">ITERATE</span> my_loop<span class="token punctuation">;</span>  <span class="token keyword">ELSEIF</span> p1 <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token keyword">THEN</span> <span class="token keyword">LEAVE</span> my_loop<span class="token punctuation">;</span>  <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>  <span class="token keyword">SELECT</span> <span class="token string">'p1 is between 10 and 20'</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">LOOP</span> my_loop<span class="token punctuation">;</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>REPEAT</code>语句</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>repeat_label<span class="token punctuation">]</span> : <span class="token keyword">REPEAT</span>statement_listUNTIL expr<span class="token keyword">END</span> <span class="token keyword">REPEAT</span> <span class="token punctuation">[</span>repeat_label<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举个栗子</strong><span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">REPEAT</span><span class="token keyword">SET</span> id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>UNTIL  id <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>WHILE</code>语句</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>while_label<span class="token punctuation">]</span> : <span class="token keyword">WHILE</span> expr_condition<span class="token keyword">DO</span> statement<span class="token keyword">END</span> <span class="token keyword">WHILE</span> <span class="token punctuation">[</span>while_label<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>举个栗子</strong><span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">WHILE</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token keyword">DO</span> <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存储程序的CRUD"><a href="#存储程序的CRUD" class="headerlink" title="存储程序的CRUD"></a>存储程序的CRUD</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 更改存储程序</span><span class="token keyword">ALTER</span> {<span class="token keyword">PROCEDURE</span><span class="token operator">|</span><span class="token keyword">FUNCTION</span>} sp_name <span class="token keyword">MODIFIES</span> <span class="token punctuation">[</span>alter_statement<span class="token punctuation">]</span><span class="token comment"># 查看存储函数状态</span><span class="token keyword">SHOW</span> {<span class="token keyword">PROCEDURE</span><span class="token operator">|</span><span class="token keyword">FUNCTION</span>} <span class="token keyword">STATUS</span> <span class="token punctuation">[</span><span class="token operator">LIKE</span> <span class="token string">'pattern'</span><span class="token punctuation">]</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> {<span class="token keyword">PROCEDURE</span><span class="token operator">|</span><span class="token keyword">FUNCTION</span>} sp_name<span class="token comment"># 删除存储程序</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span><span class="token operator">|</span><span class="token keyword">FUNCTION</span> sp_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为太空人表盘</title>
      <link href="posts/57338.html"/>
      <url>posts/57338.html</url>
      
        <content type="html"><![CDATA[<h1 id="动画效果图"><a href="#动画效果图" class="headerlink" title="动画效果图"></a>动画效果图</h1><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210324175449.gif"></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>这个项目是源自于抖音上特别火的华为太空人表盘，利用前端三大件: HTML5+CSS3+JavaScript实现<span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>呜呼！起飞！🛫✈️✈️✈️👉<a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-24/HW_watch">我要当太空人</a></p>]]></content>
      
      
      <categories>
          
          <category> MasterStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MasterStudio </tag>
            
            <tag> 动画 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络</title>
      <link href="posts/40597.html"/>
      <url>posts/40597.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="posts/51917.html"/>
      <url>posts/51917.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典排序算法</title>
      <link href="posts/61237.html"/>
      <url>posts/61237.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析线性表</title>
      <link href="posts/55225.html"/>
      <url>posts/55225.html</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h1><p>在说线性表的逻辑结构之前，我们必须知晓线性表的基本概念！</p><p>线性表（linear-table）：是一组具有共性的有限序列。（共性：有着相同的数据类型）</p><p>举个栗子：<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>简单类型——单一数据</p><p>十二生肖（子鼠、丑牛、寅虎、卯兔、辰龙、巳蛇、午马、未羊、申猴、酉鸡、戌狗、亥猪）</p><p>复杂类型——复合数据</p><p>学生登记表（（start）,,…,（i-1）,（i）,（i+1）,…（end））</p><p>i = （name,stu_id,dept_id）</p><p><b style="color: darkgreen;">注：起始结点（start）只存在直接后继结点，终端结点（end）只存在直接前驱结点！其中任意中间结点，都存在直接前驱结点（prev）和直接后继结点（succ）！</b></p><p><b style="color: darkred;">线性表存在两种逻辑结构：线性表、链表</b></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="一元多项式"><a href="#一元多项式" class="headerlink" title="一元多项式"></a>一元多项式</h3><p>一元多项式（polynomial in one var）求和！<br>$$<br>P_n(x) = P_0+P_1x^1 +…P_{i-1}x^{i-1}+P_ix^i+P_{i+1}x^{i+1}+… + P_nx^n<br>$$</p><p>$$<br>Q_m(x) = Q_0+Q_1x^1 +…Q_{i-1}x^{i-1}+Q_ix^i+Q_{i+1}x^{i+1}+… + Q_mx^m<br>$$</p><p>$$<br>ADD = P_n(x) + Q_m(x)<br>$$</p><p>下面就是针对这一ADD操作的实现算法，以及数据的逻辑存储方式！</p><p>线性表逻辑结构：P<del>n</del>(x) Q<del>m</del>(x) ADD  <code>（这里假设M &gt;= n）</code><br>$$<br>P_n(X) = (P_1,P_2,…,P_{i-1},P_i,P_{i+1},…,P_n)<br>$$</p><p>$$<br>Q_m(x) = (Q_1,Q_2,…,Q_{i-1},Q_i,Q_{i+1},…,Q_m)<br>$$</p><p>$$<br>ADD = (P_1+Q_1,…,P_i+Q_i,…,P_n+Q_n,…,Q_m)<br>$$</p><ul><li>逻辑结构的思路（线性表）</li></ul><p>我们直接采取数组存储多项式的系数，利用数组的下标表示x的幂（下标和指数一一对应）。</p><table><thead><tr><th>P<del>n</del>(x)</th><th>0</th><th>1</th><th>2</th><th>…</th><th>i</th><th>…</th><th>n</th></tr></thead><tbody><tr><td></td><td>P<del>0</del></td><td>P<del>1</del></td><td>P<del>2</del></td><td></td><td>P<del>i</del></td><td></td><td>P<del>n</del></td></tr></tbody></table><table><thead><tr><th>Q<del>m</del>(x)</th><th>0</th><th>1</th><th>2</th><th>…</th><th>i</th><th>…</th><th>m</th></tr></thead><tbody><tr><td></td><td>Q<del>0</del></td><td>Q<del>1</del></td><td>Q<del>2</del></td><td></td><td>Q<del>i</del></td><td></td><td>Q<del>m</del></td></tr></tbody></table><p>我们这里的数组下标将富含指数的含义，那么举个栗子<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><table><thead><tr><th>P<del>2</del>(x) = 2+3x+x^2^</th><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td></td><td>2</td><td>3</td><td>1</td></tr></tbody></table><table><thead><tr><th>Q<del>3</del>(x) = 1+2x+3x^2^+4x^3^</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td></td><td>1</td><td>2</td><td>3</td><td>4</td></tr></tbody></table><table><thead><tr><th>ADD = 3+5x+4x^2^+4x^3^</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td></td><td>3</td><td>5</td><td>4</td><td>4</td></tr></tbody></table><ul><li>逻辑结构思路</li></ul><p>如果采取链表的方式，我们就不需要考虑下标的含义而是直接存储（系数，指数），只要将结果全部归并到相对长的链表中即可。<br>$$<br>Q_3(x) = 1 + 2x + 3x^2+4x^3<br>$$</p><table>    <tbody><tr>        <td>            <table>                <tbody><tr>                    <td>1</td>                    <td>0</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>2</td>                    <td>1</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>3</td>                    <td>2</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>4</td>                    <td>3</td>                    <td>null</td>                </tr>            </tbody></table>        </td>       </tr></tbody></table>    <h3 id="稀疏多项式案例"><a href="#稀疏多项式案例" class="headerlink" title="稀疏多项式案例"></a>稀疏多项式案例</h3><p>稀疏多项式主要针对那些指数不是连续的多项式，此时我们虽然逻辑结构依然采取数组和链表的方式，但是数组的存储内容发生了变化<br>$$<br>Q_{300}(x) = 1 + 2x + 3x^{200}+4x^{300}<br>$$</p><p>数组存储</p><table><thead><tr><th>数组下标</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>系数</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>指数</td><td>0</td><td>1</td><td>200</td><td>300</td></tr></tbody></table><p>链表的存储依旧不变</p><table>    <tbody><tr>        <td>            <table>                <tbody><tr>                    <td>1</td>                    <td>0</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>2</td>                    <td>1</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>3</td>                    <td>200</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>4</td>                    <td>300</td>                    <td>null</td>                </tr>            </tbody></table>        </td>       </tr></tbody></table><p>❗稀疏多项式运算算法：</p><p><b style="color: chocolate;">数组存储</b></p><p>因为数组存储的数据类型改变，下标与指数不在存在一一对应关系，所以需要引入新的结果数组result存储新的结果多项式！</p><p>（1）分布对多项式P(x)与Q(x)每一项进行遍历，进行比较</p><ul><li>指数相同，做ADD，当系数不为0时加入result</li><li>指数不相同，将指数小的copy到result</li></ul><p>（2）当一个多项式遍历结束，将另一个多项式未遍历的数据copy到result</p><p style="color: blue;">注：这里关于result长度的思考？<br>最好的情况下P(x)与Q(x)每一项一一对应，此时result_length = max(m,n)。<br>最坏的情况下P(x)与Q(x)每一项都不对应result_length = m+n</p><p><b style="color: chocolate;">链表存储</b></p><p>算法一致，好处就是链表不需要再单独创建一个链表，只要遵循上面的算法进行结果集的链接！看下图</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210324232448.jpg" style="width:80%;"><h3 id="图书管理系统案例"><a href="#图书管理系统案例" class="headerlink" title="图书管理系统案例"></a>图书管理系统案例</h3><p>一般涉及到一个图书管理关系表 <strong>Book (IBSN,name,price)</strong></p><p>此时数组和链表存储的数据对象将是抽象数据类型（ADT） Book</p><p><b style="color: navy;">数组存储</b></p><table>    <tbody><tr>        <td>            <table>                <tbody><tr>                    <td>1343442114</td>                    <td>算法4</td>                    <td>100.00</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>23542536</td>                    <td>Java编程思想</td>                    <td>200.00</td>                </tr>            </tbody></table>        </td>     </tr></tbody></table><p><b style="color: navy;">链表存储</b></p><table>    <tbody><tr>        <td>            <table>                <tbody><tr>                    <td>1343442114</td>                    <td>算法4</td>                    <td>100.00</td>                    <td>→</td>                </tr>            </tbody></table>        </td>        <td>            <table>                <tbody><tr>                    <td>23542536</td>                    <td>Java编程思想</td>                    <td>200.00</td>                    <td></td>                </tr>            </tbody></table>        </td>     </tr></tbody></table><h2 id="逻辑结构上的类型定义"><a href="#逻辑结构上的类型定义" class="headerlink" title="逻辑结构上的类型定义"></a>逻辑结构上的类型定义</h2><p>这里主要介绍线性表是如何定义的，具体的共性操作！（不涉及实现问题）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">initList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">destroyList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clearList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listEmpty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">locateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">priorElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>cur_e<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev_e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">nextElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>cur_e<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev_e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listDelete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listTraverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token function">visited</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线性表的数组实现模板</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ElemType elem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//数组静态分配</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span> SqList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span>  <span class="token comment">//数组动态分配</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span> SqList<span class="token punctuation">;</span><span class="token comment">// C语言数组空间分配函数</span>SqList L<span class="token punctuation">;</span>L<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token punctuation">(</span>ElemType<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token operator">*</span>MaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// malloc(m)：分配m字节内存空间</span><span class="token comment">// sizeof(t)：获取t类型的字节长度</span><span class="token comment">// free(p)：释放p指针的空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h1><h2 id="Java简单实现"><a href="#Java简单实现" class="headerlink" title="Java简单实现"></a>Java简单实现</h2><p>线性表基于数组的实现，为了避免重复造轮子这里就直接基于Java内置的动态列表结构<code>ArrayList</code>实现！<span class="github-emoji"><span>😉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SqList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> sqList<span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sqList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getElem</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">priorElem</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> position <span class="token operator">=</span> sqList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">nextElem</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> position <span class="token operator">=</span> sqList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>position <span class="token operator">==</span> sqList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insElem</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">delElem</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sqList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线性表已经销毁！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span> sqList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顺序实现"><a href="#顺序实现" class="headerlink" title="顺序实现"></a>顺序实现</h2><p>当然了，上面的实现也太面向对象了！我们用点C++✍的，看起来更数据结构</p><p>先介绍一下，关于C++函数的一些定义</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">TRUE</span> <span class="token expression"><span class="token number">1</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span> <span class="token expression"><span class="token number">0</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">OK</span> <span class="token expression"><span class="token number">1</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">ERROR</span> <span class="token expression"><span class="token number">0</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">INFEASIBLE</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">OVERFLOW</span> <span class="token expression"><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">char</span> ElemType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来开始实现关于线性表的顺序表示方式的基本操作（简单实现）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    L<span class="token punctuation">.</span>elem <span class="token operator">=</span> new ElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DestroyList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> delete elem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">GetLength</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>        e <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来介绍一些关键点的操作（稍微复杂点）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 顺序查找元素，从数组头部开始依次比对(int = 1,2,3,4....,MAXSIZE)</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">==</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 这里除了for语句实现，还可以依赖while循环实现</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span>e<span class="token operator">!=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顺序表的插入和删除</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 插入在最后、最前、中间[1,2,3,4,5,6,7,insert][1,2,3,4,5,insert,6,7][insert,1,2,3,4,5,6,7]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出对于含有n个元素的数组，插入位置的范围：0~n，并且此时元素的数量&lt;=MAXSIZE</p><p>算法思想：</p><p>1）插入位置的范围是否合法</p><p>2）数组是否已经满、否则返回ERROR</p><p>3）将第n后移第i位元素后移一位</p><p>4）表长加一 OK</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 在第i号位置插入e</span>Status <span class="token function">InsertList_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> MAXSIZE<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 删除最后、最前、中间</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span>null<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>null<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法思想：</p><p>1）删除元素的位置是否合法，以及当前表是否为空</p><p>2）将删除元素保留到e</p><p>3）将第i+1到n号元素前移一位</p><p>4）表长减一 OK</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">DeleteList_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    e <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>Lnode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span>    cha<span class="token punctuation">[</span><span class="token punctuation">]</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>ElemType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的单链表是带有头结点的链表结构</p><p>初始化空链表的思想：</p><p>1）生成新的结点作为头结点，并且将头指针指向头结点</p><p>2）将头结点的指针域置空（代表当前的链表为空）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InitList_L</span> <span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    L <span class="token operator">=</span> new Lnode<span class="token punctuation">;</span>   <span class="token comment">//等价于 L = (LinkList) malloc(sizeOf(Lnode));</span>    L<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>LinkList L<span class="token punctuation">;</span> <span class="token comment">// 代表不带有头结点的链表结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们对于带头结点的链表是以这种方式判空👇</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListEmpty</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于单链表的销毁，我们采取将从头结点的释放开始！</p><p>利用辅助指针p，进行临时存放待删除结点的地址，不断进行头指针的后移，直至链表结点不在存在</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">DestroyList_L</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkList p<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> L<span class="token punctuation">;</span>        L <span class="token operator">=</span> L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        delete p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于清空单链表来说，我们也是释放头结点之后的所有结点，并且将头结点的next域置空！使链表恢复最初的空链表状态！（释放头结点后面的所有结点）</p><p>1）首先将p指向首元结点</p><p>2）将q指向p的后继节点</p><p>3）释放p</p><p>4）将p指向q</p><p>5）q指向q的后继节点</p><p>6）重复 3、4、5直至p结点为空</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ClearList_L</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkList p<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    p <span class="token operator">=</span> L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token comment">/*    while(p) {    q = p-&gt;next;    delete p;     p = q;    }    */</span>    q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        delete p<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>        q <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    L<span class="token operator">-&gt;</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何求取链表的表长（含有多少个元素）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">GetLength_L</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkList p <span class="token operator">=</span> L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取单链表中指定位置的元素（取第i个值）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">GetElem_L</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkList p <span class="token operator">=</span> L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>P<span class="token operator">||</span>j<span class="token operator">&gt;</span>i<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>   <span class="token comment">//条件判断：确定没有检索到第i个值、i的合理性(i&gt;0)</span>    e <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查找链表中指定元素的位置</p><p>1）从首元结点开始，与元素e比较</p><p>2）若相等则返回元素的位置|地址</p><p>3）若查找所有元素都不相等则返回0|null</p><ul><li>返回位置的算法</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">LocateElem_L</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkList p <span class="token operator">=</span> L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>p<span class="token operator">-&gt;</span>data <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回地址的算法</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">Lnode <span class="token operator">*</span> <span class="token function">LocateElem_L</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>p<span class="token operator">-&gt;</span>data<span class="token operator">!=</span>e<span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链表的优势操作</p><p>在第i个元素前面插入结点e</p><p>1）找出指向第i-1个结点的指针</p><p>2）生成结点e</p><p>3）将结点e插入到i前面</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InsertList_L</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> L<span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">||</span>j<span class="token operator">&gt;</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    s <span class="token operator">=</span> new Lnode<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    p <span class="token operator">=</span> s<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除第i个元素</p><p>1）找出指向第i-1个结点的指针</p><p>2）删除结点i</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">DeleteList_L</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> L<span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token operator">||</span>j<span class="token operator">&gt;</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    e <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>    delete p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建链表的两种方式：头插法、尾插法</p><p>头插：</p><p>1）创建带有头结点的空表</p><p>2）创建新的结点e</p><p>3）将头结点的next接入到新的结点后面，再将新的结点接入到头结点之后</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">CreateList_H</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    L <span class="token operator">=</span> new Lnode<span class="token punctuation">;</span>    L<span class="token operator">-&gt;</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">)</span> <span class="token keyword">return</span> ERRO<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> new Lnode<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        L<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尾插：</p><p>1）创建带有头结点的空表</p><p>2）创立指向尾结点的尾指针，并且将尾指针指向头结点</p><p>3）创建新的结点e</p><p>4）将新结点接入到尾指针的next，并且将尾指针指向新结点</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">CreateList_R</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    L <span class="token operator">=</span> new Lnode<span class="token punctuation">;</span>    L<span class="token operator">-&gt;</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    r <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> new Lnode<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        r<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        r <span class="token operator">=</span> p<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="链表拓展"><a href="#链表拓展" class="headerlink" title="链表拓展"></a>链表拓展</h1><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><h3 id="两种结构"><a href="#两种结构" class="headerlink" title="两种结构"></a>两种结构</h3><p>目前只针对单向循环链表，并且是带有头指针或者是尾指针的循环链表！</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210401142223.jpg" style="width:80%"><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs1/20210401142220.jpg" style="width:80%"><p>针对循环链表的判空标准，不会再与单向链表相同</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 循环链表的判断方式     // 单向链表的判断方式   </span>R<span class="token operator">-&gt;</span>next <span class="token operator">==</span> R<span class="token punctuation">;</span>          L<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>H<span class="token operator">-&gt;</span>next <span class="token operator">==</span> H<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以带有头指针的单向循环链表的遍历为例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p <span class="token operator">=</span> H<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> H<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们从上面的结构看出，H循环链表在访问表头元素时，复杂度属于常量阶，而表尾元素依旧是n阶！</p><p>但是对于R循环链表时，访问表头与表尾元素复杂度都是常量阶！这样也看出尾指针循环链表的好处！</p><h3 id="链表合并"><a href="#链表合并" class="headerlink" title="链表合并"></a>链表合并</h3><p>既然尾指针循环链表的好处多多，那么我们可以测试一下，循环链表的合并操作</p><p>1）保留A的头结点指针</p><p>2）将A的表尾指向B的首元结点</p><p>3）释放B的头结点</p><p>4）将B的表尾指向A的表头</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ConnectList_L</span><span class="token punctuation">(</span>LinkList A<span class="token punctuation">,</span>LinkList B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkList p <span class="token operator">=</span> A<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    A<span class="token operator">-&gt;</span>next <span class="token operator">=</span> B<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    delete B<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    B<span class="token operator">-&gt;</span>next <span class="token operator">=</span>  p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>单向链表的弊端在于，当已知一个结点的位置，无法访问它的前驱结点。而双向链表并解决了这样的问题。比如在Java中的LinkedList就是使用的双向链表，那么在对于大量的增删改查时，双向链表的优势就出现了。</p><p>双向链表的结构</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    DuLnode prior<span class="token punctuation">;</span>    DuLnode next<span class="token punctuation">;</span>    ElemType data<span class="token punctuation">;</span><span class="token punctuation">}</span>DuLnode Dulink<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Java的双向链表"><a href="#Java的双向链表" class="headerlink" title="Java的双向链表"></a>Java的双向链表</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token class-name">E</span> item<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>     <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> item<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>对于c系列双向链表的插入，要简化与Java的插入（这里假设插入位置的前驱和后继结点都存在）</p><p>1）遍历获取待插入的第i个结点的指针p</p><p>2）生成插入结点s</p><p>3）将s的前驱和后继指针，分别指向p的前驱和p自身</p><p>4）将p的前驱的后继指向s，将p的前驱指向s</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ListInsert_Dul</span><span class="token punctuation">(</span>Dulink <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    s <span class="token operator">=</span> new DuLnode<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prior<span class="token punctuation">;</span>    s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>prior<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>对于删除操作，假设删除位置的前驱和后继都存在，不考虑删除之后为空表的情况,也不获取删除元素的内容，只考虑删除结点时，删除位置前驱和后继结点的指针变化！</p><p>1）将p的后继的前驱指针指向p的前驱结点</p><p>2）将p的前驱的后继指针指向p的后继结点</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ListDelete_Dul</span><span class="token punctuation">(</span>Dulink <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prior<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>prior<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于复杂的双向链表的增删改查，可以参考 <a href="https://www.matemaster.cn/posts/53096.html#toc-heading-2">LinkedList底层原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的高级数据查询</title>
      <link href="posts/10300.html"/>
      <url>posts/10300.html</url>
      
        <content type="html"><![CDATA[<p><b style="color: red;">本片博文的sql文件</b>👉<a href="https://gitee.com/matemaster/master-depository/blob/master/2021-03-22/Query-for-MySQL.sql">Query-for-MySQL</a></p><p><b style="color: red;">练习数据库SQL文件</b>👉<a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-22/Query-MySQL-Lianxi">Query-MySQL-Lianxi</a></p><p><b style="color: red;">SQL在线练习网站</b>👉<a href="https://sqlzoo.net/">sqlzoo</a></p><h1 id="select结构"><a href="#select结构" class="headerlink" title="select结构"></a>select结构</h1><p>基本结构</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">[</span>field<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">FROM</span>   <span class="token punctuation">[</span><span class="token keyword">table</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span><span class="token keyword">view</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">WHERE</span>  <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用的select结构</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">|</span>select_list<span class="token operator">&gt;</span><span class="token keyword">FROM</span> <span class="token operator">&lt;</span>left_table<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>join_type<span class="token operator">&gt;</span> <span class="token keyword">JOIN</span> <span class="token operator">&lt;</span>right_table<span class="token operator">&gt;</span><span class="token keyword">ON</span> <span class="token operator">&lt;</span>join_condition<span class="token operator">&gt;</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>where_condition<span class="token operator">&gt;</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>group_by_list<span class="token operator">&gt;</span> <span class="token keyword">WITH</span><span class="token operator">&lt;</span>CUBE<span class="token operator">|</span>ROLLUP<span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>having_condition<span class="token operator">&gt;</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>order_by_list<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token keyword">LIMIT</span> <span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>limit_number<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方完整版结构</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">[</span><span class="token keyword">ALL</span> <span class="token operator">|</span> <span class="token keyword">DISTINCT</span> <span class="token operator">|</span> <span class="token keyword">DISTINCTROW</span> <span class="token punctuation">]</span>      <span class="token punctuation">[</span>HIGH_PRIORITY<span class="token punctuation">]</span>      <span class="token punctuation">[</span>STRAIGHT_JOIN<span class="token punctuation">]</span>      <span class="token punctuation">[</span>SQL_SMALL_RESULT<span class="token punctuation">]</span> <span class="token punctuation">[</span>SQL_BIG_RESULT<span class="token punctuation">]</span> <span class="token punctuation">[</span>SQL_BUFFER_RESULT<span class="token punctuation">]</span>      <span class="token punctuation">[</span>SQL_CACHE <span class="token operator">|</span> SQL_NO_CACHE<span class="token punctuation">]</span> <span class="token punctuation">[</span>SQL_CALC_FOUND_ROWS<span class="token punctuation">]</span>    select_expr<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">INTO</span> <span class="token keyword">OUTFILE</span> <span class="token string">'file_name'</span> export_options<span class="token operator">|</span> <span class="token keyword">INTO</span> <span class="token keyword">DUMPFILE</span> <span class="token string">'file_name'</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">FROM</span> table_references    <span class="token punctuation">[</span><span class="token keyword">WHERE</span> where_definition<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> {col_name <span class="token operator">|</span> expr <span class="token operator">|</span> position} <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token keyword">WITH ROLLUP</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">HAVING</span> where_definition<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> {col_name <span class="token operator">|</span> expr <span class="token operator">|</span> position} <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> {<span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">,</span><span class="token punctuation">]</span> row_count <span class="token operator">|</span> row_count <span class="token keyword">OFFSET</span> <span class="token keyword">offset</span>}<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">PROCEDURE</span> procedure_name<span class="token punctuation">(</span>argument_list<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span> <span class="token operator">|</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于完整结构中各个子句的含义，可以在后面的例子程序中理解使用！</p><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>这里就不按照官方完整版结构去描述语句执行顺序，太多！太烦！太难！  我们就只要熟练掌握常用的语句即可！在整个查询操作的过程中，每一次操作都会产生一个虚拟表（virtual table），只有最好的结果表会被返回。</p><p style ="color: hotpink">    （1）FROM：对关系表进行笛卡尔积，产生虚表vt1<br>    （2）ON：对vt1做筛选，将满足条件的元组加入新的虚表vt2<br>    （3）JOIN：对于指定了OUTER JOIN操作，那么完成对应的外连接操作，产生虚表vt3<br>    （4）WHERE：对vt3元组进行条件筛选，将满足条件的元组加入新的虚表vt4<br>    （5）GROUP BY：对vt4结果分组，如果存在 CUBE/ROLLUP操作，那么将操作处理后的结果加入vt5<br>    （6）HAVING：根据过滤条件去除元组，产生虚表vt6<br>    （7）SELECT：投影指定的列，如果存在DISTINCT操作，那么去除重复列后产生虚表vt7<br>    （8）ORDER BY：根据排序的列进行升降序，产生虚表vt8<br>    （9）LIMIT：根据偏移量/行数要求，产生vt9，并将结果表（result table）返回</p><h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><h2 id="栗子关系表"><a href="#栗子关系表" class="headerlink" title="栗子关系表"></a>栗子关系表</h2><p>例子关系表<code>fruits</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># create tb_fruits</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> fruits<span class="token punctuation">(</span>    f_id    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    s_id    <span class="token keyword">INT</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    f_name  <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    f_price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>f_id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># insert data into tb_fruits</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> fruits <span class="token punctuation">(</span>f_id<span class="token punctuation">,</span> s_id<span class="token punctuation">,</span> f_name<span class="token punctuation">,</span> f_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'a1'</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'blackberry'</span><span class="token punctuation">,</span> <span class="token number">10.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'bs1'</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'bs2'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'melon'</span><span class="token punctuation">,</span><span class="token number">8.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'t1'</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token number">10.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'t2'</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token number">5.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'o2'</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">'coconut'</span><span class="token punctuation">,</span> <span class="token number">9.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'c0'</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'a2'</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">'apricot'</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'l2'</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">'lemon'</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'b2'</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">'berry'</span><span class="token punctuation">,</span> <span class="token number">7.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'m1'</span><span class="token punctuation">,</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token number">15.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'m2'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'xbabay'</span><span class="token punctuation">,</span> <span class="token number">2.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'t4'</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token string">'xbababa'</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'m3'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'xxtt'</span><span class="token punctuation">,</span> <span class="token number">11.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'b5'</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子关系表<code>customers</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># create tb_customers</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> customers<span class="token punctuation">(</span>  c_id      <span class="token keyword">int</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  c_name    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_address <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_city    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_zip     <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_contact <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_email   <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># insert data into tb_customers</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customers<span class="token punctuation">(</span>c_id<span class="token punctuation">,</span> c_name<span class="token punctuation">,</span> c_address<span class="token punctuation">,</span> c_city<span class="token punctuation">,</span> c_zip<span class="token punctuation">,</span>  c_contact<span class="token punctuation">,</span> c_email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token string">'RedHook'</span><span class="token punctuation">,</span><span class="token string">'200 Street'</span><span class="token punctuation">,</span><span class="token string">'Tianjin'</span><span class="token punctuation">,</span><span class="token string">'300000'</span><span class="token punctuation">,</span><span class="token string">'LiMing'</span><span class="token punctuation">,</span><span class="token string">'LMing@163.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span> <span class="token string">'Stars'</span><span class="token punctuation">,</span><span class="token string">'333 Fromage Lane'</span><span class="token punctuation">,</span><span class="token string">'Dalian'</span><span class="token punctuation">,</span><span class="token string">'116000'</span><span class="token punctuation">,</span><span class="token string">'Zhangbo'</span><span class="token punctuation">,</span><span class="token string">'Jerry@hotmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10003</span><span class="token punctuation">,</span> <span class="token string">'Netbhood'</span><span class="token punctuation">,</span><span class="token string">'1 Sunny Place'</span><span class="token punctuation">,</span><span class="token string">'Qingdao'</span><span class="token punctuation">,</span><span class="token string">'266000'</span><span class="token punctuation">,</span><span class="token string">'LuoCong'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10004</span><span class="token punctuation">,</span> <span class="token string">'JOTO'</span><span class="token punctuation">,</span><span class="token string">'829 Riverside Drive'</span><span class="token punctuation">,</span><span class="token string">'Haikou'</span><span class="token punctuation">,</span><span class="token string">'570000'</span><span class="token punctuation">,</span><span class="token string">'YangShan'</span><span class="token punctuation">,</span><span class="token string">'sam@hotmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子关系表<code>orderitems</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># create tb_orderitems</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orderitems<span class="token punctuation">(</span>  o_num      <span class="token keyword">int</span>          <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  o_item     <span class="token keyword">int</span>          <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  f_id       <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  quantity   <span class="token keyword">int</span>          <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  item_price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>o_num<span class="token punctuation">,</span>o_item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment"># insert data into tb_orderitems</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderitems<span class="token punctuation">(</span>o_num<span class="token punctuation">,</span> o_item<span class="token punctuation">,</span> f_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">30001</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a1'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30001</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30001</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'bs1'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30001</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'bs2'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">9.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30002</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30003</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c0'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30004</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'o2'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2.50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30005</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c0'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30005</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8.99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30005</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a2'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30005</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'m1'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">14.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>相当于关系代数中投影关系R的全部列，等价于select所有列！<br>$$<br>Π_{f_id,s_id,f_name,f_price}(fruits)<br>$$</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> a1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> a2   <span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> b1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> b2   <span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span> b5   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> bs1  <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span> bs2  <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span> c0   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span> l2   <span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span> m1   <span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span> m2   <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span> m3   <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span> o2   <span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span> t1   <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span> t2   <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span> t4   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以指定某个（某些）字段，并且可以控制字段是否去除重复的属性值！<br>$$<br>Π_{f_name,f_price}(fruits)<br>$$</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> f_name<span class="token punctuation">,</span> f_price <span class="token keyword">FROM</span> fruits<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>通过<code>WHERE</code>子句对列进行条件判断，筛选出满足条件的记录！相等于关系代数中的选择操作<br>$$<br>Π_{f_name,f_price}(σ_{f_price &lt; 10}(fruits))<br>$$</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> f_name<span class="token punctuation">,</span> f_price<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> f_price <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------+---------+</span><span class="token operator">|</span> f_name  <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+</span><span class="token operator">|</span> apple   <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> apricot <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> berry   <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span> xxxx    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> melon   <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span> cherry  <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span> lemon   <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span> xbabay  <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span> coconut <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span> grape   <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span> xbababa <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>WHERE</code>支持条件运算符，以及逻辑连接词：<code>AND 、OR 、IN 、BEWTEEN AND、 IS NULL、 NOT 、 LIKE</code></p><p><code>IN</code>查询：查询所有s_id不等于101也不等于102的记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> s_id<span class="token punctuation">,</span>f_name<span class="token punctuation">,</span> f_price<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> s_id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> f_name<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+---------+---------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> f_name  <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------+---------+</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> apricot <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> berry   <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> coconut <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> lemon   <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> mango   <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> melon   <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xbababa <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xbabay  <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xxtt    <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>BEWTEEN AND</code>查询：查询价格在2.00元到10.20元之间的水果名称和价格</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> f_name<span class="token punctuation">,</span> f_price<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> f_price <span class="token operator">BETWEEN</span> <span class="token number">2.00</span> <span class="token operator">AND</span> <span class="token number">10.20</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>LIKE</code>查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查找所有以’b’字母开头的水果</span><span class="token keyword">SELECT</span> f_id<span class="token punctuation">,</span> f_name<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> f_name <span class="token operator">LIKE</span> <span class="token string">'b%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> f_name     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------------+</span><span class="token operator">|</span> b1   <span class="token operator">|</span> blackberry <span class="token operator">|</span><span class="token operator">|</span> b2   <span class="token operator">|</span> berry      <span class="token operator">|</span><span class="token operator">|</span> t1   <span class="token operator">|</span> banana     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------------+</span><span class="token comment"># 查询f_name中包含字母’g’的记录</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> f_id<span class="token punctuation">,</span> f_name    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> fruits    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> f_name <span class="token operator">LIKE</span> <span class="token string">'%g%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> f_name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> bs1  <span class="token operator">|</span> orange <span class="token operator">|</span><span class="token operator">|</span> m1   <span class="token operator">|</span> mango  <span class="token operator">|</span><span class="token operator">|</span> t2   <span class="token operator">|</span> grape  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token comment"># 查询以’b’开头，并以’y’结尾的水果的名称</span><span class="token keyword">SELECT</span> f_name<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> f_name <span class="token operator">LIKE</span> <span class="token string">'b%y'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+</span><span class="token operator">|</span> f_name     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+</span><span class="token operator">|</span> blackberry <span class="token operator">|</span><span class="token operator">|</span> berry      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+</span><span class="token comment"># 查询以字母’y’结尾，且’y’前面只有4个字母的记录</span><span class="token keyword">SELECT</span> f_id<span class="token punctuation">,</span> f_name<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> f_name <span class="token operator">LIKE</span> <span class="token string">'____y'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> f_name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span class="token operator">|</span> b2   <span class="token operator">|</span> berry  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NULL</code>查询：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询customers表中c_email为空的记录的c_id、c_name和c_email字段值</span><span class="token keyword">SELECT</span> c_id<span class="token punctuation">,</span> c_name<span class="token punctuation">,</span>c_email<span class="token keyword">FROM</span> customers<span class="token keyword">WHERE</span> c_email <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+----------+---------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> c_name   <span class="token operator">|</span> c_email <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+---------+</span><span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> Netbhood <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+---------+</span><span class="token comment"># 查询customers表中c_email不为空的记录的c_id、c_name和c_email字段值</span><span class="token keyword">SELECT</span> c_id<span class="token punctuation">,</span> c_name<span class="token punctuation">,</span>c_email<span class="token keyword">FROM</span> customers<span class="token keyword">WHERE</span> c_email <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------+-------------------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> c_name  <span class="token operator">|</span> c_email           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+-------------------+</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> RedHook <span class="token operator">|</span> LMing<span class="token variable">@163.com</span>     <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span> Stars   <span class="token operator">|</span> Jerry<span class="token variable">@hotmail.com</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> JOTO    <span class="token operator">|</span> sam<span class="token variable">@hotmail.com</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+-------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>AND</code>查询：在fruits表中查询s_id = 101，并且f_price大于等于5的水果价格和名称</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> f_id<span class="token punctuation">,</span> f_price<span class="token punctuation">,</span> f_name<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> s_id <span class="token operator">=</span> <span class="token string">'101'</span> <span class="token operator">AND</span> f_price <span class="token operator">&gt;=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+---------+------------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> f_price <span class="token operator">|</span> f_name     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------+------------+</span><span class="token operator">|</span> a1   <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span> apple      <span class="token operator">|</span><span class="token operator">|</span> b1   <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+---------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>OR</code>查询：查询s_id=101或者s_id=102的水果供应商的f_price和f_name</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> s_id<span class="token punctuation">,</span>f_name<span class="token punctuation">,</span> f_price<span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> s_id <span class="token operator">=</span> <span class="token number">101</span> <span class="token operator">OR</span> s_id <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------------+---------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------------+---------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>利用<code>ORDER BY</code>子句，对指定的列进行排序操作，默认为<code>ASC</code>若要降序就必须利用<code>DESC</code>指定降序操作！</p><p><code>ORDER BY</code>查询：查询fruits表，先按f_price降序排序，再按f_name字段升序排序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> f_price<span class="token punctuation">,</span> f_name<span class="token keyword">FROM</span> fruits<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> f_price <span class="token keyword">DESC</span><span class="token punctuation">,</span> f_name<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------+------------+</span><span class="token operator">|</span> f_price <span class="token operator">|</span> f_name     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+------------+</span><span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span> mango      <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span> xxtt       <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span> orange     <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span> banana     <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span> coconut    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span> melon      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span> berry      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span> lemon      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span> grape      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span> apple      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span> xbababa    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span> xxxx       <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span> xbabay     <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span> apricot    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p><code>GROUP BY</code>查询：根据s_id对fruits表中的数据进行分组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> s_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Total<span class="token keyword">FROM</span> fruits<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> Total <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>“注”</strong> ：这里通过一个聚集函数<code>COUNT</code>计算出每个分组含有的数目</p><p>当然我们还可以利用一个特殊的函数<code>GROUP_CONCAT</code>将每个分组的水果名称显示出来，并且通过<code>HAVING</code>子句对分组进行过滤，排除分组数目为一个的组的水果名称！</p><p>根据s_id对fruits表中的数据进行分组，并显示水果种类大于1的分组信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> s_id<span class="token punctuation">,</span> GROUP_CONCAT<span class="token punctuation">(</span>f_name<span class="token punctuation">)</span> <span class="token keyword">AS</span> Names    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> fruits    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>f_name<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+-------------------------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> Names                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------------------------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple<span class="token punctuation">,</span>blackberry<span class="token punctuation">,</span>cherry <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> orange<span class="token punctuation">,</span>banana<span class="token punctuation">,</span>grape     <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> apricot<span class="token punctuation">,</span>coconut         <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> berry<span class="token punctuation">,</span>lemon             <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> melon<span class="token punctuation">,</span>xbabay<span class="token punctuation">,</span>xxtt       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx<span class="token punctuation">,</span>xbababa            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>MySQL</code>中还提供了一个关键操作<code>WITH ROLLUP</code>统计记录的数量。<b style="color: chocolate;">（ORDER BY与WITH ROLLUP具有不兼容性）</b></p><p>根据s_id对fruits表中的数据进行分组，并显示记录数量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> s_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Total    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> fruits    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> Total <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">16</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当前所有的分组都是针对一个列，那么<code>GROUP BY</code>依旧支持是多列分组！</p><p>根据s_id和f_name字段对fruits表中的数据进行分组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span>  <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">group</span> <span class="token keyword">by</span> s_id<span class="token punctuation">,</span>f_name<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> a1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> a2   <span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> b1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> b2   <span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span> b5   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> bs1  <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span> bs2  <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span> c0   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span> l2   <span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span> m1   <span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span> m2   <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span> m3   <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span> o2   <span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span> t1   <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span> t2   <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span> t4   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>GROUP BY</code>和<code>ORDER BY</code>配合使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> o_num<span class="token punctuation">,</span>  <span class="token function">SUM</span><span class="token punctuation">(</span>quantity <span class="token operator">*</span> item_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> orderTotal    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> orderitems    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> o_num    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token operator">*</span>item_price<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">100</span>    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> orderTotal<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+------------+</span><span class="token operator">|</span> o_num <span class="token operator">|</span> orderTotal <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+------------+</span><span class="token operator">|</span> <span class="token number">30004</span> <span class="token operator">|</span>     <span class="token number">125.00</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span>     <span class="token number">236.85</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30001</span> <span class="token operator">|</span>     <span class="token number">268.80</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span>    <span class="token number">1000.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="limit限制结果数量"><a href="#limit限制结果数量" class="headerlink" title="limit限制结果数量"></a>limit限制结果数量</h3><p>显示fruits表查询结果的前4行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">From</span> fruits <span class="token keyword">LIMIT</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> a1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> a2   <span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span> b1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> b2   <span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在fruits表中，使用LIMIT子句，返回从第5个记录开始的，行数长度为3的记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">From</span> fruits <span class="token keyword">LIMIT</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+--------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+--------+---------+</span><span class="token operator">|</span> b5   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx   <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> bs1  <span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> orange <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span> bs2  <span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> melon  <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+--------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><table><thead><tr><th>聚集函数</th></tr></thead><tbody><tr><td>MAX()</td></tr><tr><td>MIN()</td></tr><tr><td>AVG()</td></tr><tr><td>COUNT()</td></tr><tr><td>SUM()</td></tr></tbody></table><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><p>多表查询主要是加入了多个表的连接查询操作，主要分为 <strong>theta-join</strong> 和 <strong>outer-join</strong></p><h2 id="栗子关系表-1"><a href="#栗子关系表-1" class="headerlink" title="栗子关系表"></a>栗子关系表</h2><p>栗子关系<code>suppliers</code>：供应商</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># create tb_suppliers</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> suppliers<span class="token punctuation">(</span>  s_id      <span class="token keyword">int</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  s_name    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  s_city    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  s_zip     <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  s_call    <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>s_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment"># insert data into tb_suppliers</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> suppliers<span class="token punctuation">(</span>s_id<span class="token punctuation">,</span> s_name<span class="token punctuation">,</span>s_city<span class="token punctuation">,</span>  s_zip<span class="token punctuation">,</span> s_call<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'FastFruit Inc.'</span><span class="token punctuation">,</span><span class="token string">'Tianjin'</span><span class="token punctuation">,</span><span class="token string">'300000'</span><span class="token punctuation">,</span><span class="token string">'48075'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'LT Supplies'</span><span class="token punctuation">,</span><span class="token string">'Chongqing'</span><span class="token punctuation">,</span><span class="token string">'400000'</span><span class="token punctuation">,</span><span class="token string">'44333'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">'ACME'</span><span class="token punctuation">,</span><span class="token string">'Shanghai'</span><span class="token punctuation">,</span><span class="token string">'200000'</span><span class="token punctuation">,</span><span class="token string">'90046'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">'FNK Inc.'</span><span class="token punctuation">,</span><span class="token string">'Zhongshan'</span><span class="token punctuation">,</span><span class="token string">'528437'</span><span class="token punctuation">,</span><span class="token string">'11111'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'Good Set'</span><span class="token punctuation">,</span><span class="token string">'Taiyuang'</span><span class="token punctuation">,</span><span class="token string">'030000'</span><span class="token punctuation">,</span> <span class="token string">'22222'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token string">'Just Eat Ours'</span><span class="token punctuation">,</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span><span class="token string">'010'</span><span class="token punctuation">,</span> <span class="token string">'45678'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token string">'DK Inc.'</span><span class="token punctuation">,</span><span class="token string">'Zhengzhou'</span><span class="token punctuation">,</span><span class="token string">'450000'</span><span class="token punctuation">,</span> <span class="token string">'33332'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栗子关系表<code>orders</code>：订单</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># create tb_orders</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orders<span class="token punctuation">(</span>  o_num  <span class="token keyword">int</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  o_date <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  c_id   <span class="token keyword">int</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>o_num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment"># insert data into tb_orders</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orders<span class="token punctuation">(</span>o_num<span class="token punctuation">,</span> o_date<span class="token punctuation">,</span> c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">30001</span><span class="token punctuation">,</span> <span class="token string">'2008-09-01'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30002</span><span class="token punctuation">,</span> <span class="token string">'2008-09-12'</span><span class="token punctuation">,</span> <span class="token number">10003</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30003</span><span class="token punctuation">,</span> <span class="token string">'2008-09-30'</span><span class="token punctuation">,</span> <span class="token number">10004</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30004</span><span class="token punctuation">,</span> <span class="token string">'2008-10-03'</span><span class="token punctuation">,</span> <span class="token number">10005</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30005</span><span class="token punctuation">,</span> <span class="token string">'2008-10-08'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> suppliers<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span> s_name<span class="token punctuation">,</span>f_name<span class="token punctuation">,</span> f_price    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> suppliers <span class="token keyword">natural</span> <span class="token keyword">join</span> fruits<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> s_name         <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> Just Eat Ours  <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>通过广义的笛卡尔积实现查询，供应商供应的名称、id，以及供应水果的名称、销售价格！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span>  <span class="token keyword">SELECT</span> suppliers<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span> s_name<span class="token punctuation">,</span>f_name<span class="token punctuation">,</span> f_price    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">FROM</span> fruits <span class="token punctuation">,</span>suppliers    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">WHERE</span> fruits<span class="token punctuation">.</span>s_id <span class="token operator">=</span> suppliers<span class="token punctuation">.</span>s_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> s_name         <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> Just Eat Ours  <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的操作很显然这个是等价于自然连接操作<strong>（Natural-Join）</strong>，上面代码有另外的等价写法！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span>  <span class="token keyword">SELECT</span> suppliers<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span> s_name<span class="token punctuation">,</span>f_name<span class="token punctuation">,</span> f_price    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">FROM</span> fruits <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> suppliers    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">ON</span> fruits<span class="token punctuation">.</span>s_id <span class="token operator">=</span> suppliers<span class="token punctuation">.</span>s_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> s_name         <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> Just Eat Ours  <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时才是真正的连接查询，（INNER JOIN…ON）的语法属于一般情况的（θ-jion）。连接条件θ：ON 子句表示，对于实现自然连接时，也可以加入using子句（INNER JOIN…USING(col_name)）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span>    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> fruits <span class="token keyword">join</span> suppliers <span class="token keyword">using</span><span class="token punctuation">(</span>s_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+----------------+-----------+--------+--------+</span><span class="token operator">|</span> s_id <span class="token operator">|</span> f_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span> s_name         <span class="token operator">|</span> s_city    <span class="token operator">|</span> s_zip  <span class="token operator">|</span> s_call <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+----------------+-----------+--------+--------+</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> a1   <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> Tianjin   <span class="token operator">|</span> <span class="token number">300000</span> <span class="token operator">|</span> <span class="token number">48075</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> a2   <span class="token operator">|</span> apricot    <span class="token operator">|</span>    <span class="token number">2.20</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> Shanghai  <span class="token operator">|</span> <span class="token number">200000</span> <span class="token operator">|</span> <span class="token number">90046</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> b1   <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> Tianjin   <span class="token operator">|</span> <span class="token number">300000</span> <span class="token operator">|</span> <span class="token number">48075</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> b2   <span class="token operator">|</span> berry      <span class="token operator">|</span>    <span class="token number">7.60</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> Zhongshan <span class="token operator">|</span> <span class="token number">528437</span> <span class="token operator">|</span> <span class="token number">11111</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> b5   <span class="token operator">|</span> xxxx       <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> Zhengzhou <span class="token operator">|</span> <span class="token number">450000</span> <span class="token operator">|</span> <span class="token number">33332</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> bs1  <span class="token operator">|</span> orange     <span class="token operator">|</span>   <span class="token number">11.20</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> Chongqing <span class="token operator">|</span> <span class="token number">400000</span> <span class="token operator">|</span> <span class="token number">44333</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> bs2  <span class="token operator">|</span> melon      <span class="token operator">|</span>    <span class="token number">8.20</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> Taiyuang  <span class="token operator">|</span> <span class="token number">030000</span> <span class="token operator">|</span> <span class="token number">22222</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> c0   <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span> FastFruit Inc<span class="token punctuation">.</span> <span class="token operator">|</span> Tianjin   <span class="token operator">|</span> <span class="token number">300000</span> <span class="token operator">|</span> <span class="token number">48075</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">104</span> <span class="token operator">|</span> l2   <span class="token operator">|</span> lemon      <span class="token operator">|</span>    <span class="token number">6.40</span> <span class="token operator">|</span> FNK Inc<span class="token punctuation">.</span>       <span class="token operator">|</span> Zhongshan <span class="token operator">|</span> <span class="token number">528437</span> <span class="token operator">|</span> <span class="token number">11111</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">106</span> <span class="token operator">|</span> m1   <span class="token operator">|</span> mango      <span class="token operator">|</span>   <span class="token number">15.60</span> <span class="token operator">|</span> Just Eat Ours  <span class="token operator">|</span> Beijing   <span class="token operator">|</span> <span class="token number">010</span>    <span class="token operator">|</span> <span class="token number">45678</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> m2   <span class="token operator">|</span> xbabay     <span class="token operator">|</span>    <span class="token number">2.60</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> Taiyuang  <span class="token operator">|</span> <span class="token number">030000</span> <span class="token operator">|</span> <span class="token number">22222</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">105</span> <span class="token operator">|</span> m3   <span class="token operator">|</span> xxtt       <span class="token operator">|</span>   <span class="token number">11.60</span> <span class="token operator">|</span> Good <span class="token keyword">Set</span>       <span class="token operator">|</span> Taiyuang  <span class="token operator">|</span> <span class="token number">030000</span> <span class="token operator">|</span> <span class="token number">22222</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">103</span> <span class="token operator">|</span> o2   <span class="token operator">|</span> coconut    <span class="token operator">|</span>    <span class="token number">9.20</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> Shanghai  <span class="token operator">|</span> <span class="token number">200000</span> <span class="token operator">|</span> <span class="token number">90046</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> t1   <span class="token operator">|</span> banana     <span class="token operator">|</span>   <span class="token number">10.30</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> Chongqing <span class="token operator">|</span> <span class="token number">400000</span> <span class="token operator">|</span> <span class="token number">44333</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">102</span> <span class="token operator">|</span> t2   <span class="token operator">|</span> grape      <span class="token operator">|</span>    <span class="token number">5.30</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> Chongqing <span class="token operator">|</span> <span class="token number">400000</span> <span class="token operator">|</span> <span class="token number">44333</span>  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> t4   <span class="token operator">|</span> xbababa    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span> DK Inc<span class="token punctuation">.</span>        <span class="token operator">|</span> Zhengzhou <span class="token operator">|</span> <span class="token number">450000</span> <span class="token operator">|</span> <span class="token number">33332</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+----------------+-----------+--------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>Π_{s_id,s_name,f_name,f_price}(fruits▻◅suppliers)<br>$$</p><p>$$<br>Π_{s_id,s_name,f_name,f_price}(σ_{fruits.s_id = suppliers.s_id}(fruits×suppliers))<br>$$</p><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>一般的（θ-jion）只能保留满足匹配条件的元组，对于哪些不满足的元组删除。所以引入了外连接，对于不满足连接条件的元组，采取对应属性列置空的情况，保留相应的不匹配元组。</p><ul><li><strong>LEFT OUTER JOIN</strong></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">-------+----------+---------------------+---------+--------+-----------+-------------------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> c_name   <span class="token operator">|</span> c_address           <span class="token operator">|</span> c_city  <span class="token operator">|</span> c_zip  <span class="token operator">|</span> c_contact <span class="token operator">|</span> c_email           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+---------------------+---------+--------+-----------+-------------------+</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> RedHook  <span class="token operator">|</span> <span class="token number">200</span> Street          <span class="token operator">|</span> Tianjin <span class="token operator">|</span> <span class="token number">300000</span> <span class="token operator">|</span> LiMing    <span class="token operator">|</span> LMing<span class="token variable">@163.com</span>     <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span> Stars    <span class="token operator">|</span> <span class="token number">333</span> Fromage Lane    <span class="token operator">|</span> Dalian  <span class="token operator">|</span> <span class="token number">116000</span> <span class="token operator">|</span> Zhangbo   <span class="token operator">|</span> Jerry<span class="token variable">@hotmail.com</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> Netbhood <span class="token operator">|</span> <span class="token number">1</span> Sunny Place       <span class="token operator">|</span> Qingdao <span class="token operator">|</span> <span class="token number">266000</span> <span class="token operator">|</span> LuoCong   <span class="token operator">|</span> <span class="token boolean">NULL</span>              <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> JOTO     <span class="token operator">|</span> <span class="token number">829</span> Riverside Drive <span class="token operator">|</span> Haikou  <span class="token operator">|</span> <span class="token number">570000</span> <span class="token operator">|</span> YangShan  <span class="token operator">|</span> sam<span class="token variable">@hotmail.com</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+---------------------+---------+--------+-----------+-------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">-------+---------------------+-------+</span><span class="token operator">|</span> o_num <span class="token operator">|</span> o_date              <span class="token operator">|</span> c_id  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------------------+-------+</span><span class="token operator">|</span> <span class="token number">30001</span> <span class="token operator">|</span> <span class="token number">2008</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30002</span> <span class="token operator">|</span> <span class="token number">2008</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span> <span class="token number">2008</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30004</span> <span class="token operator">|</span> <span class="token number">2008</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token number">10005</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span> <span class="token number">2008</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------------------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span>  <span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>o_num    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">FROM</span> customers <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>c_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>c_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> o_num <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> <span class="token number">30002</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里看出，对于没有订单的客户 10002采取保留的方式！</p><ul><li><strong>RIGHT OUTER JOIN</strong></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span>  <span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>o_num    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">FROM</span> customers <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders    <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>c_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>c_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> o_num <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> <span class="token number">30002</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">30004</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里对于订单号 30004对应的客户id并没有在客户信息表当中，所以依旧采取保留。</p><p>因为MySQL不支持全外连接，所以为了实现全外连接就必须依赖于<strong>（union[ALL]）</strong>合并左右外连接结果来实现！</p><p>一般情况：最好使用 <strong>UNION ALL</strong>这样会保留重复的列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>o_num    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> customers <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>c_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>c_id    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">union</span>    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>o_num    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> customers <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>c_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>c_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span> o_num <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30001</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10002</span> <span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10003</span> <span class="token operator">|</span> <span class="token number">30002</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">30004</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里做一个简单的总结：自然连接<strong>（NATURAL JOIN）</strong>等价于<strong>（[INNER] JOIN…USING…）</strong></p><p>而更为一般情况的<strong>（θ-join）</strong>则可以使用<strong>（[INNER] JOIN…ON…）</strong></p><p>左外连接<strong>（LEFT [OUTER] JOIN…ON…）</strong>右外连接<strong>（RIGHT [OUTER] JOIN…ON…）</strong></p><p>全外连接：<strong>（LEFT [OUTER] JOIN…ON…）</strong> <strong>UNION</strong> <strong>（RIGHT [OUTER] JOIN…ON…）</strong></p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>子查询：利用嵌套的关系，使用内层<strong>select</strong>的结果去作为外层查询的条件实现查询功能！</p><p>一般情况，子查询会利用<code>IN、ALL、ANY、SOME、EXISTS、θ</code>一些关键字和比较运算符θ</p><p>先创建一个栗子</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">table</span> tbl1 <span class="token punctuation">(</span> num1 <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">table</span> tbl2 <span class="token punctuation">(</span> num2 <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ANY/SOME</li></ul><p>从tbl1中找出大于tbl2任意一个值的num1列元组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> num1 <span class="token keyword">FROM</span> tbl1 <span class="token keyword">WHERE</span> num1 <span class="token operator">&gt;</span> <span class="token keyword">ANY</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> num2 <span class="token keyword">FROM</span> tbl2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span> num1 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span>   <span class="token number">13</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ALL</li></ul><p>从tbl1中找出大于tbl2所有值的num1列元组</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> num1 <span class="token keyword">FROM</span> tbl1 <span class="token keyword">WHERE</span> num1 <span class="token operator">&gt;</span> <span class="token keyword">ALL</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> num2 <span class="token keyword">FROM</span> tbl2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span> num1 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>EXISTS</li></ul><p>从供应商表中查找是否存在 107号供应商，若存在的话，找出由它供应的水果所有信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> fruits<span class="token keyword">where</span> s_id <span class="token operator">=</span> <span class="token number">107</span> <span class="token operator">and</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s_id <span class="token keyword">from</span> suppliers <span class="token keyword">where</span> s_id <span class="token operator">=</span> <span class="token number">107</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+---------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name  <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+---------+---------+</span><span class="token operator">|</span> b5   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xxxx    <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">|</span> t4   <span class="token operator">|</span>  <span class="token number">107</span> <span class="token operator">|</span> xbababa <span class="token operator">|</span>    <span class="token number">3.60</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+---------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过子查询的结果判断：若查询的结果不为空，也就是EXISTS存在，那么就返回true，继续下一步外层查询</p><ul><li>IN</li></ul><p>在orderitems表中查询f_id为c0的订单号，并根据订单号查询具有订单号的客户c_id</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> c_id <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> o_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> o_num  <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> f_id <span class="token operator">=</span> <span class="token string">'c0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上的步骤可以分为两步进行：</p><p>（1） 在订单信息中查询f_id为c0的订单号码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> o_num  <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> f_id <span class="token operator">=</span> <span class="token string">'c0'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token operator">|</span> o_num <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token operator">|</span> <span class="token number">30003</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">30005</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）外层查询根据查询结果（30003,30005）进行下一步操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> c_id <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> o_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">30003</span><span class="token punctuation">,</span> <span class="token number">30005</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># final result</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token operator">|</span> c_id  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+</span><span class="token operator">|</span> <span class="token number">10004</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10001</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>比较运算符</li></ul><p>查询由天津供应商供应的水果的所有信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits<span class="token keyword">WHERE</span> s_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> s1<span class="token punctuation">.</span>s_id <span class="token keyword">FROM</span> suppliers <span class="token keyword">AS</span> s1 <span class="token keyword">WHERE</span> s1<span class="token punctuation">.</span>s_city <span class="token operator">=</span> <span class="token string">'Tianjin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># final result</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> f_id <span class="token operator">|</span> s_id <span class="token operator">|</span> f_name     <span class="token operator">|</span> f_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span class="token operator">|</span> a1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> apple      <span class="token operator">|</span>    <span class="token number">5.20</span> <span class="token operator">|</span><span class="token operator">|</span> b1   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> blackberry <span class="token operator">|</span>   <span class="token number">10.20</span> <span class="token operator">|</span><span class="token operator">|</span> c0   <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span> cherry     <span class="token operator">|</span>    <span class="token number">3.20</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）根据city为天津的条件，查询出供应商的s_id</p><p>（2）根据子查询的s_id查询由该供应商供应的水果</p><p>这里在子查询中涉及到了一次<strong>改名</strong>操作，<strong>改名操作的作用主要两点：1.方便取名 2.防止嵌套或自连接带来的歧义</strong></p><h1 id="Query-MySQL-练习"><a href="#Query-MySQL-练习" class="headerlink" title="Query-MySQL-练习"></a>Query-MySQL-练习</h1><h2 id="练习数据库结构"><a href="#练习数据库结构" class="headerlink" title="练习数据库结构"></a>练习数据库结构</h2><p><b style="color: red;">练习数据库SQL文件</b>👉<a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-22/Query-MySQL-Lianxi">Query-MySQL-Lianxi</a></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">-----------------------+</span><span class="token operator">|</span> Tables_in_query<span class="token operator">-</span>mysql <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------------+</span><span class="token operator">|</span> customers             <span class="token operator">|</span><span class="token operator">|</span> orderitems            <span class="token operator">|</span><span class="token operator">|</span> orders                <span class="token operator">|</span><span class="token operator">|</span> productnotes          <span class="token operator">|</span><span class="token operator">|</span> products              <span class="token operator">|</span><span class="token operator">|</span> vendors               <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来查看一下各个表格的结构：</p><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210322215407.png"></p><ul><li><code>vendors</code>：销售产品供应商</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> vendors<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------+----------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field        <span class="token operator">|</span> <span class="token keyword">Type</span>     <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+----------+------+-----+---------+----------------+</span><span class="token operator">|</span> vend_id      <span class="token operator">|</span> <span class="token keyword">int</span>      <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> vend_name    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> vend_address <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> vend_city    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> vend_state   <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> vend_zip     <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> vend_country <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+----------+------+-----+---------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>customers</code>：顾客</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> customers<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------+-----------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field        <span class="token operator">|</span> <span class="token keyword">Type</span>      <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+-----------+------+-----+---------+----------------+</span><span class="token operator">|</span> cust_id      <span class="token operator">|</span> <span class="token keyword">int</span>       <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> cust_name    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_address <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_city    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_state   <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_zip     <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_country <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_contact <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_email   <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+-----------+------+-----+---------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>products</code>：产品</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> products<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field      <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span class="token operator">|</span> prod_id    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> vend_id    <span class="token operator">|</span> <span class="token keyword">int</span>          <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> prod_name  <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>    <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> prod_price <span class="token operator">|</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> prod_desc  <span class="token operator">|</span> <span class="token keyword">text</span>         <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>orders</code>：顾客订单</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> orders<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+----------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field      <span class="token operator">|</span> <span class="token keyword">Type</span>     <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+----------+------+-----+---------+----------------+</span><span class="token operator">|</span> order_num  <span class="token operator">|</span> <span class="token keyword">int</span>      <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> order_date <span class="token operator">|</span> <span class="token keyword">datetime</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> cust_id    <span class="token operator">|</span> <span class="token keyword">int</span>      <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+----------+------+-----+---------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>orderitems</code>：订单详细信息</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> orderitems<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field      <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span class="token operator">|</span> order_num  <span class="token operator">|</span> <span class="token keyword">int</span>          <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> order_item <span class="token operator">|</span> <span class="token keyword">int</span>          <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> prod_id    <span class="token operator">|</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> quantity   <span class="token operator">|</span> <span class="token keyword">int</span>          <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> item_price <span class="token operator">|</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+--------------+------+-----+---------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库表数据"><a href="#数据库表数据" class="headerlink" title="数据库表数据"></a>数据库表数据</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># data in vendors</span><span class="token operator">+</span><span class="token comment">---------+----------------+-----------------+-------------+------------+----------+--------------+</span><span class="token operator">|</span> vend_id <span class="token operator">|</span> vend_name      <span class="token operator">|</span> vend_address    <span class="token operator">|</span> vend_city   <span class="token operator">|</span> vend_state <span class="token operator">|</span> vend_zip <span class="token operator">|</span> vend_country <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+----------------+-----------------+-------------+------------+----------+--------------+</span><span class="token operator">|</span>    <span class="token number">1001</span> <span class="token operator">|</span> Anvils R Us    <span class="token operator">|</span> <span class="token number">123</span> Main Street <span class="token operator">|</span> Southfield  <span class="token operator">|</span> MI         <span class="token operator">|</span> <span class="token number">48075</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1002</span> <span class="token operator">|</span> LT Supplies    <span class="token operator">|</span> <span class="token number">500</span> Park Street <span class="token operator">|</span> Anytown     <span class="token operator">|</span> OH         <span class="token operator">|</span> <span class="token number">44333</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> ACME           <span class="token operator">|</span> <span class="token number">555</span> High Street <span class="token operator">|</span> Los Angeles <span class="token operator">|</span> CA         <span class="token operator">|</span> <span class="token number">90046</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1004</span> <span class="token operator">|</span> Furball Inc<span class="token punctuation">.</span>   <span class="token operator">|</span> <span class="token number">1000</span> <span class="token number">5</span>th Avenue <span class="token operator">|</span> New York    <span class="token operator">|</span> NY         <span class="token operator">|</span> <span class="token number">11111</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1005</span> <span class="token operator">|</span> Jet <span class="token keyword">Set</span>        <span class="token operator">|</span> <span class="token number">42</span> Galaxy Road  <span class="token operator">|</span> London      <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> N16 <span class="token number">6</span>PS  <span class="token operator">|</span> England      <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1006</span> <span class="token operator">|</span> Jouets Et Ours <span class="token operator">|</span> <span class="token number">1</span> Rue Amusement <span class="token operator">|</span> Paris       <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token number">45678</span>    <span class="token operator">|</span> France       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+----------------+-----------------+-------------+------------+----------+--------------+</span><span class="token comment"># data in customers</span><span class="token operator">+</span><span class="token comment">---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span><span class="token operator">|</span> cust_id <span class="token operator">|</span> cust_name      <span class="token operator">|</span> cust_address        <span class="token operator">|</span> cust_city <span class="token operator">|</span> cust_state <span class="token operator">|</span> cust_zip <span class="token operator">|</span> cust_country <span class="token operator">|</span> cust_contact <span class="token operator">|</span> cust_email          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span><span class="token operator">|</span>   <span class="token number">10001</span> <span class="token operator">|</span> Coyote Inc<span class="token punctuation">.</span>    <span class="token operator">|</span> <span class="token number">200</span> Maple Lane      <span class="token operator">|</span> Detroit   <span class="token operator">|</span> MI         <span class="token operator">|</span> <span class="token number">44444</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span> Y Lee        <span class="token operator">|</span> ylee<span class="token variable">@coyote.com</span>     <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10002</span> <span class="token operator">|</span> Mouse House    <span class="token operator">|</span> <span class="token number">333</span> Fromage Lane    <span class="token operator">|</span> Columbus  <span class="token operator">|</span> OH         <span class="token operator">|</span> <span class="token number">43333</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span> Jerry Mouse  <span class="token operator">|</span> <span class="token boolean">NULL</span>                <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10003</span> <span class="token operator">|</span> Wascals        <span class="token operator">|</span> <span class="token number">1</span> Sunny Place       <span class="token operator">|</span> Muncie    <span class="token operator">|</span> <span class="token operator">IN</span>         <span class="token operator">|</span> <span class="token number">42222</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span> Jim Jones    <span class="token operator">|</span> rabbit<span class="token variable">@wascally.com</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10004</span> <span class="token operator">|</span> Yosemite Place <span class="token operator">|</span> <span class="token number">829</span> Riverside Drive <span class="token operator">|</span> Phoenix   <span class="token operator">|</span> AZ         <span class="token operator">|</span> <span class="token number">88888</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span> Y Sam        <span class="token operator">|</span> sam<span class="token variable">@yosemite.com</span>    <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">10005</span> <span class="token operator">|</span> E Fudd         <span class="token operator">|</span> <span class="token number">4545</span> <span class="token number">53</span>rd Street    <span class="token operator">|</span> Chicago   <span class="token operator">|</span> IL         <span class="token operator">|</span> <span class="token number">54545</span>    <span class="token operator">|</span> USA          <span class="token operator">|</span> E Fudd       <span class="token operator">|</span> <span class="token boolean">NULL</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+----------------+---------------------+-----------+------------+----------+--------------+--------------+---------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># data in products</span><span class="token operator">+</span><span class="token comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span><span class="token operator">|</span> prod_id <span class="token operator">|</span> vend_id <span class="token operator">|</span> prod_name      <span class="token operator">|</span> prod_price <span class="token operator">|</span> prod_desc                                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span><span class="token operator">|</span> ANV01   <span class="token operator">|</span>    <span class="token number">1001</span> <span class="token operator">|</span> <span class="token number">.5</span> ton anvil   <span class="token operator">|</span>       <span class="token number">5.99</span> <span class="token operator">|</span> <span class="token number">.5</span> ton anvil<span class="token punctuation">,</span> black<span class="token punctuation">,</span> complete <span class="token keyword">with</span> handy hook                  <span class="token operator">|</span><span class="token operator">|</span> ANV02   <span class="token operator">|</span>    <span class="token number">1001</span> <span class="token operator">|</span> <span class="token number">1</span> ton anvil    <span class="token operator">|</span>       <span class="token number">9.99</span> <span class="token operator">|</span> <span class="token number">1</span> ton anvil<span class="token punctuation">,</span> black<span class="token punctuation">,</span> complete <span class="token keyword">with</span> handy hook <span class="token operator">and</span> carrying <span class="token keyword">case</span> <span class="token operator">|</span><span class="token operator">|</span> ANV03   <span class="token operator">|</span>    <span class="token number">1001</span> <span class="token operator">|</span> <span class="token number">2</span> ton anvil    <span class="token operator">|</span>      <span class="token number">14.99</span> <span class="token operator">|</span> <span class="token number">2</span> ton anvil<span class="token punctuation">,</span> black<span class="token punctuation">,</span> complete <span class="token keyword">with</span> handy hook <span class="token operator">and</span> carrying <span class="token keyword">case</span> <span class="token operator">|</span><span class="token operator">|</span> DTNTR   <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> Detonator      <span class="token operator">|</span>      <span class="token number">13.00</span> <span class="token operator">|</span> Detonator <span class="token punctuation">(</span>plunger powered<span class="token punctuation">)</span><span class="token punctuation">,</span> fuses <span class="token operator">not</span> included                <span class="token operator">|</span><span class="token operator">|</span> FB      <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> Bird seed      <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span> Large bag <span class="token punctuation">(</span>suitable <span class="token keyword">for</span> road runners<span class="token punctuation">)</span>                          <span class="token operator">|</span><span class="token operator">|</span> FC      <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> Carrots        <span class="token operator">|</span>       <span class="token number">2.50</span> <span class="token operator">|</span> Carrots <span class="token punctuation">(</span>rabbit hunting season only<span class="token punctuation">)</span>                           <span class="token operator">|</span><span class="token operator">|</span> FU1     <span class="token operator">|</span>    <span class="token number">1002</span> <span class="token operator">|</span> Fuses          <span class="token operator">|</span>       <span class="token number">3.42</span> <span class="token operator">|</span> <span class="token number">1</span> dozen<span class="token punctuation">,</span> extra long                                            <span class="token operator">|</span><span class="token operator">|</span> JP1000  <span class="token operator">|</span>    <span class="token number">1005</span> <span class="token operator">|</span> JetPack <span class="token number">1000</span>   <span class="token operator">|</span>      <span class="token number">35.00</span> <span class="token operator">|</span> JetPack <span class="token number">1000</span><span class="token punctuation">,</span> intended <span class="token keyword">for</span> single <span class="token keyword">use</span>                          <span class="token operator">|</span><span class="token operator">|</span> JP2000  <span class="token operator">|</span>    <span class="token number">1005</span> <span class="token operator">|</span> JetPack <span class="token number">2000</span>   <span class="token operator">|</span>      <span class="token number">55.00</span> <span class="token operator">|</span> JetPack <span class="token number">2000</span><span class="token punctuation">,</span> multi<span class="token operator">-</span><span class="token keyword">use</span>                                        <span class="token operator">|</span><span class="token operator">|</span> OL1     <span class="token operator">|</span>    <span class="token number">1002</span> <span class="token operator">|</span> Oil can        <span class="token operator">|</span>       <span class="token number">8.99</span> <span class="token operator">|</span> Oil can<span class="token punctuation">,</span> red                                                   <span class="token operator">|</span><span class="token operator">|</span> SAFE    <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> Safe           <span class="token operator">|</span>      <span class="token number">50.00</span> <span class="token operator">|</span> Safe <span class="token keyword">with</span> combination <span class="token keyword">lock</span>                                     <span class="token operator">|</span><span class="token operator">|</span> SLING   <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> Sling          <span class="token operator">|</span>       <span class="token number">4.49</span> <span class="token operator">|</span> Sling<span class="token punctuation">,</span> one size fits <span class="token keyword">all</span>                                       <span class="token operator">|</span><span class="token operator">|</span> TNT1    <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> TNT <span class="token punctuation">(</span><span class="token number">1</span> stick<span class="token punctuation">)</span>  <span class="token operator">|</span>       <span class="token number">2.50</span> <span class="token operator">|</span> TNT<span class="token punctuation">,</span> red<span class="token punctuation">,</span> single stick                                         <span class="token operator">|</span><span class="token operator">|</span> TNT2    <span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> TNT <span class="token punctuation">(</span><span class="token number">5</span> sticks<span class="token punctuation">)</span> <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span> TNT<span class="token punctuation">,</span> red<span class="token punctuation">,</span> pack <span class="token keyword">of</span> <span class="token number">10</span> sticks                                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+----------------+------------+----------------------------------------------------------------+</span><span class="token comment"># data in orders</span><span class="token operator">+</span><span class="token comment">-----------+---------------------+---------+</span><span class="token operator">|</span> order_num <span class="token operator">|</span> order_date          <span class="token operator">|</span> cust_id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------+---------------------+---------+</span><span class="token operator">|</span>     <span class="token number">20005</span> <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>   <span class="token number">10001</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20006</span> <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>   <span class="token number">10003</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20007</span> <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>   <span class="token number">10004</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20008</span> <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>   <span class="token number">10005</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20009</span> <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span>   <span class="token number">10001</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------+---------------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># data in orderitems</span><span class="token operator">+</span><span class="token comment">-----------+------------+---------+----------+------------+</span><span class="token operator">|</span> order_num <span class="token operator">|</span> order_item <span class="token operator">|</span> prod_id <span class="token operator">|</span> quantity <span class="token operator">|</span> item_price <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------+------------+---------+----------+------------+</span><span class="token operator">|</span>     <span class="token number">20005</span> <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> ANV01   <span class="token operator">|</span>       <span class="token number">10</span> <span class="token operator">|</span>       <span class="token number">5.99</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20005</span> <span class="token operator">|</span>          <span class="token number">2</span> <span class="token operator">|</span> ANV02   <span class="token operator">|</span>        <span class="token number">3</span> <span class="token operator">|</span>       <span class="token number">9.99</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20005</span> <span class="token operator">|</span>          <span class="token number">3</span> <span class="token operator">|</span> TNT2    <span class="token operator">|</span>        <span class="token number">5</span> <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20005</span> <span class="token operator">|</span>          <span class="token number">4</span> <span class="token operator">|</span> FB      <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20006</span> <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> JP2000  <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">55.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20007</span> <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> TNT2    <span class="token operator">|</span>      <span class="token number">100</span> <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20008</span> <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> FC      <span class="token operator">|</span>       <span class="token number">50</span> <span class="token operator">|</span>       <span class="token number">2.50</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20009</span> <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> FB      <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">10.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20009</span> <span class="token operator">|</span>          <span class="token number">2</span> <span class="token operator">|</span> OL1     <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>       <span class="token number">8.99</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20009</span> <span class="token operator">|</span>          <span class="token number">3</span> <span class="token operator">|</span> SLING   <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>       <span class="token number">4.49</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20009</span> <span class="token operator">|</span>          <span class="token number">4</span> <span class="token operator">|</span> ANV03   <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">14.99</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------+------------+---------+----------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># data in productnotes</span><span class="token operator">+</span><span class="token comment">---------+---------+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> note_id <span class="token operator">|</span> prod_id <span class="token operator">|</span> note_date           <span class="token operator">|</span> note_text                                                                                                                                                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span>     <span class="token number">101</span> <span class="token operator">|</span> TNT2    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">17</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Customer complaint:Sticks <span class="token operator">not</span> individually wrapped<span class="token punctuation">,</span> too easy <span class="token keyword">to</span> mistakenly detonate <span class="token keyword">all</span> at once<span class="token punctuation">.</span>Recommend individual wrapping<span class="token punctuation">.</span>                             <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">102</span> <span class="token operator">|</span> OL1     <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Can shipped <span class="token keyword">full</span><span class="token punctuation">,</span> refills <span class="token operator">not</span> available<span class="token punctuation">.</span>Need <span class="token keyword">to</span> <span class="token keyword">order</span> new can <span class="token keyword">if</span> refill needed<span class="token punctuation">.</span>                                                                            <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">103</span> <span class="token operator">|</span> SAFE    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Safe <span class="token operator">is</span> combination locked<span class="token punctuation">,</span> combination <span class="token operator">not</span> provided <span class="token keyword">with</span> safe<span class="token punctuation">.</span>This <span class="token operator">is</span> rarely a problem <span class="token keyword">as</span> safes are typically blown up <span class="token operator">or</span> dropped <span class="token keyword">by</span> customers<span class="token punctuation">.</span>           <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">104</span> <span class="token operator">|</span> FC      <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">19</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Quantity varies<span class="token punctuation">,</span> sold <span class="token keyword">by</span> the sack <span class="token keyword">load</span><span class="token punctuation">.</span><span class="token keyword">All</span> guaranteed <span class="token keyword">to</span> be bright <span class="token operator">and</span> orange<span class="token punctuation">,</span> <span class="token operator">and</span> suitable <span class="token keyword">for</span> <span class="token keyword">use</span> <span class="token keyword">as</span> rabbit bait<span class="token punctuation">.</span>                                        <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">105</span> <span class="token operator">|</span> TNT2    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Included fuses are short <span class="token operator">and</span> have been known <span class="token keyword">to</span> detonate too quickly <span class="token keyword">for</span> <span class="token keyword">some</span> customers<span class="token punctuation">.</span>Longer fuses are available <span class="token punctuation">(</span>item FU1<span class="token punctuation">)</span> <span class="token operator">and</span> should be recommended<span class="token punctuation">.</span>   <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">106</span> <span class="token operator">|</span> TNT2    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Matches <span class="token operator">not</span> included<span class="token punctuation">,</span> recommend purchase <span class="token keyword">of</span> matches <span class="token operator">or</span> detonator <span class="token punctuation">(</span>item DTNTR<span class="token punctuation">)</span><span class="token punctuation">.</span>                                                                             <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">107</span> <span class="token operator">|</span> SAFE    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Please note that <span class="token keyword">no</span> <span class="token keyword">returns</span> will be accepted <span class="token keyword">if</span> safe opened <span class="token keyword">using</span> explosives<span class="token punctuation">.</span>                                                                              <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">108</span> <span class="token operator">|</span> ANV01   <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Multiple customer <span class="token keyword">returns</span><span class="token punctuation">,</span> anvils failing <span class="token keyword">to</span> <span class="token keyword">drop</span> fast enough <span class="token operator">or</span> falling backwards <span class="token keyword">on</span> purchaser<span class="token punctuation">.</span> Recommend that customer considers <span class="token keyword">using</span> heavier anvils<span class="token punctuation">.</span>   <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">109</span> <span class="token operator">|</span> ANV03   <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Item <span class="token operator">is</span> extremely heavy<span class="token punctuation">.</span> Designed <span class="token keyword">for</span> dropping<span class="token punctuation">,</span> <span class="token operator">not</span> recommended <span class="token keyword">for</span> <span class="token keyword">use</span> <span class="token keyword">with</span> slings<span class="token punctuation">,</span> ropes<span class="token punctuation">,</span> pulleys<span class="token punctuation">,</span> <span class="token operator">or</span> tightropes<span class="token punctuation">.</span>                                        <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">110</span> <span class="token operator">|</span> FC      <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Customer complaint: rabbit has been able <span class="token keyword">to</span> detect trap<span class="token punctuation">,</span> food apparently less effective now<span class="token punctuation">.</span>                                                               <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">111</span> <span class="token operator">|</span> SLING   <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Shipped unassembled<span class="token punctuation">,</span> requires common tools <span class="token punctuation">(</span>including oversized hammer<span class="token punctuation">)</span><span class="token punctuation">.</span>                                                                                   <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">112</span> <span class="token operator">|</span> SAFE    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Customer complaint:Circular hole <span class="token operator">in</span> safe floor can apparently be easily cut <span class="token keyword">with</span> handsaw<span class="token punctuation">.</span>                                                                  <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">113</span> <span class="token operator">|</span> ANV01   <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> Customer complaint:<span class="token operator">Not</span> heavy enough <span class="token keyword">to</span> generate flying stars around head <span class="token keyword">of</span> victim<span class="token punctuation">.</span> <span class="token keyword">If</span> being purchased <span class="token keyword">for</span> dropping<span class="token punctuation">,</span> recommend ANV02 <span class="token operator">or</span> ANV03 instead<span class="token punctuation">.</span>     <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">114</span> <span class="token operator">|</span> SAFE    <span class="token operator">|</span> <span class="token number">2005</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span> <span class="token keyword">Call</span> <span class="token keyword">from</span> individual trapped <span class="token operator">in</span> safe plummeting <span class="token keyword">to</span> the ground<span class="token punctuation">,</span> suggests an <span class="token keyword">escape</span> hatch be added<span class="token punctuation">.</span><span class="token keyword">Comment</span> forwarded <span class="token keyword">to</span> vendor<span class="token punctuation">.</span>                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单SQL"><a href="#简单SQL" class="headerlink" title="简单SQL"></a>简单SQL</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 检索单个列</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token comment"># 检索多个列</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span>prod_price<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token comment"># 检索全部列*|lists</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token comment"># 检索不同的元组 DISTINCT</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> vend_id<span class="token keyword">FROM</span> vendors<span class="token punctuation">;</span><span class="token comment"># LIMIT限定查询结果的行数</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment"># limit offset counts 指定位置、指定数量（对于行数不够的，就不显示）</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment"># 全限定名</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> query<span class="token operator">-</span>mysql<span class="token punctuation">.</span>products <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>排序</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 对单列排序</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span class="token comment"># 多列排序 （前面相同时，比较后面，以此类推）</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price<span class="token punctuation">,</span> prod_name<span class="token comment"># ASC|DESC 定义排序方向（默认ASC）</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price <span class="token keyword">DESC</span><span class="token punctuation">,</span> prod_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数据过滤</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># WHERE的比较操作符</span><span class="token comment">## = 找出商品名为fuses产品</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">=</span> <span class="token string">'fuses'</span><span class="token punctuation">;</span><span class="token comment">## &lt;=找出价格低于10美元的所有产品</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">## BETWEEB AND 范围检查</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_price <span class="token operator">BETWEEN</span> <span class="token number">5</span> <span class="token operator">AND</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment"># NULL检查</span><span class="token keyword">SELECT</span> cust_id<span class="token keyword">FROM</span> customers<span class="token keyword">WHERE</span> cust_email <span class="token operator">is</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>带有连接词的数据过滤</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># AND 由供应商1003提供的产品且价格不超过10美元的产品信息</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span> <span class="token operator">AND</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment"># OR 由供应商1002和1003提供的产品的信息</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token number">1002</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span><span class="token punctuation">;</span><span class="token comment"># AND 和 OR 的执行优先级（and优先）</span><span class="token comment">## 因为优先级问题 下面两个select语句执行结果不一致！正确语义是下面</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token number">1002</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span> <span class="token operator">AND</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>vend_id <span class="token operator">=</span> <span class="token number">1002</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span><span class="token punctuation">)</span> <span class="token operator">AND</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment"># IN(values) in通过匹配括号中的值 返回true|false。下面两句等价</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token number">1002</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># NOT 的全否定功能</span><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> vend_id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LIKE匹配</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 找出所有以jet开头的产品(%任意长度的字符串)</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">'jet%'</span><span class="token punctuation">;</span><span class="token comment"># 找出以_ ton anvil（_任意一个字符）</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">'_ ton anvil'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>正则表达式</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 二者都会匹配，但是LIKE不会返回结果，REGEXP返回结果</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">'1000'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'1000'</span><span class="token punctuation">;</span><span class="token comment"># 如果需要实现正则表达式忽略大小写 BINARY</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token keyword">BINARY</span> <span class="token string">'JetPack'</span><span class="token punctuation">;</span><span class="token comment"># 正则表达式中的OR</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'1000|2000'</span><span class="token punctuation">;</span><span class="token comment"># 匹配几个字符之一(下面二者等价)</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[1,2,3] ton'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[1|2|3] ton'</span><span class="token punctuation">;</span>  <span class="token comment"># 这里必须有[]，否则出错</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'1|2|3 ton'</span><span class="token punctuation">;</span> <span class="token comment">#这里匹配的是： 1 ，2 ，3 ton</span><span class="token comment"># 范围查询（下面两者等价）</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[0123456789] ton'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[0-9] ton'</span><span class="token punctuation">;</span><span class="token comment"># 匹配特殊字符 （可以使用\\转义特殊字符）</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'.'</span><span class="token punctuation">;</span><span class="token comment"># 重复元字符（* ? + {n} {n,} {n,m}(m&lt;=255)）</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'\\([0-9] sticks?\\)'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[[:digit:]]{4}'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字段操作</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> concat<span class="token punctuation">(</span>vend_name<span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span>vend_country<span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> vendors<span class="token punctuation">;</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">,</span>   <span class="token punctuation">(</span>quantity<span class="token operator">*</span>item_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> expanded_price<span class="token keyword">FROM</span> orderitems<span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数处理</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 大写处理</span><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> Upper<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span> <span class="token keyword">AS</span> vend_name_upcase<span class="token keyword">FROM</span> vendors<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span><span class="token comment"># 时间处理</span><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> order_num<span class="token keyword">FROM</span> orders<span class="token keyword">WHERE</span> <span class="token keyword">Date</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'2005-09-01'</span><span class="token punctuation">;</span><span class="token comment"># 五个aggregate functions</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_price<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> number_cust<span class="token keyword">FROM</span> customers<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_email<span class="token punctuation">)</span> <span class="token keyword">AS</span> number_cust<span class="token keyword">FROM</span> customers<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_price<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> min_price<span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> items_ordered<span class="token keyword">FROM</span> orderitems<span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>聚集函数</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> items_quantity<span class="token punctuation">,</span>   <span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_max<span class="token punctuation">,</span>   <span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_min<span class="token punctuation">,</span>   <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_avg<span class="token punctuation">,</span>   <span class="token function">SUM</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> price_total<span class="token keyword">FROM</span> products<span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>相关子查询</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_name   <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>        <span class="token keyword">FROM</span> orders        <span class="token keyword">WHERE</span> orders<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> customers<span class="token punctuation">.</span>cust_id       <span class="token punctuation">)</span> <span class="token keyword">AS</span> orders<span class="token keyword">FROM</span> customers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu</title>
      <link href="posts/2216.html"/>
      <url>posts/2216.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何用Linux"><a href="#如何用Linux" class="headerlink" title="如何用Linux"></a>如何用Linux</h1><h2 id="下载Ubuntu镜像"><a href="#下载Ubuntu镜像" class="headerlink" title="下载Ubuntu镜像"></a>下载Ubuntu镜像</h2><p>👉<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像网站</a></p><p>👉<a href="http://mirrors.ustc.edu.cn/">中国科学技术大学开源镜像网站</a></p><p>👉<a href="https://ubuntu.com/">Ubuntu官方</a></p><h2 id="下载vm"><a href="#下载vm" class="headerlink" title="下载vm"></a>下载vm</h2><p><a href="https://www.virtualbox.org/">Oracle vm virtualBox</a></p><h2 id="创建Linux虚拟机"><a href="#创建Linux虚拟机" class="headerlink" title="创建Linux虚拟机"></a>创建Linux虚拟机</h2>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList&lt;E&gt;底层原理</title>
      <link href="posts/53096.html"/>
      <url>posts/53096.html</url>
      
        <content type="html"><![CDATA[<h1 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h1><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210319151231.jpg" style="width:80%;border:solid"><h1 id="LinkedList-lt-E-gt-底层结构"><a href="#LinkedList-lt-E-gt-底层结构" class="headerlink" title="LinkedList<E>底层结构"></a>LinkedList&lt;E&gt;底层结构</h1><p><code>LinkedList&lt;E&gt;</code>作为一种链表型的列表，底层的数据结构当然就是链表，具体到内部类：结点<code>Node&lt;E&gt;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> item<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> item<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了基本的内部节点<code>Node</code>之外，还存在三个不可序列化的变量：<code>first（头结点）</code>、<code>last（尾结点）</code>、<code>size</code></p><p>first(null,item,next)</p><p>last(prev,item,null)</p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<table><tbody><tr><td style="background-color:white">prev == null</td><td style="background-color:silver">first.item</td>        <td style="background-color:gray">next != null</td></tr></tbody></table><table>    <tbody><tr>        <td style="background-color:gray">prev != null</td>        <td style="background-color:silver">last.item&nbsp;</td>        <td style="background-color:white">next == null</td>    </tr></tbody></table><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="List-lt-E-gt-接口"><a href="#List-lt-E-gt-接口" class="headerlink" title="List<E>接口"></a>List&lt;E&gt;接口</h2><p><code>LinkedList&lt;E&gt;</code>作为一种链表型的列表，首先就有着列表的相关概念，也就是<code>List&lt;E&gt;</code>接口中的方法。</p><p><span class="github-emoji"><span>👀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>我们先看一下<code>List&lt;E&gt;</code>自己在<code>Collection&lt;E&gt;</code>接口之上增加的方法 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LinkedList直接继承AbstractList的实现</span>    <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LinkedList直接继承AbstractList的实现</span>    <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>👀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>我们再看一下<code>List&lt;E&gt;</code>自己自己增加的 <strong>default-method</strong> 以及覆盖<code>Collection&lt;E&gt;</code>的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> li <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            li<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>operator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> e <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">default</span> <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Spliterators</span><span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">Spliterator</span><span class="token punctuation">.</span>ORDERED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LinkedList实现"><a href="#LinkedList实现" class="headerlink" title="LinkedList实现"></a>LinkedList实现</h2><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>将LinkList视为列表，设置指定位置的元素，以及获取指定位置的元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> oldVal <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    x<span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>get</code>与<code>set</code>辅助操作方法<span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// assert isElementIndex(index);  为了保证索引的正确性</span>    <span class="token comment">// 二分查找，判断索引属于前半段还是后半段，然后采取链表的顺序遍历得到对应位置的元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从node(int)方法中可以看出，LinkedList的元素位置是从0开始计数！所以[0,1,2,3,4,5,6,7,8,9]</p><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断插入的位置是：尾部还是中间任意位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>add(int,E)</code>的辅助操作 </p><p>👉<strong>尾插</strong></p><table>    <tbody><tr>        <td style="background-color:gray">prev == last</td>        <td style="background-color:silver">add.item&nbsp;</td>        <td style="background-color:white">next == null</td>    </tr></tbody></table>算法思想：<p>1）保留尾结点的内容</p><p>2）生成前驱结点为last的插入结点</p><p>3）将last指向新插入的结点</p><p>4）验证空表的情况：</p><ul><li>是空链表时，将first指向新插入的结点</li><li>不是空链表时，将last指向新插入的结点</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token comment">// 这里的if-else是为了防止链表为空的情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>👉<strong>中间任意位置元素之前插入</strong></p><table>    <tbody><tr>        <td style="background-color:gray">prev == succ.prev</td>        <td style="background-color:silver">&nbsp;&nbsp;&nbsp;&nbsp;add.item&nbsp;</td>        <td style="background-color:white">next == succ</td>    </tr></tbody></table>算法思想：<p>1）保留待插入位置结点succ的前驱引用</p><p>2）生成一个(succ.prev,item,succ)的插入结点</p><p>3)将succ.repv指向新的结点</p><p>4）验证当前插入的结点是不是头结点first</p><ul><li>是first时，first指向新的插入结点</li><li>不是first时，将新插入的结点next指向succ</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// assert succ != null;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>    succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>remove(int)</code>的辅助操作</p><p>👉<strong>去除特定的结点</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 此方法会清空结点的内容，让结点脱离于链表，但是指向该结点的引用依旧存在，没有null处理</span><span class="token class-name">E</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// assert x != null;</span>    <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token comment">// 查看要删除的x前驱结点是否为first</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 查看要删除的x后继结点是否为last</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 进行x存储内容的删除，以及链表长度的调整</span>    x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    size<span class="token operator">--</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>这里就是简单的一个顺序遍历链表得到所查元素o在链表的位置，采取覆盖父类<code>AbstractList&lt;E&gt;</code>的方法，因为在<code>AbstractList&lt;E&gt;</code>中这两种索取元素位置的方式，都是依靠于<code>ListItreator</code>迭代器！</p><p>（左 -&gt; 右）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（左 &lt;- 右）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加集合"><a href="#添加集合" class="headerlink" title="添加集合*"></a>添加集合*</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numNew <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> pred<span class="token punctuation">,</span> succ<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        succ <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        pred <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        succ <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span> <span class="token class-name">E</span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        pred <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>succ <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        last <span class="token operator">=</span> pred<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> succ<span class="token punctuation">;</span>        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><h2 id="ListItreator"><a href="#ListItreator" class="headerlink" title="ListItreator"></a>ListItreator</h2><table><thead><tr><th align="left">ListItreator&lt;E&gt;</th></tr></thead><tbody><tr><td align="left"><strong>boolean hasNext()</strong></td></tr><tr><td align="left"><strong>E next()</strong></td></tr><tr><td align="left"><strong>boolean hasPrevious()</strong></td></tr><tr><td align="left"><strong>E previous()</strong></td></tr><tr><td align="left"><strong>int nextIndex()</strong></td></tr><tr><td align="left"><strong>int previousIndex()</strong></td></tr><tr><td align="left"><strong>void remove()</strong></td></tr><tr><td align="left"><strong>void set(E e)</strong></td></tr><tr><td align="left"><strong>void add(E e)</strong></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> lastReturned<span class="token punctuation">;</span>           <span class="token comment">// 上次返回的结点</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>                   <span class="token comment">// 下一次将迭代访问的结点</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> nextIndex<span class="token punctuation">;</span>                  <span class="token comment">// 下一次将迭代访问的结点的位置</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span><span class="token comment">// 集合修改次数</span>    <span class="token comment">// 构造起始位置为index的迭代器指针引用</span>    <span class="token class-name">ListItr</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// assert isPositionIndex(index);</span>        next <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        nextIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// next方法的第一个元素是迭代器起点元素 比如listIterator(3) : 就是link[3]</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 保留跨越元素，再跨越元素</span>        lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>        next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextIndex <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// previous的第一个元素是迭代器起点元素的前一个元素 比如listIterator(3) : 就是link[2]</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastReturned <span class="token operator">=</span> next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> last <span class="token operator">:</span> next<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextIndex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> lastNext <span class="token operator">=</span> lastReturned<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span>lastReturned<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> lastReturned<span class="token punctuation">)</span>            next <span class="token operator">=</span> lastNext<span class="token punctuation">;</span>        <span class="token keyword">else</span>            nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>        lastReturned <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastReturned<span class="token punctuation">.</span>item <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastReturned <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">linkBefore</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>        expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>modCount <span class="token operator">==</span> expectedModCount <span class="token operator">&amp;&amp;</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java集合接口中的迭代器可视为：位于两个元素之间的位置。每次遍历指针在跨过元素之前都将保留元素，再跨过</p><p>这里关于<code>previous()</code>和<code>next()</code>方法的起点元素(注释中已经解释) </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartIndex</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// index {0,1,2,3,4,5}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// console: 3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// console: 2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>listIterator方法</code>参数index范围可以在[0,size]，是因为索引校验机制采取的<code>isPositionIndex</code></p><p>而获取器和更改器方法参数index范围只能在[0,size-1]，是因为索引校验机制采取的<code>isElementIndex</code></p><p>在<code>ListIterator</code>中存在一个同于的删除方法<code>remove</code>。为了平衡<code>previous</code>和<code>next</code>起始元素的不同，这里在remove里面加入了一个判断语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>next <span class="token operator">==</span> lastReturned<span class="token punctuation">)</span> <span class="token punctuation">{</span>    next <span class="token operator">=</span> lastNext<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    nextIndex<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>if</code>条件满足时，表示此时调用的是<code>previous</code>。当<code>else</code>条件满足时，表示调用的是<code>next</code>。</p><h1 id="拓展结构"><a href="#拓展结构" class="headerlink" title="拓展结构"></a>拓展结构</h1><h2 id="Deque-lt-E-gt"><a href="#Deque-lt-E-gt" class="headerlink" title="Deque<E>"></a>Deque&lt;E&gt;</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自拓展双向队列方法</span><span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">offerFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">removeFirstOccurrence</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">removeLastOccurrence</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// *** Queue methods ***</span><span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 堆栈和队列的共性操作</span><span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// *** Stack methods ***</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// *** Collection methods ***</span><span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义降序迭代器</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">descendingIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从继承体系看出，在实现<code>Deque&lt;E&gt;</code>接口中，主要是以队列和堆栈以及特定的降序迭代器！</p><p>此接口扩展了 <code>Queue</code> 接口。</p><p><b style="color:hotpink">在将双端队列用作队列时</b>，将得到  FIFO（先进先出）行为。将元素添加到双端队列的末尾，从双端队列的开头移除元素。从 <code>Queue</code> 接口继承的方法完全等效于  <code>Deque</code> 方法，如下表所示： </p><table><thead><tr><th><strong><code>Queue</code> 方法</strong></th><th><strong>等效 <code>Deque</code> 方法</strong></th></tr></thead><tbody><tr><td><code>add(e)</code></td><td><code>addLast(e)</code></td></tr><tr><td><code>offer(e)</code></td><td><code>offerLast(e)</code></td></tr><tr><td><code>remove()</code></td><td><code>removeFirst()</code></td></tr><tr><td><code>poll()</code></td><td><code>pollFirst()</code></td></tr><tr><td><code>element()</code></td><td><code>getFirst()</code></td></tr><tr><td><code>peek()</code></td><td><code>peekFirst()</code></td></tr></tbody></table><p><b style="color:hotpink">双端队列作 LIFO（后进先出）堆栈时</b>。应优先使用此接口而不是遗留 <code>Stack</code> 类。在将双端队列用作堆栈时，元素被推入双端队列的开头并从双端队列开头弹出。堆栈方法完全等效于 <code>Deque</code> 方法，如下表所示： </p><table><thead><tr><th><strong>堆栈方法</strong></th><th><strong>等效 <code>Deque</code> 方法</strong></th></tr></thead><tbody><tr><td><code>push(e)</code></td><td><code>addFirst(e)</code></td></tr><tr><td><code>pop()</code></td><td><code>removeFirst()</code></td></tr><tr><td><code>peek()</code></td><td><code>peekFirst()</code>)</td></tr></tbody></table><p>注意，在将双端队列用作队列或堆栈时，<code>peek</code>  方法同样正常工作；无论哪种情况下，都从双端队列的开头抽取元素</p><h2 id="堆栈操作"><a href="#堆栈操作" class="headerlink" title="堆栈操作"></a>堆栈操作</h2><h3 id="压入栈顶"><a href="#压入栈顶" class="headerlink" title="压入栈顶"></a>压入栈顶</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// push与addFirst等价性</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token comment">// 这里判断主要是为了防止空表的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="弹出栈顶"><a href="#弹出栈顶" class="headerlink" title="弹出栈顶"></a>弹出栈顶</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// pop与removeFirst等价性</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// assert f == first &amp;&amp; f != null;</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取栈顶元素"><a href="#获取栈顶元素" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单向队列"><a href="#单向队列" class="headerlink" title="单向队列"></a>单向队列</h2><h3 id="队尾添加"><a href="#队尾添加" class="headerlink" title="队尾添加"></a>队尾添加</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// add与addfirst等价性在于都调用了linkLast</span>        <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">else</span>                l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除队头元素"><a href="#删除队头元素" class="headerlink" title="删除队头元素"></a>删除队头元素</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>共性操作<code>unlinkFirst</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 保持头结点信息</span>    <span class="token class-name">E</span> elem <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// 销毁头结点</span>    f<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 将first指向新的头结点</span>    first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token comment">// 判断结构是为了防止链表只含有一个元素的情况</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    size<span class="token operator">--</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> elem<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取队头元素"><a href="#获取队头元素" class="headerlink" title="获取队头元素"></a>获取队头元素</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列*"></a>双向队列*</h2><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><ul><li>正向队列-add</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 保存头结点信息</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token comment">// 生成需要插入的结点</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将新结点置为first</span>    first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token comment">// 判断条件是为了防止原来链表为空的情况</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>         f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>反向队列-add</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>正向-offer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offerFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>反向-offer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">addLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于MySQL的数据库操作</title>
      <link href="posts/53808.html"/>
      <url>posts/53808.html</url>
      
        <content type="html"><![CDATA[<h1 id="示例表"><a href="#示例表" class="headerlink" title="示例表"></a>示例表</h1><img src="https://cdn.jsdelivr.net/gh/matemaster9/imgs-masterstudio/imgs/20210330170535.jpg" style="width:80%;border:solid"><h1 id="MySQL操作"><a href="#MySQL操作" class="headerlink" title="MySQL操作"></a>MySQL操作</h1><h2 id="IN子查询"><a href="#IN子查询" class="headerlink" title="IN子查询"></a>IN子查询</h2><p>为什么需要子查询？</p><p>1）集合成员资格：判断某一个元素是否是该集合的成员（IN 子查询）</p><p>2）集合之间的比较：判断一个集合是否是另外一个集合的子集（θ子查询）</p><p>3）集合基数测试：集合是否为空？集合是否存在重复元组（EXISTS 子查询）</p><p>子查询：就是在<strong>where</strong>子句中出现的<strong>select</strong>子句</p><p><code>IN子查询</code>：判断某一个表达式的值是否在子查询的结果当中</p><ul><li>列出选修了001号课程的学生学号和姓名</li></ul><p>1）查出选修选修001号课程的学生学号</p><p>2）根据学号来筛选出学生的学号与姓名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Sid<span class="token punctuation">,</span>Sname<span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> Sid <span class="token operator">IN</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> Sid    <span class="token keyword">FROM</span> sc    <span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了上面这种带有<code>IN子查询</code>，我们还可以使用自然连接的方式，进行查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> student<span class="token punctuation">.</span>Sid <span class="token punctuation">,</span>Sname<span class="token keyword">FROM</span> sc<span class="token punctuation">,</span>student<span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Sid <span class="token operator">=</span> student<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> Cid <span class="token operator">=</span><span class="token string">'001'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>列出既选修了001号课程，又选修了002号课程学生的学号</li></ul><p>1）找出选修了002号课程的学生学号</p><p>2）在选课表中找出选修了001号课程并且学号在上面查询结果之中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 找出选修了002号课程的学生学号</span><span class="token keyword">SELECT</span> Sid<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'002'</span><span class="token punctuation">;</span><span class="token comment"># 找出选修了001号课程并且学号在上面查询结果之中</span><span class="token keyword">SELECT</span> Sid<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span> <span class="token operator">AND</span> Sid <span class="token operator">IN</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> Sid    <span class="token keyword">FROM</span> sc    <span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'002'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自连接实现查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> s1<span class="token punctuation">.</span>Sid<span class="token keyword">FROM</span> sc s1<span class="token punctuation">,</span>sc s2<span class="token keyword">WHERE</span> s1<span class="token punctuation">.</span>Sid <span class="token operator">=</span>s2<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> s1<span class="token punctuation">.</span>Cid <span class="token operator">=</span><span class="token string">'001'</span> <span class="token operator">AND</span> s2<span class="token punctuation">.</span>Cid <span class="token operator">=</span> <span class="token string">'002'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>列出没有选修HUAWEI课程的所有同学姓名</li></ul><p>1）找出选修HUAWEI课程的学生学号</p><p>2）在学生标准找出不在上面查询结果之中的学生学号</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 找出选修HUAWEI课程的学生学号</span><span class="token keyword">SELECT</span> Sid<span class="token keyword">FROM</span> sc<span class="token punctuation">,</span>teacher<span class="token punctuation">,</span>course<span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Cid <span class="token operator">=</span> course<span class="token punctuation">.</span>Cid <span class="token operator">AND</span> teacher<span class="token punctuation">.</span>Tid <span class="token operator">=</span> course<span class="token punctuation">.</span>Tid <span class="token operator">AND</span> teacher<span class="token punctuation">.</span>Tname <span class="token operator">=</span> <span class="token string">'HUAWEI'</span><span class="token punctuation">;</span><span class="token comment"># 不在上面的查询寻结果之中</span><span class="token keyword">SELECT</span> Sid<span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> Sid <span class="token operator">NOT</span> <span class="token operator">IN</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> Sid    <span class="token keyword">FROM</span> sc<span class="token punctuation">,</span>teacher<span class="token punctuation">,</span>course    <span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Cid <span class="token operator">=</span> course<span class="token punctuation">.</span>Cid <span class="token operator">AND</span> teacher<span class="token punctuation">.</span>Tid <span class="token operator">=</span> course<span class="token punctuation">.</span>Tid <span class="token operator">AND</span> teacher<span class="token punctuation">.</span>Tname <span class="token operator">=</span> <span class="token string">'HUAWEI'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询出选修001号课程学生的姓名</li></ul><p>1）查询出选修了001号课程学生的学号</p><p>2）根据查询出来的学号，查询学生的姓名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询出选修了001号课程学生的学号</span><span class="token keyword">SELECT</span> Sid<span class="token keyword">FROM</span> sc<span class="token punctuation">,</span>student<span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Sid <span class="token operator">=</span> student<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> sc<span class="token punctuation">.</span>Cid <span class="token operator">=</span> <span class="token string">'001'</span><span class="token punctuation">;</span><span class="token comment"># 根据查询出来的学号，查询学生的姓名</span><span class="token keyword">SELECT</span> Sname<span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> Sid <span class="token operator">IN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> Sid<span class="token keyword">FROM</span> sc<span class="token punctuation">,</span>student<span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Sid <span class="token operator">=</span> student<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> sc<span class="token punctuation">.</span>Cid <span class="token operator">=</span> <span class="token string">'001'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们从SQL语句中看到，内层子查询调用了外层的参数student。这种关系叫做相关子查询，并且参数只能由外到内层传递！</p><h2 id="θ子查询"><a href="#θ子查询" class="headerlink" title="θ子查询"></a>θ子查询</h2><p><code>theta some</code>和<code>theta all</code>：θ是比较运算符</p><p>1.如果表达式的值与子查询的结果的某一个值满足θ关系，那么<code>theta some = true</code></p><p>2.如果表达式的值与子查询的结果的所有值满足θ关系，那么<code>theta all = true</code></p><ul><li>找出工资最低的教师姓名</li></ul><p>1）查询出所有教师的工资</p><p>2）比较查询出工资最小的（工资比上面的所有教师工资都小）姓名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询出所有教师的工资</span><span class="token keyword">SELECT</span> Salary<span class="token keyword">FROM</span> teacher<span class="token punctuation">;</span><span class="token comment"># 比较查询出工资最小的</span><span class="token keyword">SELECT</span> Tname<span class="token keyword">FROM</span> teacher<span class="token keyword">WHERE</span> Salary <span class="token operator">&lt;=</span> <span class="token keyword">ALL</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> Salary<span class="token keyword">FROM</span> teacher<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出001号课程成绩不是最高的学生姓名</li></ul><p>1）查询出所有选修001号课程学生的成绩</p><p>2）比较查询出成绩不是最高（在上面的查询结果中，至少存在一个学生成绩比查询结果高的）的学号</p><p>3）根据学号查询出学生姓名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询出所有选修001号课程学生的成绩</span><span class="token keyword">SELECT</span> Score<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span><span class="token punctuation">;</span><span class="token comment"># 查询出学号</span><span class="token keyword">SELECT</span> Sid<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span> <span class="token operator">AND</span> Score <span class="token operator">&lt;</span> <span class="token keyword">SOME</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> Score<span class="token keyword">FROM</span> sc    <span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span><span class="token punctuation">)</span><span class="token comment"># 根据学号查询出姓名</span><span class="token keyword">SELECT</span> Sname<span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> Sid <span class="token operator">IN</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> Sid    <span class="token keyword">FROM</span> sc    <span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span> <span class="token operator">AND</span> Score <span class="token operator">&lt;</span> <span class="token keyword">SOME</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> Score        <span class="token keyword">FROM</span> sc        <span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询出所有课程不及格的学生姓名（相关子查询）</li></ul><p>1）查询出所有学生的分数</p><p>2）根据所有课程成绩小于60的条件筛选出姓名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Sname<span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> <span class="token number">60</span> <span class="token operator">&gt;</span> <span class="token keyword">ALL</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> Score    <span class="token keyword">FROM</span> sc    <span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Sid <span class="token operator">=</span> student<span class="token punctuation">.</span>Sid<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询出选修了001号课程，且成绩最高的同学的学号</li></ul><p>1）查询出选修了001号课程的成绩</p><p>2）在选修了001号课程的学生当中找出成绩最高的学号</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Score<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> Sid<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span> <span class="token operator">AND</span> Score <span class="token operator">&gt;=</span> <span class="token keyword">ALL</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> Score<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出98030101学生所修课程分数最低的课程号</li></ul><p>1）找出98030101学生所修课程的所有分数</p><p>2）选出最低分数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 找出98030101学生所修课程的所有分数</span><span class="token keyword">SELECT</span> Score<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Sid <span class="token operator">=</span> <span class="token string">'98030101'</span><span class="token punctuation">;</span><span class="token comment"># 选出最低分数</span><span class="token keyword">SELECT</span> Cid<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Sid <span class="token operator">=</span> <span class="token string">'98030101'</span> <span class="token operator">AND</span> Score <span class="token operator">&lt;=</span> <span class="token keyword">ALL</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> Score<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Sid <span class="token operator">=</span> <span class="token string">'98030101'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出MS选修课程的最低成绩的课程号</li></ul><p>1）找出MS同学对于的Sid(MS-Sid)选修课程的所有分数</p><p>2）选出最低</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Score<span class="token keyword">FROM</span> sc<span class="token punctuation">,</span>student<span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Sid <span class="token operator">=</span> student<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> student<span class="token punctuation">.</span>Sname <span class="token operator">=</span> <span class="token string">'MS'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> Cid<span class="token keyword">FROM</span> sc<span class="token keyword">WHERE</span> Score <span class="token operator">&lt;=</span> <span class="token keyword">ALL</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> Score    <span class="token keyword">FROM</span> sc<span class="token punctuation">,</span>student    <span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Sid <span class="token operator">=</span> student<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> student<span class="token punctuation">.</span>Sname <span class="token operator">=</span> <span class="token string">'MS'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面代码也可以实现（相关子查询）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Cid<span class="token keyword">FROM</span> sc<span class="token punctuation">,</span>student<span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Sid<span class="token operator">=</span>student<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> student<span class="token punctuation">.</span>Sname<span class="token operator">=</span><span class="token string">'MS'</span> <span class="token operator">and</span>Score <span class="token operator">&lt;=</span> <span class="token keyword">ALL</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> Score <span class="token keyword">FROM</span> sc <span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Sid<span class="token operator">=</span>student<span class="token punctuation">.</span>Sid<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: chocolate;">等价变化：</b></p><p><code>= SOME(子查询) 等价于 IN(子查询)</code></p><p><code>!= ALL(子查询) 等价于NOT IN(子查询) </code></p><h2 id="EXISTS子查询"><a href="#EXISTS子查询" class="headerlink" title="EXISTS子查询"></a>EXISTS子查询</h2><ul><li>选修了<code>JetBrains</code>课程的所有学生姓名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Sname<span class="token keyword">FROM</span> teacher T<span class="token punctuation">,</span>course C<span class="token punctuation">,</span>sc<span class="token punctuation">,</span>student S<span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>Tid <span class="token operator">=</span> C<span class="token punctuation">.</span>Tid <span class="token operator">AND</span> C<span class="token punctuation">.</span>Cid <span class="token operator">=</span> sc<span class="token punctuation">.</span>Cid <span class="token operator">AND</span> sc<span class="token punctuation">.</span>Sid <span class="token operator">=</span> S<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> T<span class="token punctuation">.</span>Tname <span class="token operator">=</span> <span class="token string">'JetBrains'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>NOT EXISTS</code>查询所有</p><ul><li>列出没有选修<code>JetBrains</code>教授课程的学生的姓名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 选出JetBrains教授课程的选修情况</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> teacher<span class="token punctuation">,</span>course<span class="token punctuation">,</span>sc<span class="token keyword">WHERE</span> teacher<span class="token punctuation">.</span>Tid <span class="token operator">=</span> course<span class="token punctuation">.</span>Tid <span class="token operator">AND</span> course<span class="token punctuation">.</span>Cid <span class="token operator">=</span> sc<span class="token punctuation">.</span>Cid <span class="token operator">AND</span> teacher<span class="token punctuation">.</span>Tname <span class="token operator">=</span><span class="token string">'JetBrains'</span><span class="token punctuation">;</span><span class="token comment">#  找出不存在选修了JetBrains课程的学生</span><span class="token keyword">SELECT</span> Sname<span class="token keyword">FROM</span> student stu<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> teacher t<span class="token punctuation">,</span>course c<span class="token punctuation">,</span>sc<span class="token keyword">WHERE</span> t<span class="token punctuation">.</span>Tid <span class="token operator">=</span> c<span class="token punctuation">.</span>Tid <span class="token operator">AND</span> c<span class="token punctuation">.</span>Cid <span class="token operator">=</span> sc<span class="token punctuation">.</span>Cid <span class="token operator">AND</span> stu<span class="token punctuation">.</span>Sid <span class="token operator">=</span> sc<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> t<span class="token punctuation">.</span>Tname <span class="token operator">=</span><span class="token string">'JetBrains'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询出选修001号教师主讲的所有课程的所有学生姓名</li></ul><p>转义语句：不存在有一门001号教师主讲课程该同学没有学过</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> course<span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> <span class="token string">'001'</span> <span class="token operator">AND</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span>    <span class="token keyword">FROM</span> sc<span class="token punctuation">,</span>student    <span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Sid <span class="token operator">=</span> student<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> course<span class="token punctuation">.</span>Cid <span class="token operator">=</span> sc<span class="token punctuation">.</span>Cid<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> course<span class="token keyword">WHERE</span> Tid <span class="token operator">=</span> <span class="token string">'001'</span> <span class="token operator">AND</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span>    <span class="token keyword">FROM</span> sc    <span class="token keyword">WHERE</span> sc<span class="token punctuation">.</span>Sid <span class="token operator">=</span> student<span class="token punctuation">.</span>Sid <span class="token operator">AND</span> course<span class="token punctuation">.</span>Cid <span class="token operator">=</span> sc<span class="token punctuation">.</span>Cid<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>列出至少学过98030101号同学选修过的所有课程的同学学号</li></ul><p>转移语句：不存在一门98030101号同学选修的课程该同学没有学过</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Sid<span class="token keyword">FROM</span> sc sc1<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span>    <span class="token keyword">FROM</span> sc sc2    <span class="token keyword">WHERE</span> sc2<span class="token punctuation">.</span>Sid <span class="token operator">=</span> <span class="token string">'98030101'</span> <span class="token operator">AND</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token operator">*</span>        <span class="token keyword">FROM</span> sc        <span class="token keyword">WHERE</span> Cid <span class="token operator">=</span> sc2<span class="token punctuation">.</span>Cid <span class="token operator">AND</span> Sid <span class="token operator">=</span> sc1<span class="token punctuation">.</span>Sid    <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>存在关系表SPJ(Sno,Pno,Jno,Qty) 供应商、零件号、工程号、数量</li><li>列出至少使用供应商S1供应的全部零件的工程号</li></ul><p>转移语句：不存在一个有S1供应的零件该工程没有用过</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Jno<span class="token keyword">FROM</span> SPJ SPJ1<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span>    <span class="token keyword">FROM</span> SPJ SPJ2    <span class="token keyword">WHERE</span> Sno <span class="token operator">=</span> <span class="token string">'S1'</span> <span class="token operator">AND</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token operator">*</span>        <span class="token keyword">FROM</span> SPJ SPJ3        <span class="token keyword">WHERE</span> SPJ1<span class="token punctuation">.</span>Jno <span class="token operator">=</span> Jno <span class="token operator">AND</span> SPJ2<span class="token punctuation">.</span>Pno <span class="token operator">=</span> Pno    <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代操作系统</title>
      <link href="posts/10779.html"/>
      <url>posts/10779.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDL DML for MySQL</title>
      <link href="posts/11059.html"/>
      <url>posts/11059.html</url>
      
        <content type="html"><![CDATA[<h1 id="SCT数据库"><a href="#SCT数据库" class="headerlink" title="SCT数据库"></a>SCT数据库</h1><p>这里以学生选课数据库<code>SCT-DB</code></p><p><code>student{ Sid char(8), Sname char(10), Ssex char(2), Sage int, Did char(2), Sclass char(6) }</code></p><table><thead><tr><th>sid</th><th>Sname</th><th>Ssex</th><th>Sage</th><th>Did</th><th>Sclass</th></tr></thead><tbody><tr><td>98030101</td><td>JB</td><td>男</td><td>20</td><td>03</td><td>980301</td></tr><tr><td>98030102</td><td>MS</td><td>女</td><td>20</td><td>03</td><td>980301</td></tr><tr><td>98030103</td><td>HW</td><td>男</td><td>19</td><td>03</td><td>980301</td></tr><tr><td>98040201</td><td>ali</td><td>男</td><td>20</td><td>04</td><td>980402</td></tr><tr><td>98040202</td><td>JD</td><td>男</td><td>21</td><td>04</td><td>980402</td></tr><tr><td>98040203</td><td>IBM</td><td>女</td><td>19</td><td>04</td><td>980402</td></tr></tbody></table><p><code>dept{ Did char(2), Dname char(10), Dean char(10) }</code></p><table><thead><tr><th>Did</th><th>Dname</th><th>Dean</th></tr></thead><tbody><tr><td>01</td><td>机电</td><td>baidu</td></tr><tr><td>02</td><td>能源</td><td>apple</td></tr><tr><td>03</td><td>计算机</td><td>google</td></tr><tr><td>04</td><td>自动控制</td><td>bytedance</td></tr></tbody></table><p><code>course{ Cid char(3), Cname char(12), Chours int, Credit float(1), Tid char(3) }</code></p><table><thead><tr><th>Cid</th><th>Cname</th><th>Chours</th><th>Credit</th><th>Tid</th></tr></thead><tbody><tr><td>001</td><td>数据库</td><td>40</td><td>6</td><td>001</td></tr><tr><td>003</td><td>数据结构</td><td>40</td><td>6</td><td>003</td></tr><tr><td>004</td><td>编译原理</td><td>40</td><td>6</td><td>001</td></tr><tr><td>005</td><td>C语言</td><td>30</td><td>4.5</td><td>003</td></tr><tr><td>002</td><td>高等数学</td><td>80</td><td>12</td><td>004</td></tr></tbody></table><p><code>teacher{ Tid char(3), Tname char(10), Did char(2), Salary float(2) }</code></p><table><thead><tr><th>Tid</th><th>Tname</th><th>Did</th><th>Salary</th></tr></thead><tbody><tr><td>001</td><td>JetBrains</td><td>01</td><td>1200.00</td></tr><tr><td>002</td><td>MicroSoft</td><td>02</td><td>1400.00</td></tr><tr><td>003</td><td>HUAWEI</td><td>03</td><td>1000.00</td></tr><tr><td>004</td><td>Alibaba</td><td>04</td><td>1100.00</td></tr></tbody></table><p><code>sc{ Sid char(8), Cid char(3), Score float(1) }</code></p><table><thead><tr><th>Sid</th><th>Cid</th><th>Score</th></tr></thead><tbody><tr><td>98030101</td><td>001</td><td>92</td></tr><tr><td>98030101</td><td>002</td><td>85</td></tr><tr><td>98030101</td><td>003</td><td>88</td></tr><tr><td>98040202</td><td>002</td><td>90</td></tr><tr><td>98040202</td><td>003</td><td>80</td></tr><tr><td>98040202</td><td>001</td><td>55</td></tr><tr><td>98040203</td><td>003</td><td>56</td></tr><tr><td>98030102</td><td>001</td><td>54</td></tr><tr><td>98030102</td><td>002</td><td>85</td></tr><tr><td>98030102</td><td>003</td><td>48</td></tr></tbody></table><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><h2 id="创建SCT数据库"><a href="#创建SCT数据库" class="headerlink" title="创建SCT数据库"></a>创建SCT数据库</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database SCT;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建关系表"><a href="#创建关系表" class="headerlink" title="创建关系表"></a>创建关系表</h2><p><code>student{ Sid char(8), Sname char(10), Ssex char(2), Sage int, Did char(2), Sclass char(6) }</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table student(    Sid char(8),    Sname char(10),    Ssex char(2),    Sage int,    Did char(2),    Sclass char(6))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>dept{ Did char(2), Dname char(10), Dean char(10) }</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table dept(    Did char(2),    Dname char(10),    Dean char(10))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>course{ Cid char(3), Cname char(12), Chours int, Credit float(1), Tid char(3) }</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table course(    Cid char(3),    Cname char(12),    Chours int,    Credit float(1),    Tid char(3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>teacher{ Tid char(3), Tname char(10), Did char(2), Salary float(2) }</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table teacher(    Tid char(3),    Tname char(10),    Did char(2),    Salary float(2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sc{ Sid char(8), Cid char(3), Score float(1) }</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table sc(    Sid char(8),    Cid char(3),    Score float(1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入关系表数据"><a href="#插入关系表数据" class="headerlink" title="插入关系表数据"></a>插入关系表数据</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># studentinsert into SCT.student(Sid, Sname, Ssex, Sage, Did, Sclass) values('98030101','JB','男',20,'03','980301'),('98030102','MS','女',20,'03','980301'),('98030103','HW','男',19,'03','980301'),('98040201','ali','男',20,'04','980402'),('98040202','JD','男',21,'04','980402'),('98040203','IBM','女',19,'04','980402');# deptinsert into SCT.dept(Did, Dname, Dean) values('01','机电','baidu'),('02','能源','apple'),('03','计算机','google'),('04','自动控制','bytedance');# courseinsert into SCT.course(Cid, Cname, Chours, Credit, Tid) values('001','数据库',40,6,'001'),('003','数据结构',40,6,'003'),('004','编译原理',40,6,'001'),('005','C语言',30,4.5,'003'),('002','高等数学',80,12,'004');# teacherinsert into SCT.teacher(Tid, Tname, Did, Salary) values('001','JetBrains','01',1200.00),('002','MicroSoft','02',1400.00),('003','HUAWEI','03',1000.00),('004','Alibaba','04',1100.00);# scinsert into SCT.sc(Sid, Cid, Score) values('98030101','001',92),('98030101','002',85),('98030101','003',88),('98040202','002',90),('98040202','003',80),('98040202','001',55),('98040203','003',56),('98030102','001',54),('98030102','002',85),('98030102','003',48);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DDL源码"><a href="#DDL源码" class="headerlink" title="DDL源码"></a>DDL源码</h2><p>👉<a href="https://gitee.com/matemaster/master-depository/blob/master/2021-03-21/SCT.sql">SCT.sql</a></p><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><p><b style="color: yellowgreen;">关于MySQL-select语句的使用，但是不介绍</b><br><b style="color: yellowgreen;">这里先简单浏览一下，完整版本的<code>MySQL-select</code>系列语句结构！</b></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select (select_list)[into new_tb_name]from (tb_name|view_name)[where condition][group by expression][having search_condition][order by expression [desc|asc]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他DML"><a href="#其他DML" class="headerlink" title="其他DML"></a>其他DML</h2><p>（1）insert语句可以参考源码中的数据插入！</p><p>这里演示一下向表中加入一个select检索结果（加入成绩及格的同学）：<code>insert -&gt; select</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 先创建newsc关系表insert into SCT.newsc(Sid, Cid, Score)select Sid, Cid, Scorefrom SCwhere (Score &gt;= 60)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）根据where子句的条件，删除符合要求的元素（去除成绩不及格的同学记录）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete from scwhere (Score &lt; 60)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（3）update更新指定属性列的值（提高计算机教师的工资（1.5倍））</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update teacherset Salary = Salary(1+0.5)where Did in select Didfrom deptWhere (Dname = '计算机')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery主题中文参考文档</title>
      <link href="posts/43043.html"/>
      <url>posts/43043.html</url>
      
        <content type="html"><![CDATA[<h1 id="Matery主题"><a href="#Matery主题" class="headerlink" title="Matery主题"></a>Matery主题</h1><p><a href="README.md">🇺🇸English Document</a> | <a href="http://blinkfox.com/">国内访问示例 (http://blinkfox.com)</a> | <a href="https://blinkfox.github.io/">Github 部署演示示例 (https://blinkfox.github.io)</a> | QQ 交流群1（已满）: <a href="https://jq.qq.com/?_wv=1027&amp;k=5zMDYHT"><code>926552981</code></a> | QQ 交流群2（推荐）: <a href="https://jq.qq.com/?_wv=1027&amp;k=53q2Ayp"><code>971887688</code></a></p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README.md">CHANGELOG.md</a></p>]]></content>
      
      
      <categories>
          
          <category> MasterStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> Matery </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java lambda</title>
      <link href="posts/55404.html"/>
      <url>posts/55404.html</url>
      
        <content type="html"><![CDATA[<h1 id="lambda演示"><a href="#lambda演示" class="headerlink" title="lambda演示"></a>lambda演示</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is running !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下代码与上面的<strong>main</strong>方法体中的代码等效 <span class="github-emoji"><span>😮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>这便是应用了<strong>lambda</strong>表达式的匿名内部类的写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is running !"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><b style="color: chocolate;">我们通过这个演示案例可以知道lambda表达式的好处：简化匿名内部类的使用，大大简化了代码冗余的问题！</b></p><h2 id="lambda？"><a href="#lambda？" class="headerlink" title="lambda？"></a>lambda？</h2><p>知晓了<strong>lambda</strong>表达式的好处，那么<strong>lambda</strong>表达式到底是什么？</p><p>通过一个简单的代码示例理解，<strong>what is lambda expression?</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LengthComparatorTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"i"</span><span class="token punctuation">,</span><span class="token string">"am"</span><span class="token punctuation">,</span><span class="token string">"second"</span><span class="token punctuation">,</span><span class="token string">"your"</span><span class="token punctuation">,</span><span class="token string">"you"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LengthComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LengthComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span><span class="token class-name">String</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们看见一句关键的代码：<code>Arrays.sort(strings,new LengthComparator())</code> 这个针对字符串类型长度比较器，目的是为了将“比较代码块” <code>compare</code> 传入到 <strong>Arrays.sort</strong> 方法中。而<strong>lambda</strong>表达式就是为了这一目的诞生的。</p><p>我们看下面的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"i"</span><span class="token punctuation">,</span><span class="token string">"am"</span><span class="token punctuation">,</span><span class="token string">"second"</span><span class="token punctuation">,</span><span class="token string">"your"</span><span class="token punctuation">,</span><span class="token string">"you"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> second<span class="token punctuation">)</span>                     <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>(String first, String second) -&gt; {return first.length() - second.length();}</code> : <strong>lambda</strong>表达式成功的将比较代码块 <code>compare</code> 传入到 <strong>Arrays.sort</strong> 方法中。 </p><p>也得出什么是lambda表达式的答案！<span class="github-emoji"><span>😉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><b style="color: purple;">lambda表达式：是一个可传递的代码块，可以在后面被执行一次或者多次！</b></p><h1 id="lambda-函数式接口"><a href="#lambda-函数式接口" class="headerlink" title="lambda-函数式接口"></a>lambda-函数式接口</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的代码我们看见了一个特别的注解：<b style="color: aqua;">@FunctionalInterface</b> 这便是函数接口的注解！</p><p><b style="color: orangered;">函数式接口：只有一个抽象方法的接口，在使用这些接口时，就可以提供一个lambda表达式</b></p><p>我们介绍一下函数接口的<strong>特点</strong>：</p><p>（1）函数接口只能有<strong>“一个方法”</strong> </p><p>（2）函数接口可以有默认方法 <strong>default-method</strong></p><p>（3）函数接口覆盖<strong>Object</strong>祖先类的方法</p><p><b style="color: chocolate;">一个方法的说法表示是：除了default方法和Object方法之外，我们只能定义一个自己的抽象方法！</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFuncInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">diyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"函数接口的默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来演示一下这个lambda表达式实现函数式接口的过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FuncInerfaceImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         *匿名内部类实现函数式接口         * new MyFuncInterface() {         *@override         *public void diyMethod() {         *System.out.prinln("Impl diyMethod!");         *}         *}         *lambda代替匿名内部类实现类函数式接口（精简写法）         *((MyFuncInterface) () -&gt; System.out.prinln("Impl diyMethod!"))         *         *         */</span>                <span class="token class-name">MyFuncInterface</span> funcImpl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span><span class="token string">"Impl diyMethod!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p><code>lambda</code>表达式最大的吸引力就是可以与<code>函数式接口</code>进行转换！</p><p>对于那些有着特别用处的函数式接口（<code>Comparator</code>），而不是单纯的需要一个参数和返回值的方法。换而言之：就是<strong>想要lambda表达式做些稍微复杂一点的处理</strong> 那么就可以为它建立一个函数式接口！</p><p>比如之前在<a href="">ArrayList底层原理分析</a>中，谈到了一个 <code>removeIf(Predicate&lt;? super E&gt;)</code>方法这里就有一个接口</p><p><b style="color: yellow;">Predicate&lt;T&gt;</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// default-method、static-method</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个接口专门用来传递lambda表达式，所以每个list下的类都可以调用这个方法来应用lambda表达式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// list清空所有元素</span>list<span class="token punctuation">.</span><span class="token function">reomveIf</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><b style="color: red;">注：</b> lambda表达式不能直接赋值给Object类型变量，因为这里的Object不是函数式接口！</p><h1 id="lambda语法及应用"><a href="#lambda语法及应用" class="headerlink" title="lambda语法及应用"></a>lambda语法及应用</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> expressions<span class="token punctuation">;</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述代码是标准的lambda表达式语法，当然还根据有无参数分为：有参、无参！以及是否存在返回值的情况！</p><p>下面我们以上面提到的比较器为例子 <span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// LengthComparator </span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> second<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 可以推测参数类型的赋值</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> comp <span class="token operator">=</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span>second<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 返回类型通过上下文推导出的情况</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> second<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lambda表达式还有需要注意的地方：</p><p>（1）变量名不能与lambda表达式中的局部变量重名！</p><p>（2）lambda表达式不允许在某些分支返回值，而在另外一些分支不返回！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// error</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Illgeal</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> second<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lambda遍历集合操作"><a href="#lambda遍历集合操作" class="headerlink" title="lambda遍历集合操作"></a>lambda遍历集合操作</h2><p>在Java集合框架中的顶层接口 <strong>Iterable</strong> 中存在一个<code>default：forEach</code>方法,所有的具体集合类都可以利用lambda表达式进行对集合的遍历操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaItr</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"master"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"matemaster"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"masterstudio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        list.forEach(new Consumer&lt;String&gt;() {</span><span class="token comment">//            @Override</span><span class="token comment">//            public void accept(String s) {</span><span class="token comment">//                System.out.println(s);</span><span class="token comment">//            }</span><span class="token comment">//        });        </span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// mate</span><span class="token comment">// master</span><span class="token comment">// matemaster</span><span class="token comment">// masterstudio</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lambda集合排序"><a href="#lambda集合排序" class="headerlink" title="lambda集合排序"></a>lambda集合排序</h2><p>比如在<code>ArrayList</code>类中是实现了<code>List</code>接口中一个支持lambda表达式的一个<strong>sort</strong>方法，所以直接利用lambda排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Corporation</span><span class="token punctuation">&gt;</span></span>  list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Corporation</span><span class="token punctuation">(</span><span class="token string">"HUAWEI"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Corporation</span><span class="token punctuation">(</span><span class="token string">"Microsoft"</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Corporation</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Corporation</span><span class="token punctuation">(</span><span class="token string">"IBM"</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//        list.sort(new Comparator&lt;Corporation&gt;() {</span><span class="token comment">//            @Override</span><span class="token comment">//            public int compare(Corporation o1, Corporation o2) {</span><span class="token comment">//                return o1.getAge()-o2.getAge();</span><span class="token comment">//            }</span><span class="token comment">//        });</span>                list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Corporation</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Corporation</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Corporation{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lambda在线程中调用"><a href="#lambda在线程中调用" class="headerlink" title="lambda在线程中调用"></a>lambda在线程中调用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        new Thread(new Runnable() {</span><span class="token comment">//            @Override</span><span class="token comment">//            public void run() {</span><span class="token comment">//                System.out.println("当前运行线程：" + Thread.currentThread().getName());</span><span class="token comment">//            }</span><span class="token comment">//        });</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前运行线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// console: 当前运行线程：Thread-0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="lambda-cupid"><a href="#lambda-cupid" class="headerlink" title="lambda:cupid:"></a>lambda<span class="github-emoji"><span>💘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f498.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>对于一些已经存在于Java标准库的方法（或者是已有的方法），那么我们可以利用更加简洁的方式编写lambda。</p><p style="color:brown">❗语法糖：<br>（1）方法引用<br>（2）构造器引用</p><p>接下来我们展示一下，利用已有的方法去直接实现忽略大小写的字符串排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Mate"</span><span class="token punctuation">,</span><span class="token string">"mate"</span><span class="token punctuation">,</span><span class="token string">"Master"</span><span class="token punctuation">,</span><span class="token string">"master"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"CBD"</span><span class="token punctuation">}</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于利用lambda实现一个忽略大小写的比较器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用构造器引用，将字符串列表转化为另外一种类型列表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这里省去加入元素的过程</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> people <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外方法引用还可以应用在 <strong>this</strong> 和 <strong>super</strong> 两个关键字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">;</span>  <span class="token comment">// 等价于: this.equals(x)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TimeGreeter</span> <span class="token keyword">extends</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Timer</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token operator">::</span><span class="token function">greet</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 这里 super::greet  等价于 super.greet()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: navy;">语法糖总结</b> <span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-code" data-language="code"><code class="language-code">object::instaceMethod;Class::staticMethod;Class::instaceMethod;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p style="color:gray">lambda表达式的组成部分：<code>() -&gt; {}</code><br>1）参数<br>2）代码块 <br>3）自由变量值：非参数，而且不在lambda表达式内部定义的变量</p><p>先看个栗子☕</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">repeatMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token keyword">int</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ActionListener</span> listener <span class="token operator">=</span> event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">repeatMsg</span><span class="token punctuation">(</span><span class="token string">"Master"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 每隔10秒打印一下Master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 <strong>msg</strong> 就是自由变量，它是在 <strong>repeatMsg</strong> 方法中定义的参数变量。它是一个不可变量<strong>（final String）</strong></p><p>为什么这里需要强调 <strong>自由变量msg是一个不可变量</strong>❔</p><p>答：因为在lambda表达式中，自由变量为最终变量，也就是一经初始化将不再允许它在与lambda表达式同作用域内改变。无论是lambda表达式内部还是外部！</p><p>也就是说下面两个做法都是<strong>error</strong> ❎</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ActionListener</span> listener <span class="token operator">=</span> event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        start<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// error: 不允许改变自由变量 start</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ActionListener</span> listener <span class="token operator">=</span> event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token string">":"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// error: 不允许改变自由变量 i</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认一千次重复</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理lambda"><a href="#处理lambda" class="headerlink" title="处理lambda"></a>处理lambda</h2><p>前面说的全都是怎么在方法中应用lambda！那么怎么自己编写一个可以应用lambda表达式的方法呢❓</p><p>我们一般把代码块包装在lambda表达式中，主要目的：延迟执行！<br>延迟执行的原因：</p><ul><li>在单独线程运行代码</li><li>多次执行代码</li><li>在算法的合适位置执行代码（Array.sort的比较器）</li><li>回调</li><li>必要时才运行</li></ul><p>再看<strong>repeatMsg</strong> ☕</p><p>这次我们希望可以这样调用 <strong>repeatMsg</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">repeatMsg</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Master"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么如何设计这样的方法，便是主要考虑内容！请看下面的设计方式⬇️</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">repeatMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: silver;">我们得出设计一个应用lambda表达式的方法，就需要利用已有的函数式接口或者提供diy的函数式接口</b></p><p>⏳看看Java标准库中的<strong>常用函数式接口</strong></p>&nbsp;&nbsp;&nbsp;&nbsp;<tr style="background-color: chocolate;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tr style="background-color: chocolate;"><table><tbody><tr><th>函数式接口</th><th>参数类型</th>        <th>返回类型</th>        <th>抽象方法名</th>        <th>描述</th>        <th>其他方法</th></tr>    <tr>        <td>Runable</td>        <td>无</td>        <td>void</td>        <td>run</td>        <td>作无参返回值的动作运行</td>        <td></td>    </tr>    <tr>        <td>Suppiler&lt;T&gt;</td>        <td>无</td>        <td>T</td>        <td>get</td>        <td>返回T型的值</td>        <td></td>    </tr>     <tr>        <td>Consumer&lt;T&gt;</td>        <td>T</td>        <td>void</td>        <td>accept</td>        <td>处理T型值</td>        <td>andThen</td>    </tr>     <tr>        <td>BiConsumer&lt;T,U&gt;</td>        <td>T,U</td>        <td>void</td>        <td>accept</td>        <td>处理T,U类型的值</td>        <td>andThen</td>    </tr>     <tr>        <td>Function&lt;T,R&gt;</td>        <td>T</td>        <td>R</td>        <td>apply</td>        <td>有个T类型的函数</td>        <td>compose,andThen,identity</td>    </tr>     <tr>        <td>BiFunction&lt;T,U,R&gt;</td>        <td>T,U</td>        <td>R</td>        <td>apply</td>        <td>有T,U类型值的函数</td>        <td>andThen</td>    </tr>     <tr>        <td>UnaryOperator&lt;T&gt;</td>        <td>T</td>        <td>T</td>        <td>apply</td>        <td>类型T的一元操作符</td>        <td>compose,andThen,identity</td>    </tr>     <tr>        <td>BinaryOperator&lt;T&gt;</td>        <td>T,T</td>        <td>T</td>        <td>apply</td>        <td>类型T的二元操作符</td>        <td>andThen,maxBy,minBy</td>    </tr>     <tr>        <td>Predicate&lt;T&gt;</td>        <td>T</td>        <td>boolean</td>        <td>test</td>        <td>布尔函数</td>        <td>and,or,negate,isEqual</td>    </tr>     <tr>        <td>BiPredicate&lt;T,U&gt;</td>        <td>T,U</td>        <td>boolean</td>        <td>test</td>        <td>两个参数的布尔函数</td>        <td>and,or,negate</td>    </tr></tbody></table>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<p>⌛基本类型的函数式接口：这些接口可以减少自动装箱</p>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java接口技术</title>
      <link href="posts/35488.html"/>
      <url>posts/35488.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h1><p>接口技术主要来描述类具有什么功能，也就说明Java接口不会具体实现方法。接口就相当于一个类的功能说明书，当一个类去实现了一个特定的接口，就表面这个类具有接口中所提及的功能。<br>接口也是Java实现多继承的优化方式。</p><p>我们举个栗子<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>一般情况下 我们在使用 <code>Arrays.(Obejct[])</code> 方法时，这里传入的参数数组就必须要实现 <code>Comparable</code>接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们得出每一个实现了 <strong>Comparable</strong> 接口的类，都将具有这个 <strong>compareTo(T)</strong> ，那么编译器在执行代码时，就不用附加判断这个方法是不是对应类型。相当于接口的功能性标记！</p><h1 id="接口的特性"><a href="#接口的特性" class="headerlink" title="接口的特性"></a>接口的特性</h1><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>接口不是类，没有构造器，也就是不存在接口对象，但是和抽象类一致，没有对象也可以有接口变量。接口变量通过接受实现类的对象实例引用，可以调用实现的接口方法。当然同样也可以使用 <strong>instanceof</strong> 去判断类是否接口以下代码说明了上面的这段话</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Impl Test !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TestImpl</span> ti <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Test</span> t <span class="token operator">=</span> ti<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ti <span class="token keyword">instanceof</span> <span class="token class-name">Test</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ti<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// console : Impl Test !</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>接口中不能定义实例域和静态方法（虽然Java8之后支持，但是也不会这么做）。但是接口中可以定义常量，并且含有自动的修饰词 <code>public static final</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Movable</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> SPEED_LIMIT <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">;</span> <span class="token comment">// (public static final) double SPEED_LIMIT</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="接口中的方法"><a href="#接口中的方法" class="headerlink" title="接口中的方法"></a>接口中的方法</h1><p><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>接口中的方法都是抽象方法（除了 <b style="color: red;">default</b>关键词修饰的方法），也就是含有自带的修饰词<code>public abstract</code></p><p>接下来举个<code>Iterable</code>栗子 <span class="github-emoji"><span>🆗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f197.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">//迭代器</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 增强for循环</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> t <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 拆分器</span>    <span class="token keyword">default</span> <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Spliterators</span><span class="token punctuation">.</span><span class="token function">spliteratorUnknownSize</span><span class="token punctuation">(</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）我们看到，这个接口有两个默认的方法。虽然还不是很清楚第二个具体干啥，但是可以清楚的知道，所有实现这个接口的类都将能使用 增强for循环、拆分器（关键是不用自己去实现了）。这就是默认方法的好处。当然这里的迭代器方法也告诉了编译器，它的实现类都拥有获取迭代器的能力。而具体的迭代器功能需要其实现类去实现<code>Iterator</code>接口。</p><p>（2）代码中告诉我们， default方法可以调用其他任何方法！</p><h2 id="解决接口冲突"><a href="#解决接口冲突" class="headerlink" title="解决接口冲突"></a>解决接口冲突</h2><p>之前说到过：接口最大优点就是很好的解决了多继承带来的困扰，但是其实这样也会有问题。<span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>比如： 1. 我实现的多个接口，含有方法签名完全一致的方法，这个时候实现的方法应该怎么做？ 2.我从父类继承了一个和实现接口中一样的方法，那么又怎么办？</p><p>Java的解决规则：</p><p>（1）全覆盖，对于接口重复的方法，直接覆盖。</p><p>（2）超类优先，不管接口的实现方法，直接忽略，只承认继承的方法</p><h1 id="接口回调"><a href="#接口回调" class="headerlink" title="接口回调"></a>接口回调</h1><p><strong>callback</strong> 作为一种常用的设计模式，回调就是在特定的时间发生时所需要采取的一种应对方法。</p><p>请看下面代码👇</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo08</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ActionListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimePrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Timer</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"Quit program?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TimePrinter</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"At the tone the time is : "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h1><p>这里创建一个例子 <code>Company(name,foundedTime,founder)</code>类进行克隆演示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> foundedTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> founder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Date</span> foundedTime<span class="token punctuation">,</span> <span class="token class-name">String</span> founder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>foundedTime <span class="token operator">=</span> foundedTime<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>founder <span class="token operator">=</span> founder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// getter、setter</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再看下面的代码操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// copy</span><span class="token class-name">Company</span> alibaba <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"Alibaba"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1999"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">JackMa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Company</span> copyAli <span class="token operator">=</span> alibaba<span class="token punctuation">;</span>copyAli<span class="token punctuation">.</span><span class="token function">setFoundedTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token string">"1999-9-9"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// clone</span><span class="token class-name">Company</span> huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"HUAWEI"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1987"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RZF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Company</span> hwClone <span class="token operator">=</span> huawei<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hwClone<span class="token punctuation">.</span><span class="token function">setFoundedTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token string">"1987-9-15"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210317215740.jpg"></p><p>我们从上面这个简单的图例就能看出来，拷贝就是简单的对象共享，而克隆则是创建了两个内容相同的不同对象。 这样的话 <strong>alibaba</strong> 和 <strong>copyAli</strong> 一个对象状态改变另外一个对象都会随着改变。而对于 <strong>huawei</strong> 和 <strong>hwclone</strong> 每一个对象都会有单独的属于自己的状态，彼此之间并没有影响。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// clone</span><span class="token class-name">Company</span> huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"HUAWEI"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1987"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RZF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Company</span> hwClone <span class="token operator">=</span> huawei<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hwClone<span class="token punctuation">.</span><span class="token function">setFoundedTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1987-9-15"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: yellowgreen;">浅拷贝</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> foundedTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> founder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Date</span> foundedTime<span class="token punctuation">,</span> <span class="token class-name">String</span> founder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>foundedTime <span class="token operator">=</span> foundedTime<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>founder <span class="token operator">=</span> founder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFoundedTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> foundedTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>foundedTime <span class="token operator">=</span> foundedTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 修改方法的权限为：public ，返回类型改为：Company</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Company</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Company</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Company{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", foundedTime="</span> <span class="token operator">+</span> foundedTime <span class="token operator">+</span>                <span class="token string">", founder='"</span> <span class="token operator">+</span> founder <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210317221453.jpg"></p><p>这里代码的图解看出来，对于 <strong>Company</strong> 对象的数据域存在着两类子对象引用。当然对于像 <strong>String</strong> 这种不可变的 <strong>final</strong> 类，我们并不必要担心浅拷贝的弊端。因为源对象 <strong>huawei</strong> 和 浅拷贝对象 <strong>hwclone</strong> 共享的子对象是不可变的 （这里如果子对象在其生命周期之内，包含不变的常量，没有更改器会更改它的状态，没有方法生成它的引用） 这样都是一样安全的。<span class="github-emoji"><span>😓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </p><p>但是对于像 <strong>Date</strong> 这种子对象可变的，我们始终无法保持 <strong>huawei</strong> 和 <strong>hwclone</strong> 状态能够保持一致。我现在假设 执行了上面代码块的类似代码，那么虽然是<code>hwclone.setFoundedTime(new Data("1987-9-15"))</code> 我们可以大致推测出此时 <strong>huawei</strong> 的创立时间被改变。</p><p>为了避免类似上述情况，我们引入深拷贝的操作！ <span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// clone</span><span class="token class-name">Company</span> huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"HUAWEI"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1987"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RZF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Company</span> hwClone <span class="token operator">=</span> huawei<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hwClone<span class="token punctuation">.</span><span class="token function">setFoundedTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1987-9-15"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color: orange;">深拷贝</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Company</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Company</span> comClone <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comClone<span class="token punctuation">.</span>foundedTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">)</span> foundedTime<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comClone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样对于这些可变的子对象引用，每一个都有这个自己独立的状态，彼此之间互不影响。</p>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3实现信封动画</title>
      <link href="posts/64199.html"/>
      <url>posts/64199.html</url>
      
        <content type="html"><![CDATA[<h1 id="电脑端信封骨架结构"><a href="#电脑端信封骨架结构" class="headerlink" title="电脑端信封骨架结构"></a>电脑端信封骨架结构</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>computer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maincontent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeimg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>envelope<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formmain<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              <span class="token comment">&lt;!--这里存放的是自己想展示的信封内容，注意图片大小，会影响演示效果--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headerimg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">padding</span><span class="token punctuation">:</span> 5px 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--以下是自己想要写入的内容--&gt;</span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">calss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>来自MateMaster的留言:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                有什么想问的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                有什么想说的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                有什么想吐槽的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                有什么新奇的想法，也都可以告诉我哦~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomcontent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomimg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomhr<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>自动书记人偶竭诚为您服务！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterimg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="移动端信封骨架结构"><a href="#移动端信封骨架结构" class="headerlink" title="移动端信封骨架结构"></a>移动端信封骨架结构</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mobile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formmain<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headerimg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">padding</span><span class="token punctuation">:</span> 5px 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>来自MateMaster的留言:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          有什么想问的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>          有什么想说的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>          有什么想吐槽的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>          有什么新奇的想法，也都可以告诉我哦~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomcontent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomhr<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottomhr<span class="token punctuation">"</span></span><span class="token attr-name">"</span><span class="token punctuation">&gt;</span></span>自动书记人偶竭诚为您服务！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="css渲染动画"><a href="#css渲染动画" class="headerlink" title="css渲染动画"></a>css渲染动画</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/envelope.css<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将css文件放在 <strong>hexo-theme-matery</strong> 主题文件夹的 <strong>source/css</strong> 目录下，<strong>然后直接按照此方式引用即可！ 源码中我写的link为了演示效果，与这里引用的href不一致，注意修改</strong></p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-one/images/20210319145308.gif" style="width: 75%;border:solid"><h1 id="完整源码资源"><a href="#完整源码资源" class="headerlink" title="完整源码资源"></a>完整源码资源</h1><p>这里骨架结构，为了代码演示美观，我就直接把图片的<strong>src</strong>省略了，具体的可以直接在我的<strong>gitee</strong>仓库中下载源码</p><p><strong>首页就有gitee仓库的直通车O(∩_∩)O</strong></p><p>👉 <a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-17"><b>信封动画的源代码</b></a></p>]]></content>
      
      
      <categories>
          
          <category> MasterStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> MasterStudio </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Collection&lt;E&gt;</title>
      <link href="posts/46419.html"/>
      <url>posts/46419.html</url>
      
        <content type="html"><![CDATA[<h1 id="集合框架图"><a href="#集合框架图" class="headerlink" title="集合框架图"></a>集合框架图</h1><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-blog/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%9B%BE.png"></p><h2 id="collection框架图"><a href="#collection框架图" class="headerlink" title="collection框架图"></a>collection框架图</h2><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-blog/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%9B%BE.jpg"></p><h1 id="Java集合具体框架类"><a href="#Java集合具体框架类" class="headerlink" title="Java集合具体框架类"></a>Java集合具体框架类</h1><table><thead><tr><th>list</th><th>含义</th></tr></thead><tbody><tr><td><strong>ArrayList</strong></td><td>一种可以动态增长和缩减的索引序列</td></tr><tr><td><strong>LinkedList</strong></td><td>一种可以在任何位置进行高效地插人和删除操作的有序序列</td></tr><tr><td><strong>Vector</strong></td><td>Vector类实现了一个可增长的对象数组</td></tr><tr><td><strong>Stack</strong></td><td>堆栈类表示对象的最后一个先出（LIFO）堆栈。它用五个操作扩展类向量，使向量可以被视为堆栈。</td></tr></tbody></table><table><thead><tr><th>set</th><th>含义</th></tr></thead><tbody><tr><td><strong>HashSet</strong></td><td>一种没有重复元案的无序集合</td></tr><tr><td><strong>TreeSet</strong></td><td>一种有序集</td></tr><tr><td><strong>EnumSet</strong></td><td>一种包含枚举类型值的集</td></tr><tr><td><strong>LinkedHashSet</strong></td><td>一种可以记住元素插人次序的集</td></tr></tbody></table><table><thead><tr><th>queue</th><th>含义</th></tr></thead><tbody><tr><td><strong>ArrayDeque</strong></td><td>一种用循环数组实现的双端队列</td></tr><tr><td><strong>PriorityQueue</strong></td><td>一种允许高效删除最小元素的集合</td></tr></tbody></table><table><thead><tr><th>map</th><th>含义</th></tr></thead><tbody><tr><td><strong>HashMap</strong></td><td>一种存储键/值关联的数据结构</td></tr><tr><td><strong>TreeMap</strong></td><td>一种键值有序排列的映射表</td></tr><tr><td><strong>EnumMap</strong></td><td>一种键值属于枚举类型的映射表</td></tr><tr><td><strong>LinkedHashMap</strong></td><td>一种可以记住键/值项添加次序序的映射表</td></tr><tr><td><strong>WeakHashMap</strong></td><td>一种其值无用武之地后可以被垃圾回收器回收的映射表</td></tr><tr><td><strong>IdentityHashMap</strong></td><td>一种用 == 而不是用 equals 比较键值的映射表</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList&lt;E&gt;底层原理</title>
      <link href="posts/49605.html"/>
      <url>posts/49605.html</url>
      
        <content type="html"><![CDATA[<h1 id="原理分析图"><a href="#原理分析图" class="headerlink" title="原理分析图"></a>原理分析图</h1><p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-blog/ArrayList.png"></p><h1 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h1><h2 id="完整关系图"><a href="#完整关系图" class="headerlink" title="完整关系图"></a>完整关系图</h2><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-blog/ArrayList继承关系.jpg" style="zoom: 50%;"><p>————–&gt;此继承关系图来资源idea</p><h1 id="★源码分析"><a href="#★源码分析" class="headerlink" title="★源码分析"></a>★源码分析</h1><p style="color: red; font-size :36px">    JDK-8U281</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><table><thead><tr><th>构造方法</th><th>含义</th></tr></thead><tbody><tr><td><strong>public ArrayList()</strong></td><td>创建初始容量为10的空列表（逻辑长度为0）</td></tr><tr><td><strong>public ArrayList(int initialCapacity)</strong></td><td>创建初始容量为initialCapacity的列表</td></tr><tr><td>★<strong>public ArrayList(Collection&lt;? extends E&gt; c)</strong></td><td>创建一个包含collection元素的列表，按照collection的迭代器返回的顺序来排列</td></tr></tbody></table><p style="color : hotpink">    <b>(1) public ArrayList()</b>是如何实现创建一个初始容量为10的空列表（逻辑长度为0）？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们从这里的代码可能看出，此时的列表存储 <strong>elementData</strong> 是一个空的数组。那么何来的初始容量为10？<br>这里的10是在添加元素时，才能体现出来的作用。</p><img src="https://cdn.jsdelivr.net/gh/matemaster9/image-blog/初始容量10的创建过程.jpg" style="zoom: 50%;"><p>从上述代码关系图可以看出，在向<strong>elementData</strong>  <strong>add</strong> 第一个元素时，数组<strong>elementData</strong>会进行与默认容量的空数组 <strong>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</strong> 进行比对。如果比对成功的情况下，会自动对返回默认的初始容量 <strong>DEFAULT_CAPACITY = 10</strong>。所以说此时创建的列表虽然初始容量为10，但是逻辑长度为0。“逻辑长度：数组实际含有的元素，也是size()方法的返回值。”</p><p style="color : hotpink">    <b>(2) public ArrayList(int initialCapacity)</b>是如何实现创建一个初始容量为initialCapacity的列表？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// if...else if...else结构完成三种情况的讨论</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p style="color : hotpink">    <b>(3) public ArrayList(Collection&lt;? extends E&gt; c)</b>是如何实现创建一个包含collection元素的列表，按照collection的迭代器返回的顺序来排列？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 集合元素转成数组</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第一次判断数组是否为空、并完成逻辑长度的赋值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 第二次类型判断、完成数组的拷贝</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            elementData <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h2><table><thead><tr><th>add</th><th>含义</th></tr></thead><tbody><tr><td><strong>public boolean add(E e)</strong></td><td>添加元素e，返回值代表是否加入成功</td></tr><tr><td><strong>public void add(int index, E element)</strong></td><td>在指定的index处，加入元素element</td></tr></tbody></table><p style="color: hotpink">    <b>数组扩容的核心思想 : capacity</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>        <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>    MAX_ARRAY_SIZE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p style="color : hotpink">    <b>public boolean add(E e)</b>是如何实现加入一个e，并且返回成功标志，以及对数组的动态调整？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** add源码分析 * @author MateMaster * @version JDK-8U281 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p style="color : hotpink">    <b>public void add(int index, E element)</b>是如何实现在指定位置index加入元素e，并且完成对数组的动态调整？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//System.arraycopy : 完成插入前，插入位置数组元素地右移</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;</span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Index:"</span> <span class="token operator">+</span>index<span class="token operator">+</span> <span class="token string">",Size:"</span> <span class="token operator">+</span>size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//关于 ensureCapacityInternal()系列的方法，可以参考上面的add方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>addAll</th><th>含义</th></tr></thead><tbody><tr><td><strong>public boolean addAll(Collection&lt;? extends E&gt; c)</strong></td><td>将集合collection元素加入到列表中</td></tr><tr><td><strong>public boolean addAll(int index, Collection&lt;? extends E&gt; c)</strong></td><td>在指定的位置加入集合元素</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//生成包含集合元素的数组、并将逻辑长度复制为numNew</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">//ensureCapacityInternal : 确保数组的容量</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//System.arraycopy : 将集合c里的元素复制到列表里面</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//System.arraycopy : 完成对数组元素的移动</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token operator">+</span>numNew<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//System.arraycopy : 将集合c元素复制到相应的位置</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color : red">总结：</b> <b style="color : hotpink">从上述的代码我们可以看出，关于元素的添加的核心内容主要在于：1.数组容量的正确调整。2.数组元素的正确复制。也就是以ensureCapacityInternal()系列方法为核心的容量的动态调整，以及System.arraycopy()方法的两种作用——元素移动、元素复制。</b></p><h2 id="★删除方法？"><a href="#★删除方法？" class="headerlink" title="★删除方法？"></a>★删除方法？</h2><table><thead><tr><th>remove</th><th>含义</th></tr></thead><tbody><tr><td><strong>public E remove(int index)</strong></td><td>删除指定位置，并返回删除的元素</td></tr><tr><td><strong>public boolean remove(Object o)</strong></td><td>删除元素o，并且返回成功标志</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 首先判断索引位置是否合理</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 其次保留删除内容</span>    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 确定需要移动元素的个数</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 判断个数，并且完成移动</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//移动结束后，列表尾部置空，完成删除操作</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//check index</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">outOfBoundMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"Index:"</span> <span class="token operator">+</span> index<span class="token operator">+</span> <span class="token string">", Size:"</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//positional access</span><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">elementData</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">E remove(int)总结：</b> 从上述代码可以看出，删除指定位置的元素操作大致分为以下几个步骤：</p><p>（1） 索引校验<br>（2） 保留待删除的元素<br>（3） 确定删除前，需要移动的元素个数<br>（4） 判断个数，完成index后元素的前移动作<br>（5） 尾部位置元素置空，并将size-1</p><p>这里理解的难点在于：移动元素的个数（size-index-1）、System.arraycopy方法中源-目的数组复制的起始位置、size-1与尾部置空操作的先后顺序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// fastRemove</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">boolean remove(Object)总结：</b> 从上述代码看出，整个删除操作的核心过程就在去两个：找元素、快删除。这里为了避免null引起的调用equals方法的异常，所以将null单独提出来讨论。其次就是数组遍历，找出元素位置，然后进行快速删除。这里的快速删除与上面remove保持一致。</p><table><thead><tr><th>removeAll</th><th>含义</th></tr></thead><tbody><tr><td>★<strong>public boolean removeAll(Collection&lt;?&gt; c)</strong></td><td>从此列表中移除包含在指定集合c中的所有元素</td></tr></tbody></table><table><thead><tr><th>retainAll</th><th>含义</th></tr></thead><tbody><tr><td>★<strong>public boolean retainAll(Collection&lt;?&gt; c)</strong></td><td>从此列表中移除不包含在指定集合c中的所有元素</td></tr></tbody></table><p style="color:hotpink">    这里利用一个数学表达式来表示这两个方法的作用：<br>    <b>（1）list.removeAll(c) : list - list ∩ c</b><br>    <b>（2）list.retainAll(c) : list ∩ c</b>   </p>    <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 判断对象是否是空</span>    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 批删除操作</span>    <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于这个方法最为重要的便是理解下面这两个方法：</p><p><b style="color:hotpink">（1）requireNonNull</b></p><p><b style="color:hotpink">（2）batchRemove ？</b></p><p>而（1）方法只是单纯的用于判断集合对象是否为空、终点都在第二个 <strong>batchRemove</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">batchRemove</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span> <span class="token keyword">boolean</span> complement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copyData <span class="token operator">=</span> elementData<span class="token punctuation">;</span>    <span class="token keyword">int</span> read <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> write <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> modified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> read <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> read<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>copyData<span class="token punctuation">[</span>read<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> complement<span class="token punctuation">)</span>                elementData<span class="token punctuation">[</span>write<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> copyData<span class="token punctuation">[</span>read<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>copyData<span class="token punctuation">,</span> read<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> write<span class="token punctuation">,</span> size <span class="token operator">-</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>            write <span class="token operator">+=</span> size <span class="token operator">-</span> read<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>write <span class="token operator">!=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// clear to let GC do its work</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> write<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                copyData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            modCount <span class="token operator">+=</span> size <span class="token operator">-</span> write<span class="token punctuation">;</span>            size <span class="token operator">=</span> write<span class="token punctuation">;</span>            modified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> modified<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">batchRemove总结：</b> 这一部分相较于底层源码在一些变量上面进行了一些变动，因为底层源码不太好理解，所以就按照自己的理解意思进行了修改，测试功能一致。这部分理解难点就在于 <strong>try</strong> 语句块。我们从补充标志 <strong>complement</strong> 决定是删除、还是保留。</p><p>当 <strong>complement == false</strong> 时，表面<strong>不会保留共同元素</strong>，也就是会<strong>删除</strong>列表中所有与集合c<strong>相同</strong>的元素。<br>当 <strong>complement == true</strong> 时，表明<strong>会保留共同元素</strong>，也就是说会<strong>删除</strong>列表中所有与集合c<strong>不相同</strong>的元素。</p><p>关于finally语句块里面提到的两个if条件判断的情况，目前理解就是保持与AbstractCollection的兼容性。</p><table><thead><tr><th>范围删除</th><th>含义</th></tr></thead><tbody><tr><td><strong>protected void removeRange(int fromIndex, int toIndex)</strong></td><td>删除[fromIndex,toIndex)元素</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 确定移动个数，并移动</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> toIndex<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> toIndex<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> fromIndex<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 确定新的size、并且将 [size - (toIndex - fromIndex),size)的元素清空</span>    <span class="token keyword">int</span> newSize <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token punctuation">(</span>toIndex <span class="token operator">-</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>newSize<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 重新设置size</span>    size <span class="token operator">=</span> newSize<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">removeRange总结：</b>此方法中当 <strong>fromIndex &lt;= toIndex</strong> 时,方法会删除列表中[from,to)元素。但是当不会满足上面条件时，方法就是无效，并且抛出 <strong>IndexOutOfBoundsException</strong></p><h2 id="简单方法"><a href="#简单方法" class="headerlink" title="简单方法"></a>简单方法</h2><table><thead><tr><th>set</th><th>含义</th></tr></thead><tbody><tr><td><strong>public E set(int index, E element)</strong></td><td>将指定位置index的元素设置为element</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 索引校验 : rangeCheck(index)</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 位置存取操作 : E elementData(index)</span>    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>get</th><th>含义</th></tr></thead><tbody><tr><td><strong>public E get(int index)</strong></td><td>获取指定位置index处的元素</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">set/get总结: 索引校验、位置存取操作</b></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//check index</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"Index:"</span> <span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">", Size:"</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//positional access</span><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">elementData</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>clear</th><th>含义</th></tr></thead><tbody><tr><td><strong>public void clear()</strong></td><td>情况列表的元素</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>contains</th><th>含义</th></tr></thead><tbody><tr><td><strong>public boolean contains(Object o)</strong></td><td>判断此列表是否包含至少一个满足 (o==null ? e==null : o.equals(e)) 的元素 e</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获取元素o在列表中的位置 左-&gt;右</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取元素o在列表中的位置 左&lt;-右</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h2><table><thead><tr><th>toArray</th><th>含义</th></tr></thead><tbody><tr><td><strong>public Object[] toArray()</strong></td><td>将集合对象转换成数组</td></tr><tr><td><strong>public &lt;T&gt; T[] toArray(T[] arrayToFill)</strong></td><td>集合对象转换成T类型数组、并将多余部分使用a里的元素填充</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b style="color:hotpink">T[] toArray(T[] a)总结：</b> 主要分为两种情况：</p><p>（1）当数组a的长度小于列表长度时，则会直接将列表转化为T类型的数组。<br>（2）当数组a的长度大于或等于列表长度时，则会超出长度的部分都将会使用数组a里面的元素进行填充。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>list1 <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span>此时会得到新的数组 <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> T1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>list2 <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>此时会得到新数组 <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> T2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>toString</th><th>含义</th></tr></thead><tbody><tr><td><strong>public String toString()</strong></td><td>将列表以数组的字符串形式输出（继承自AbstractCollection）</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取迭代器</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 判断是否有元素</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 收集元素转换成字符串</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">E</span> e <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">this</span> <span class="token operator">?</span> <span class="token string">"(this collection)"</span> <span class="token operator">:</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="★迭代器"><a href="#★迭代器" class="headerlink" title="★迭代器"></a>★迭代器</h1><table><thead><tr><th align="center">iterator</th></tr></thead><tbody><tr><td align="center"><strong>public Iterator&lt;E&gt; iterator()</strong></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> exceptedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>                <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>cursor <span class="token operator">!=</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> current <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">&gt;=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        cursor <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> current<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="动态扩容和缩减"><a href="#动态扩容和缩减" class="headerlink" title="动态扩容和缩减"></a>动态扩容和缩减</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// overflow-conscious code</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>        <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>    MAX_ARRAY_SIZE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="gt-demo"><a href="#gt-demo" class="headerlink" title="-> demo"></a>-&gt; demo</h1><p>这里是ArrayList常用方法的演示代码，较长但简单，就是一个测试的demo。具体的相关测试代码及ArrayList源码、可以访问我的gitee仓库进行下载查看 👉 <a href="https://gitee.com/matemaster/master-depository/tree/master/2021-03-14"><b>ArrayList原理分析的相关代码</b></a></p>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoreJava笔记总结</title>
      <link href="posts/63231.html"/>
      <url>posts/63231.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java程序设计"><a href="#Java程序设计" class="headerlink" title="Java程序设计"></a>Java程序设计</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组元素的初始值"><a href="#数组元素的初始值" class="headerlink" title="数组元素的初始值"></a>数组元素的初始值</h3><p>Java中数组的声明以及初始化！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">InitVal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">short</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shorts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">short</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> longs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> doubles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> floats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> booleans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>shorts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>longs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>doubles<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>floats<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>booleans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里穿插一下，数组声明以及匿名数组的概念</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anonymous<span class="token punctuation">;</span>anonymous <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>anonymous <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组的循环"><a href="#数组的循环" class="headerlink" title="数组的循环"></a>数组的循环</h3><p>在数组的循环语句中，可以使用数组下标的<code>for i</code>循环和不使用下标的循环<code>for each</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ArrLoop</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// for i</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> randoms <span class="token operator">=</span> numbers<span class="token punctuation">;</span>                <span class="token comment">// randoms.for</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> random <span class="token operator">:</span> randoms<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组元素："</span> <span class="token operator">+</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组工具类Arrays"><a href="#数组工具类Arrays" class="headerlink" title="数组工具类Arrays"></a>数组工具类Arrays</h3><p>这里演示一下常用的功能，具体的详细用法可以参考api或者是参考我的这篇总结 <a href="https://matemaster.gitee.io/2021/02/05/web-jse-7/">Arrays</a></p><ul><li><b style="color: blue;">数组的复制</b></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copyNums <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>copyNums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><b style="color: blue;">数组的排序</b></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> randoms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Random</span> rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> randoms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        randoms<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>randoms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>randoms<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>randoms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>先展示二维数组的一般遍历条件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Random</span> rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 矩阵的数组下标遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 矩阵的数组元素列表</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 双层for each循环遍历矩阵元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> colValue <span class="token operator">:</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>colValue <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CoreJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello MasterStudio!</title>
      <link href="posts/9622.html"/>
      <url>posts/9622.html</url>
      
        <content type="html"><![CDATA[<h1 id="技术文章"><a href="#技术文章" class="headerlink" title="技术文章"></a>技术文章</h1><h1 id="技术学习笔记"><a href="#技术学习笔记" class="headerlink" title="技术学习笔记"></a>技术学习笔记</h1>]]></content>
      
      
      <categories>
          
          <category> MasterStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> MasterStudio </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
